
mini_test_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800aca0  0800aca0  0001aca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b870  0800b870  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b878  0800b878  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b87c  0800b87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b880  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004744  200001f0  0800ba70  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004934  0800ba70  00024934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192f2  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ce  00000000  00000000  00039555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001114  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a061  00000000  00000000  0003f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a29d  00000000  00000000  00059675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b5b3  00000000  00000000  00073912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000703c  00000000  00000000  0010eec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00115f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac88 	.word	0x0800ac88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800ac88 	.word	0x0800ac88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bb 	b.w	8000ff0 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Read_Data>:
 * @param len Number of bytes to read.
 * @return 0 on success, 1 on failure.
 */
static inline int Read_Data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
                            uint8_t len)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	461a      	mov	r2, r3
 8001000:	460b      	mov	r3, r1
 8001002:	72fb      	strb	r3, [r7, #11]
 8001004:	4613      	mov	r3, r2
 8001006:	72bb      	strb	r3, [r7, #10]
    uint16_t tx_buff;
    tx_buff = (dev->addr << 1);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	82fb      	strh	r3, [r7, #22]
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	b29a      	uxth	r2, r3
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	b29b      	uxth	r3, r3
 800101c:	8af9      	ldrh	r1, [r7, #22]
 800101e:	f241 3488 	movw	r4, #5000	; 0x1388
 8001022:	9402      	str	r4, [sp, #8]
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	f002 fb16 	bl	800365c <HAL_I2C_Mem_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <Read_Data+0x46>
        return 0;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <Read_Data+0x48>
    else
        return 1;
 800103a:	2301      	movs	r3, #1

}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <Compensate_Temperature>:
 * @param fine_temp Pointer to store the calculated fine temperature.
 * @return Compensated temperature value in degrees Celsius.
 */
static inline int32_t Compensate_Temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
        int32_t *fine_temp)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;

    var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	10da      	asrs	r2, r3, #3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	1ad3      	subs	r3, r2, r3
            * (int32_t) dev->dig_T2) >> 11;
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001062:	fb02 f303 	mul.w	r3, r2, r3
    var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001066:	12db      	asrs	r3, r3, #11
 8001068:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	111b      	asrs	r3, r3, #4
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	1a9b      	subs	r3, r3, r2
              * ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	1112      	asrs	r2, r2, #4
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	8809      	ldrh	r1, [r1, #0]
 800107c:	1a52      	subs	r2, r2, r1
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	131b      	asrs	r3, r3, #12
            * (int32_t) dev->dig_T3) >> 14;
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800108a:	fb02 f303 	mul.w	r3, r2, r3
    var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800108e:	139b      	asrs	r3, r3, #14
 8001090:	613b      	str	r3, [r7, #16]

    *fine_temp = var1 + var2;
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	441a      	add	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
    return (*fine_temp * 5 + 128) >> 8;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	3380      	adds	r3, #128	; 0x80
 80010a8:	121b      	asrs	r3, r3, #8
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <Compensate_Pressure>:
 * @param humidity Pointer to store the compensated humidity in %RH.
 * @return True if reading is successful, false otherwise.
 */
static inline uint32_t Compensate_Pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
        int32_t fine_temp)
{
 80010b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010ba:	b0cc      	sub	sp, #304	; 0x130
 80010bc:	af00      	add	r7, sp, #0
 80010be:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80010c2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80010c6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
    int64_t var1, var2, p;

    var1 = (int64_t) fine_temp - 128000;
 80010ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010ce:	17da      	asrs	r2, r3, #31
 80010d0:	461c      	mov	r4, r3
 80010d2:	4615      	mov	r5, r2
 80010d4:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80010d8:	f145 3bff 	adc.w	fp, r5, #4294967295
 80010dc:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
    var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80010e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010e8:	fb03 f102 	mul.w	r1, r3, r2
 80010ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010fe:	fba3 8903 	umull	r8, r9, r3, r3
 8001102:	eb02 0309 	add.w	r3, r2, r9
 8001106:	4699      	mov	r9, r3
 8001108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800110c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001110:	b21b      	sxth	r3, r3
 8001112:	17da      	asrs	r2, r3, #31
 8001114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800111c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001120:	4603      	mov	r3, r0
 8001122:	fb03 f209 	mul.w	r2, r3, r9
 8001126:	460b      	mov	r3, r1
 8001128:	fb08 f303 	mul.w	r3, r8, r3
 800112c:	4413      	add	r3, r2
 800112e:	4602      	mov	r2, r0
 8001130:	fba8 1202 	umull	r1, r2, r8, r2
 8001134:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001138:	460a      	mov	r2, r1
 800113a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800113e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001142:	4413      	add	r3, r2
 8001144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001148:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800114c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001150:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001158:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800115c:	b21b      	sxth	r3, r3
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001164:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800116c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001170:	462a      	mov	r2, r5
 8001172:	fb02 f203 	mul.w	r2, r2, r3
 8001176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800117a:	4621      	mov	r1, r4
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	441a      	add	r2, r3
 8001182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001186:	4621      	mov	r1, r4
 8001188:	fba3 1301 	umull	r1, r3, r3, r1
 800118c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001190:	460b      	mov	r3, r1
 8001192:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800119a:	18d3      	adds	r3, r2, r3
 800119c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011a0:	f04f 0000 	mov.w	r0, #0
 80011a4:	f04f 0100 	mov.w	r1, #0
 80011a8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80011ac:	462b      	mov	r3, r5
 80011ae:	0459      	lsls	r1, r3, #17
 80011b0:	4623      	mov	r3, r4
 80011b2:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80011b6:	4623      	mov	r3, r4
 80011b8:	0458      	lsls	r0, r3, #17
 80011ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80011be:	1814      	adds	r4, r2, r0
 80011c0:	643c      	str	r4, [r7, #64]	; 0x40
 80011c2:	414b      	adcs	r3, r1
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
 80011c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80011ca:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80011ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	17da      	asrs	r2, r3, #31
 80011da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80011de:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f04f 0100 	mov.w	r1, #0
 80011ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011ee:	00d9      	lsls	r1, r3, #3
 80011f0:	2000      	movs	r0, #0
 80011f2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80011f6:	1814      	adds	r4, r2, r0
 80011f8:	63bc      	str	r4, [r7, #56]	; 0x38
 80011fa:	414b      	adcs	r3, r1
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011fe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001202:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001206:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800120a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800120e:	fb03 f102 	mul.w	r1, r3, r2
 8001212:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	18ca      	adds	r2, r1, r3
 8001220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001224:	fba3 1303 	umull	r1, r3, r3, r3
 8001228:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800122c:	460b      	mov	r3, r1
 800122e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800123c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001240:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001244:	b21b      	sxth	r3, r3
 8001246:	17da      	asrs	r2, r3, #31
 8001248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800124c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001250:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001254:	462b      	mov	r3, r5
 8001256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800125a:	4642      	mov	r2, r8
 800125c:	fb02 f203 	mul.w	r2, r2, r3
 8001260:	464b      	mov	r3, r9
 8001262:	4621      	mov	r1, r4
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	4413      	add	r3, r2
 800126a:	4622      	mov	r2, r4
 800126c:	4641      	mov	r1, r8
 800126e:	fba2 1201 	umull	r1, r2, r2, r1
 8001272:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001276:	460a      	mov	r2, r1
 8001278:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800127c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001280:	4413      	add	r3, r2
 8001282:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001292:	4623      	mov	r3, r4
 8001294:	0a18      	lsrs	r0, r3, #8
 8001296:	462b      	mov	r3, r5
 8001298:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800129c:	462b      	mov	r3, r5
 800129e:	1219      	asrs	r1, r3, #8
           + ((var1 * (int64_t) dev->dig_P2) << 12);
 80012a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	17da      	asrs	r2, r3, #31
 80012ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012b8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80012bc:	464a      	mov	r2, r9
 80012be:	fb02 f203 	mul.w	r2, r2, r3
 80012c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012c6:	4644      	mov	r4, r8
 80012c8:	fb04 f303 	mul.w	r3, r4, r3
 80012cc:	441a      	add	r2, r3
 80012ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012d2:	4644      	mov	r4, r8
 80012d4:	fba3 4304 	umull	r4, r3, r3, r4
 80012d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012dc:	4623      	mov	r3, r4
 80012de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80012f8:	464c      	mov	r4, r9
 80012fa:	0323      	lsls	r3, r4, #12
 80012fc:	4644      	mov	r4, r8
 80012fe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001302:	4644      	mov	r4, r8
 8001304:	0322      	lsls	r2, r4, #12
    var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001306:	1884      	adds	r4, r0, r2
 8001308:	633c      	str	r4, [r7, #48]	; 0x30
 800130a:	eb41 0303 	adc.w	r3, r1, r3
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
 8001310:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001314:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001318:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800131c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001320:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001324:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800132c:	88db      	ldrh	r3, [r3, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001336:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800133a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800133e:	462b      	mov	r3, r5
 8001340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001344:	4642      	mov	r2, r8
 8001346:	fb02 f203 	mul.w	r2, r2, r3
 800134a:	464b      	mov	r3, r9
 800134c:	4621      	mov	r1, r4
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	4622      	mov	r2, r4
 8001356:	4641      	mov	r1, r8
 8001358:	fba2 1201 	umull	r1, r2, r2, r1
 800135c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001360:	460a      	mov	r2, r1
 8001362:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800136a:	4413      	add	r3, r2
 800136c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800137c:	4629      	mov	r1, r5
 800137e:	104a      	asrs	r2, r1, #1
 8001380:	4629      	mov	r1, r5
 8001382:	17cb      	asrs	r3, r1, #31
 8001384:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

    if (var1 == 0)
 8001388:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800138c:	4313      	orrs	r3, r2
 800138e:	d101      	bne.n	8001394 <Compensate_Pressure+0x2de>
    {
        return 0;  // avoid exception caused by division by zero
 8001390:	2300      	movs	r3, #0
 8001392:	e148      	b.n	8001626 <Compensate_Pressure+0x570>
    }

    p = 1048576 - adc_press;
 8001394:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001398:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800139c:	17da      	asrs	r2, r3, #31
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013a2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80013a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    p = (((p << 31) - var2) * 3125) / var1;
 80013aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013b8:	07db      	lsls	r3, r3, #31
 80013ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013c2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80013c6:	4621      	mov	r1, r4
 80013c8:	1a89      	subs	r1, r1, r2
 80013ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80013cc:	4629      	mov	r1, r5
 80013ce:	eb61 0303 	sbc.w	r3, r1, r3
 80013d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013d4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80013d8:	4622      	mov	r2, r4
 80013da:	462b      	mov	r3, r5
 80013dc:	1891      	adds	r1, r2, r2
 80013de:	6239      	str	r1, [r7, #32]
 80013e0:	415b      	adcs	r3, r3
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e8:	4621      	mov	r1, r4
 80013ea:	1851      	adds	r1, r2, r1
 80013ec:	61b9      	str	r1, [r7, #24]
 80013ee:	4629      	mov	r1, r5
 80013f0:	414b      	adcs	r3, r1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001400:	4649      	mov	r1, r9
 8001402:	018b      	lsls	r3, r1, #6
 8001404:	4641      	mov	r1, r8
 8001406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800140a:	4641      	mov	r1, r8
 800140c:	018a      	lsls	r2, r1, #6
 800140e:	4641      	mov	r1, r8
 8001410:	1889      	adds	r1, r1, r2
 8001412:	6139      	str	r1, [r7, #16]
 8001414:	4649      	mov	r1, r9
 8001416:	eb43 0101 	adc.w	r1, r3, r1
 800141a:	6179      	str	r1, [r7, #20]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001428:	4649      	mov	r1, r9
 800142a:	008b      	lsls	r3, r1, #2
 800142c:	4641      	mov	r1, r8
 800142e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001432:	4641      	mov	r1, r8
 8001434:	008a      	lsls	r2, r1, #2
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	4603      	mov	r3, r0
 800143c:	4622      	mov	r2, r4
 800143e:	189b      	adds	r3, r3, r2
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	460b      	mov	r3, r1
 8001444:	462a      	mov	r2, r5
 8001446:	eb42 0303 	adc.w	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001458:	4649      	mov	r1, r9
 800145a:	008b      	lsls	r3, r1, #2
 800145c:	4641      	mov	r1, r8
 800145e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001462:	4641      	mov	r1, r8
 8001464:	008a      	lsls	r2, r1, #2
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	4603      	mov	r3, r0
 800146c:	4622      	mov	r2, r4
 800146e:	189b      	adds	r3, r3, r2
 8001470:	673b      	str	r3, [r7, #112]	; 0x70
 8001472:	462b      	mov	r3, r5
 8001474:	460a      	mov	r2, r1
 8001476:	eb42 0303 	adc.w	r3, r2, r3
 800147a:	677b      	str	r3, [r7, #116]	; 0x74
 800147c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001480:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001484:	f7ff fbe8 	bl	8000c58 <__aeabi_ldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001494:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001498:	b21b      	sxth	r3, r3
 800149a:	17da      	asrs	r2, r3, #31
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
 800149e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014a4:	f04f 0000 	mov.w	r0, #0
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	0b50      	lsrs	r0, r2, #13
 80014ae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80014b2:	1359      	asrs	r1, r3, #13
 80014b4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80014b8:	462b      	mov	r3, r5
 80014ba:	fb00 f203 	mul.w	r2, r0, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	fb03 f301 	mul.w	r3, r3, r1
 80014c4:	4413      	add	r3, r2
 80014c6:	4622      	mov	r2, r4
 80014c8:	fba2 1200 	umull	r1, r2, r2, r0
 80014cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80014d0:	460a      	mov	r2, r1
 80014d2:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80014d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80014da:	4413      	add	r3, r2
 80014dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80014e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	0b50      	lsrs	r0, r2, #13
 80014ee:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80014f2:	1359      	asrs	r1, r3, #13
 80014f4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80014f8:	462b      	mov	r3, r5
 80014fa:	fb00 f203 	mul.w	r2, r0, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	fb03 f301 	mul.w	r3, r3, r1
 8001504:	4413      	add	r3, r2
 8001506:	4622      	mov	r2, r4
 8001508:	fba2 1200 	umull	r1, r2, r2, r0
 800150c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001510:	460a      	mov	r2, r1
 8001512:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001516:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800151a:	4413      	add	r3, r2
 800151c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800152c:	4621      	mov	r1, r4
 800152e:	0e4a      	lsrs	r2, r1, #25
 8001530:	4629      	mov	r1, r5
 8001532:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001536:	4629      	mov	r1, r5
 8001538:	164b      	asrs	r3, r1, #25
 800153a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800153e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001542:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001546:	b21b      	sxth	r3, r3
 8001548:	17da      	asrs	r2, r3, #31
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
 800154c:	667a      	str	r2, [r7, #100]	; 0x64
 800154e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001552:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001556:	462a      	mov	r2, r5
 8001558:	fb02 f203 	mul.w	r2, r2, r3
 800155c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001560:	4621      	mov	r1, r4
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800156c:	4621      	mov	r1, r4
 800156e:	fba2 1201 	umull	r1, r2, r2, r1
 8001572:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001576:	460a      	mov	r2, r1
 8001578:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800157c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001580:	4413      	add	r3, r2
 8001582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001592:	4621      	mov	r1, r4
 8001594:	0cca      	lsrs	r2, r1, #19
 8001596:	4629      	mov	r1, r5
 8001598:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800159c:	4629      	mov	r1, r5
 800159e:	14cb      	asrs	r3, r1, #19
 80015a0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

    p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80015a4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80015a8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80015ac:	1884      	adds	r4, r0, r2
 80015ae:	65bc      	str	r4, [r7, #88]	; 0x58
 80015b0:	eb41 0303 	adc.w	r3, r1, r3
 80015b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015ba:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015be:	4621      	mov	r1, r4
 80015c0:	1889      	adds	r1, r1, r2
 80015c2:	6539      	str	r1, [r7, #80]	; 0x50
 80015c4:	4629      	mov	r1, r5
 80015c6:	eb43 0101 	adc.w	r1, r3, r1
 80015ca:	6579      	str	r1, [r7, #84]	; 0x54
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80015d8:	4623      	mov	r3, r4
 80015da:	0a18      	lsrs	r0, r3, #8
 80015dc:	462b      	mov	r3, r5
 80015de:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015e2:	462b      	mov	r3, r5
 80015e4:	1219      	asrs	r1, r3, #8
 80015e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	17da      	asrs	r2, r3, #31
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001602:	464c      	mov	r4, r9
 8001604:	0123      	lsls	r3, r4, #4
 8001606:	4644      	mov	r4, r8
 8001608:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800160c:	4644      	mov	r4, r8
 800160e:	0122      	lsls	r2, r4, #4
 8001610:	1884      	adds	r4, r0, r2
 8001612:	603c      	str	r4, [r7, #0]
 8001614:	eb41 0303 	adc.w	r3, r1, r3
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800161e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    return p;
 8001622:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001626:	4618      	mov	r0, r3
 8001628:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001632 <BMP280_Read_Fixed>:
 * @param humidity Pointer to store the compensated humidity in %RH (only for BME280).
 * @return True if the reading is successful, false otherwise.
 */
bool BMP280_Read_Fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
                       uint32_t *humidity)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b08a      	sub	sp, #40	; 0x28
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	603b      	str	r3, [r7, #0]
    int32_t adc_pressure;
    int32_t adc_temp;
    uint8_t data[8];

    // Only the BME280 supports reading the humidity.
    if (dev->id != BME280_CHIP_ID)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001646:	2b60      	cmp	r3, #96	; 0x60
 8001648:	d007      	beq.n	800165a <BMP280_Read_Fixed+0x28>
    {
        if (humidity)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <BMP280_Read_Fixed+0x24>
            *humidity = 0;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
        humidity = NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
    }

    // Need to read in one sequence to ensure they match.
    size_t size = humidity ? 8 : 6;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <BMP280_Read_Fixed+0x32>
 8001660:	2308      	movs	r3, #8
 8001662:	e000      	b.n	8001666 <BMP280_Read_Fixed+0x34>
 8001664:	2306      	movs	r3, #6
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    if (Read_Data(dev, 0xf7, data, size))
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f107 0214 	add.w	r2, r7, #20
 8001670:	21f7      	movs	r1, #247	; 0xf7
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fcbe 	bl	8000ff4 <Read_Data>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <BMP280_Read_Fixed+0x50>
    {
        return false;
 800167e:	2300      	movs	r3, #0
 8001680:	e027      	b.n	80016d2 <BMP280_Read_Fixed+0xa0>
    }

    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001682:	7d3b      	ldrb	r3, [r7, #20]
 8001684:	031a      	lsls	r2, r3, #12
 8001686:	7d7b      	ldrb	r3, [r7, #21]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4313      	orrs	r3, r2
 800168c:	7dba      	ldrb	r2, [r7, #22]
 800168e:	0912      	lsrs	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	4313      	orrs	r3, r2
 8001694:	623b      	str	r3, [r7, #32]
    adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	031a      	lsls	r2, r3, #12
 800169a:	7e3b      	ldrb	r3, [r7, #24]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4313      	orrs	r3, r2
 80016a0:	7e7a      	ldrb	r2, [r7, #25]
 80016a2:	0912      	lsrs	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61fb      	str	r3, [r7, #28]

    int32_t fine_temp;
    *temperature = Compensate_Temperature(dev, adc_temp, &fine_temp);
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	461a      	mov	r2, r3
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff fcc6 	bl	8001044 <Compensate_Temperature>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	601a      	str	r2, [r3, #0]
    *pressure = Compensate_Pressure(dev, adc_pressure, fine_temp);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	461a      	mov	r2, r3
 80016c2:	6a39      	ldr	r1, [r7, #32]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fcf6 	bl	80010b6 <Compensate_Pressure>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
    return true;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	0000      	movs	r0, r0
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <BMP280_Read_Altitude>:
 * rate, and provides a reasonable estimation of altitude in typical weather conditions.
 * @param pressure The atmospheric pressure in pascals.
 * @return The altitude in meters above sea level.
*/
float BMP280_Read_Altitude(float pressure)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
    float altitude, seaLevelhPa = 1013.25;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <BMP280_Read_Altitude+0x98>)
 80016ec:	60fb      	str	r3, [r7, #12]
    pressure /= 100;
 80016ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800177c <BMP280_Read_Altitude+0x9c>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	edc7 7a01 	vstr	s15, [r7, #4]
    altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 0.1903));
 80016fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001702:	edd7 7a03 	vldr	s15, [r7, #12]
 8001706:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800170a:	ee16 0a90 	vmov	r0, s13
 800170e:	f7fe ff23 	bl	8000558 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001768 <BMP280_Read_Altitude+0x88>
 800171a:	ec43 2b10 	vmov	d0, r2, r3
 800171e:	f008 fb79 	bl	8009e14 <pow>
 8001722:	ec53 2b10 	vmov	r2, r3, d0
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	4915      	ldr	r1, [pc, #84]	; (8001780 <BMP280_Read_Altitude+0xa0>)
 800172c:	f7fe fdb4 	bl	8000298 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a30d      	add	r3, pc, #52	; (adr r3, 8001770 <BMP280_Read_Altitude+0x90>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff63 	bl	8000608 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa35 	bl	8000bb8 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	60bb      	str	r3, [r7, #8]
    return altitude;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	1a36e2eb 	.word	0x1a36e2eb
 800176c:	3fc85bc0 	.word	0x3fc85bc0
 8001770:	00000000 	.word	0x00000000
 8001774:	40e5a540 	.word	0x40e5a540
 8001778:	447d5000 	.word	0x447d5000
 800177c:	42c80000 	.word	0x42c80000
 8001780:	3ff00000 	.word	0x3ff00000

08001784 <BMP280_Read_Float>:
 * @param humidity Pointer to store the humidity in %RH.
 * @param The altitude in meters above sea level.
 * @return True if reading is successful, false otherwise.
 */
bool BMP280_Read_Float(BMP280_HandleTypedef *dev, float *temperature, float *pressure, float *altitude)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
    int32_t fixed_temperature;
    uint32_t fixed_pressure;

    if (BMP280_Read_Fixed(dev, &fixed_temperature, &fixed_pressure,
 8001792:	f107 0210 	add.w	r2, r7, #16
 8001796:	f107 0114 	add.w	r1, r7, #20
 800179a:	2300      	movs	r3, #0
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff ff48 	bl	8001632 <BMP280_Read_Fixed>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d025      	beq.n	80017f4 <BMP280_Read_Float+0x70>
                          NULL))
    {
        *temperature = (float) fixed_temperature / 100;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001800 <BMP280_Read_Float+0x7c>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	edc3 7a00 	vstr	s15, [r3]
        *pressure = (float) fixed_pressure / 256;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ca:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001804 <BMP280_Read_Float+0x80>
 80017ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	edc3 7a00 	vstr	s15, [r3]
        *altitude = BMP280_Read_Altitude(*pressure);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	f7ff ff7d 	bl	80016e0 <BMP280_Read_Altitude>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	edc3 7a00 	vstr	s15, [r3]
        return true;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <BMP280_Read_Float+0x72>
    }

    return false;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	42c80000 	.word	0x42c80000
 8001804:	43800000 	.word	0x43800000

08001808 <DHT11_Init>:
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void DHT11_Init(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef *port, uint16_t pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	807b      	strh	r3, [r7, #2]
    dht->htim = htim;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	609a      	str	r2, [r3, #8]
    dht->port = port;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
    dht->pin = pin;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	809a      	strh	r2, [r3, #4]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DHT11_Set_GPIO_Mode>:
 * @brief Set the direction of the DHT11 sensor pin with the specified mode.
 * @param dht Pointer to the DHT11 structure.
 * @param pMode GPIO mode to be set (e.g., GPIO_MODE_INPUT or GPIO_MODE_OUTPUT_PP).
 */
void DHT11_Set_GPIO_Mode(dht11_t *dht, uint32_t pMode)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = dht->pin;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = pMode;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fafe 	bl	8002e6c <HAL_GPIO_Init>
}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DHT11_Read_Bit>:
 * @param dht Pointer to the DHT11 structure.
 * @param timeout Maximum timeout value for reading the bit.
 * @return The read bit (0 or 1) or TIMEOUT_ERROR if the bit reading times out.
 */
uint8_t DHT11_Read_Bit(dht11_t *dht, uint32_t timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    uint16_t mTimeUs;
    uint8_t mBit;

    __HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 800188c:	e00a      	b.n	80018a4 <DHT11_Read_Bit+0x2c>
    {
        if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > timeout)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4293      	cmp	r3, r2
 800189e:	d201      	bcs.n	80018a4 <DHT11_Read_Bit+0x2c>
        {
            return 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e03d      	b.n	8001920 <DHT11_Read_Bit+0xa8>
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	889b      	ldrh	r3, [r3, #4]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f001 fc60 	bl	8003174 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0e9      	beq.n	800188e <DHT11_Read_Bit+0x16>
        }
    }
    __HAL_TIM_SET_COUNTER(dht->htim, 0);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80018c4:	e00a      	b.n	80018dc <DHT11_Read_Bit+0x64>
    {
        if ((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > timeout)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d201      	bcs.n	80018dc <DHT11_Read_Bit+0x64>
        {
            return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e021      	b.n	8001920 <DHT11_Read_Bit+0xa8>
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f001 fc44 	bl	8003174 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d0e9      	beq.n	80018c6 <DHT11_Read_Bit+0x4e>
        }
    }

    mTimeUs  = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	81bb      	strh	r3, [r7, #12]

    if (mTimeUs > 20 && mTimeUs < 30)
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	2b14      	cmp	r3, #20
 8001900:	d905      	bls.n	800190e <DHT11_Read_Bit+0x96>
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	2b1d      	cmp	r3, #29
 8001906:	d802      	bhi.n	800190e <DHT11_Read_Bit+0x96>
    {
        mBit = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e007      	b.n	800191e <DHT11_Read_Bit+0xa6>
    }
    else if (mTimeUs > 60 && mTimeUs < 80) //if pass time 70 uS set as HIGH
 800190e:	89bb      	ldrh	r3, [r7, #12]
 8001910:	2b3c      	cmp	r3, #60	; 0x3c
 8001912:	d904      	bls.n	800191e <DHT11_Read_Bit+0xa6>
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	2b4f      	cmp	r3, #79	; 0x4f
 8001918:	d801      	bhi.n	800191e <DHT11_Read_Bit+0xa6>
    {
        mBit = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
    }
    return mBit;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <DHT11_Read_Byte>:
 * @brief Read a byte of data from the DHT11 sensor.
 * @param bitArray Array holding the individual bits to be assembled into a byte.
 * @return The assembled byte of data.
 */
uint8_t DHT11_Read_Byte(uint8_t bitArray[])
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    uint8_t byte = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	e023      	b.n	8001982 <DHT11_Read_Byte+0x5a>
    {
        if (bitArray[i])
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <DHT11_Read_Byte+0x38>
            byte |= (1 << (7 - i));
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f1c3 0307 	rsb	r3, r3, #7
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	b25a      	sxtb	r2, r3
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e00d      	b.n	800197c <DHT11_Read_Byte+0x54>
        else
            byte &= ~(1 << (7 - i));
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2201      	movs	r2, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	b25b      	sxtb	r3, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	b25a      	sxtb	r2, r3
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4013      	ands	r3, r2
 8001978:	b25b      	sxtb	r3, r3
 800197a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3301      	adds	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b07      	cmp	r3, #7
 8001986:	ddd8      	ble.n	800193a <DHT11_Read_Byte+0x12>
    }
    return byte;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <DHT11_Read_Signal>:
 * @param timeout Maximum timeout value for reading the signal.
 * @param state Desired GPIO_PinState to read (GPIO_PIN_SET for high, GPIO_PIN_RESET for low).
 * @return The duration of the signal in microseconds or TIMEOUT_ERROR if the signal reading times out.
 */
uint16_t DHT11_Read_Signal(dht11_t *dht, uint32_t timeout, GPIO_PinState state)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	4613      	mov	r3, r2
 80019a2:	71fb      	strb	r3, [r7, #7]
    uint16_t signalTimeUs = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	82fb      	strh	r3, [r7, #22]
    uint32_t delayCnt = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == state)
 80019ac:	e00f      	b.n	80019ce <DHT11_Read_Signal+0x38>
    {
        if (delayCnt > timeout)
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d902      	bls.n	80019bc <DHT11_Read_Signal+0x26>
        {
            return timeout;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	e016      	b.n	80019ea <DHT11_Read_Signal+0x54>
        }
        Delay_Us(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f000 f8f5 	bl	8001bac <Delay_Us>
        delayCnt++;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	3301      	adds	r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
        signalTimeUs++;
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	3301      	adds	r3, #1
 80019cc:	82fb      	strh	r3, [r7, #22]
    while (HAL_GPIO_ReadPin(dht->port, dht->pin) == state)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f001 fbcb 	bl	8003174 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d0e2      	beq.n	80019ae <DHT11_Read_Signal+0x18>
    }

    return signalTimeUs;
 80019e8:	8afb      	ldrh	r3, [r7, #22]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <DHT11_Start>:
 * @brief Start communication with the DHT11 sensor by initiating the data transmission.
 * @param dht Pointer to the DHT11 structure.
 * @param readTimeoutUs Maximum timeout value for reading sensor responses in microseconds.
 */
uint8_t DHT11_Start(dht11_t *dht, uint16_t readTimeoutUs)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	807b      	strh	r3, [r7, #2]
    uint16_t mTimeUs1 = 0, mTimeUs2 = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	2300      	movs	r3, #0
 8001a04:	81bb      	strh	r3, [r7, #12]

    DHT11_Set_GPIO_Mode(dht, GPIO_MODE_OUTPUT_PP);
 8001a06:	2101      	movs	r1, #1
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff13 	bl	8001834 <DHT11_Set_GPIO_Mode>
    HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	889b      	ldrh	r3, [r3, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f001 fbc3 	bl	80031a4 <HAL_GPIO_WritePin>
    HAL_Delay(18);
 8001a1e:	2012      	movs	r0, #18
 8001a20:	f001 f91e 	bl	8002c60 <HAL_Delay>
    DHT11_Set_GPIO_Mode(dht, GPIO_MODE_INPUT);
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff04 	bl	8001834 <DHT11_Set_GPIO_Mode>

    DHT11_Read_Signal(dht, readTimeoutUs, GPIO_PIN_SET);
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffaf 	bl	8001996 <DHT11_Read_Signal>
    mTimeUs1 = DHT11_Read_Signal(dht, readTimeoutUs, GPIO_PIN_RESET);
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa9 	bl	8001996 <DHT11_Read_Signal>
 8001a44:	4603      	mov	r3, r0
 8001a46:	81fb      	strh	r3, [r7, #14]
    mTimeUs2 = DHT11_Read_Signal(dht, readTimeoutUs, GPIO_PIN_SET);
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa1 	bl	8001996 <DHT11_Read_Signal>
 8001a54:	4603      	mov	r3, r0
 8001a56:	81bb      	strh	r3, [r7, #12]
    if (mTimeUs1 >= 75 && mTimeUs1 <= 85 && mTimeUs2 >= 75 && mTimeUs2 <= 85)
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	2b4a      	cmp	r3, #74	; 0x4a
 8001a5c:	d90a      	bls.n	8001a74 <DHT11_Start+0x82>
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	2b55      	cmp	r3, #85	; 0x55
 8001a62:	d807      	bhi.n	8001a74 <DHT11_Start+0x82>
 8001a64:	89bb      	ldrh	r3, [r7, #12]
 8001a66:	2b4a      	cmp	r3, #74	; 0x4a
 8001a68:	d904      	bls.n	8001a74 <DHT11_Start+0x82>
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b55      	cmp	r3, #85	; 0x55
 8001a6e:	d801      	bhi.n	8001a74 <DHT11_Start+0x82>
    {
        return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <DHT11_Start+0x84>
    }
    return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <DHT11_Read>:
 * @brief Read data from the DHT11 sensor, including temperature and humidity values.
 * @param dht Pointer to the DHT11 structure.
 * @return DHT11_OK if data reading is successful, or DHT11_ERROR if an error occurs.
 */
uint8_t DHT11_Read(dht11_t *dht)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b091      	sub	sp, #68	; 0x44
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
    uint8_t humidity = 0, temperature = 0, parity = 0, genParity = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    uint8_t mBitsData[40];
    uint16_t readTimeOutUs = 500;
 8001a9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aa2:	86fb      	strh	r3, [r7, #54]	; 0x36

    DHT11_Start(dht, readTimeOutUs);
 8001aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffa2 	bl	80019f2 <DHT11_Start>

    for (int j = 0; j < 40; j++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab2:	e00f      	b.n	8001ad4 <DHT11_Read+0x56>
    {
        mBitsData[j] = DHT11_Read_Bit(dht, readTimeOutUs);
 8001ab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fedd 	bl	8001878 <DHT11_Read_Bit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac8:	4413      	add	r3, r2
 8001aca:	460a      	mov	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 40; j++)
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad6:	2b27      	cmp	r3, #39	; 0x27
 8001ad8:	ddec      	ble.n	8001ab4 <DHT11_Read+0x36>
    }

    humidity = DHT11_Read_Byte(&mBitsData[0]);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff22 	bl	8001928 <DHT11_Read_Byte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    temperature = DHT11_Read_Byte(&mBitsData[16]);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	3310      	adds	r3, #16
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff19 	bl	8001928 <DHT11_Read_Byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    parity = DHT11_Read_Byte(&mBitsData[32]);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	3320      	adds	r3, #32
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff10 	bl	8001928 <DHT11_Read_Byte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    genParity = humidity + temperature + DHT11_Read_Byte(&mBitsData[8]) + DHT11_Read_Byte(&mBitsData[24]);
 8001b0e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b12:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001b16:	4413      	add	r3, r2
 8001b18:	b2dc      	uxtb	r4, r3
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	3308      	adds	r3, #8
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff01 	bl	8001928 <DHT11_Read_Byte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4423      	add	r3, r4
 8001b2a:	b2dc      	uxtb	r4, r3
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	3318      	adds	r3, #24
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fef8 	bl	8001928 <DHT11_Read_Byte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4423      	add	r3, r4
 8001b3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    dht->temperature = -1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	731a      	strb	r2, [r3, #12]
    dht->humidity = -1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	735a      	strb	r2, [r3, #13]
    if (genParity == parity)
 8001b4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001b50:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d109      	bne.n	8001b6c <DHT11_Read+0xee>
    {
        dht->temperature = temperature;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001b5e:	731a      	strb	r2, [r3, #12]
        dht->humidity = humidity;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b66:	735a      	strb	r2, [r3, #13]
        return 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <DHT11_Read+0xf0>
    }

    return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3744      	adds	r7, #68	; 0x44
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
	...

08001b78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <vApplicationGetIdleTaskMemory+0x30>)
 8001b8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000020c 	.word	0x2000020c
 8001ba8:	200002ac 	.word	0x200002ac

08001bac <Delay_Us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay_Us(uint32_t us)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = __HAL_TIM_GET_COUNTER(&htim2);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <Delay_Us+0x30>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	60fb      	str	r3, [r7, #12]
    while ((__HAL_TIM_GET_COUNTER(&htim2) - startTick) < us);
 8001bbc:	bf00      	nop
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <Delay_Us+0x30>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d8f7      	bhi.n	8001bbe <Delay_Us+0x12>
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000554 	.word	0x20000554

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be6:	f000 fff9 	bl	8002bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bea:	f000 f839 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bee:	f000 f973 	bl	8001ed8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bf2:	f000 f89f 	bl	8001d34 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001bf6:	f000 f8cb 	bl	8001d90 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001bfa:	f000 f8f7 	bl	8001dec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001bfe:	f000 f941 	bl	8001e84 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of pressure_data_c */
  osThreadDef(pressure_data_c, pressure_data_c_init, osPriorityBelowNormal, 0, 128);
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <main+0x70>)
 8001c04:	f107 041c 	add.w	r4, r7, #28
 8001c08:	461d      	mov	r5, r3
 8001c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressure_data_cHandle = osThreadCreate(osThread(pressure_data_c), NULL);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 ffc4 	bl	8005baa <osThreadCreate>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <main+0x74>)
 8001c26:	6013      	str	r3, [r2, #0]

  /* definition and creation of temp_data_colle */
  osThreadDef(temp_data_colle, temp_data_collect_init, osPriorityNormal, 0, 128);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <main+0x78>)
 8001c2a:	463c      	mov	r4, r7
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  temp_data_colleHandle = osThreadCreate(osThread(temp_data_colle), NULL);
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 ffb3 	bl	8005baa <osThreadCreate>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <main+0x7c>)
 8001c48:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c4a:	f003 ffa7 	bl	8005b9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <main+0x6e>
 8001c50:	0800acb0 	.word	0x0800acb0
 8001c54:	200005e0 	.word	0x200005e0
 8001c58:	0800acdc 	.word	0x0800acdc
 8001c5c:	200005e4 	.word	0x200005e4

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	; 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	; 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f005 ff7f 	bl	8007b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <SystemClock_Config+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <SystemClock_Config+0xd0>)
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <SystemClock_Config+0xd0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cd8:	2354      	movs	r3, #84	; 0x54
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fb53 	bl	8004394 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cf4:	f000 f9f8 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2102      	movs	r1, #2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fdb5 	bl	8004884 <HAL_RCC_ClockConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d20:	f000 f9e2 	bl	80020e8 <Error_Handler>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d3a:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <MX_I2C1_Init+0x54>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x58>)
 8001d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d72:	f001 fa31 	bl	80031d8 <HAL_I2C_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d7c:	f000 f9b4 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200004ac 	.word	0x200004ac
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	000186a0 	.word	0x000186a0

08001d90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <MX_I2C2_Init+0x54>)
 8001d98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <MX_I2C2_Init+0x58>)
 8001d9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001db2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_I2C2_Init+0x50>)
 8001dce:	f001 fa03 	bl	80031d8 <HAL_I2C_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dd8:	f000 f986 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000500 	.word	0x20000500
 8001de4:	40005800 	.word	0x40005800
 8001de8:	00061a80 	.word	0x00061a80

08001dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	463b      	mov	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e12:	2253      	movs	r2, #83	; 0x53
 8001e14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e1e:	f06f 0201 	mvn.w	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e30:	4813      	ldr	r0, [pc, #76]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e32:	f002 ff39 	bl	8004ca8 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e3c:	f000 f954 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e4e:	f003 f93f 	bl	80050d0 <HAL_TIM_ConfigClockSource>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e58:	f000 f946 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM2_Init+0x94>)
 8001e6a:	f003 fb3b 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e74:	f000 f938 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000554 	.word	0x20000554

08001e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART2_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001ebc:	f003 fb94 	bl	80055e8 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f000 f90f 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000059c 	.word	0x2000059c
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_DHT11_GPIO_Port, A0_DHT11_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2101      	movs	r1, #1
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <MX_GPIO_Init+0x80>)
 8001f2c:	f001 f93a 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A0_DHT11_Pin */
  GPIO_InitStruct.Pin = A0_DHT11_Pin;
 8001f30:	2301      	movs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A0_DHT11_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_GPIO_Init+0x80>)
 8001f48:	f000 ff90 	bl	8002e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020000 	.word	0x40020000

08001f5c <pressure_data_c_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_pressure_data_c_init */
void pressure_data_c_init(void const * argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0a4      	sub	sp, #144	; 0x90
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	bmp280.addr = BMP280_I2C_ADDRESS_0;
//	bmp280.i2c = &hi2c1;
	SSD1306_Init();
 8001f64:	f000 f8c6 	bl	80020f4 <SSD1306_Init>
	char display_buffer[128];
  /* Infinite loop */
  for(;;)
  {
	  HAL_StatusTypeDef bmp280Status;
	  bmp280Status = !BMP280_Read_Float(&bmp280, &Telemetry.temperature, &Telemetry.pressure, &Telemetry.altitude);
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <pressure_data_c_init+0xbc>)
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <pressure_data_c_init+0xc0>)
 8001f6c:	492c      	ldr	r1, [pc, #176]	; (8002020 <pressure_data_c_init+0xc4>)
 8001f6e:	482d      	ldr	r0, [pc, #180]	; (8002024 <pressure_data_c_init+0xc8>)
 8001f70:	f7ff fc08 	bl	8001784 <BMP280_Read_Float>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
//	  if ( bmp280Status == HAL_OK)
//		{
			sprintf(display_buffer, "Temp: %.2f C",24.00);
 8001f80:	f107 000c 	add.w	r0, r7, #12
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <pressure_data_c_init+0xcc>)
 8001f8a:	4928      	ldr	r1, [pc, #160]	; (800202c <pressure_data_c_init+0xd0>)
 8001f8c:	f005 fd8e 	bl	8007aac <siprintf>
			SSD1306_GotoXY(0, 0);
 8001f90:	2100      	movs	r1, #0
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 fa18 	bl	80023c8 <SSD1306_GotoXY>
			SSD1306_Puts(display_buffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4924      	ldr	r1, [pc, #144]	; (8002030 <pressure_data_c_init+0xd4>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 faa7 	bl	80024f4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001fa6:	f000 f969 	bl	800227c <SSD1306_UpdateScreen>

			sprintf(display_buffer, "Pressure: %.2f hPa", Telemetry.pressure);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <pressure_data_c_init+0xc4>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fad2 	bl	8000558 <__aeabi_f2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	f107 000c 	add.w	r0, r7, #12
 8001fbc:	491d      	ldr	r1, [pc, #116]	; (8002034 <pressure_data_c_init+0xd8>)
 8001fbe:	f005 fd75 	bl	8007aac <siprintf>
			SSD1306_GotoXY(0, 24);
 8001fc2:	2118      	movs	r1, #24
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f9ff 	bl	80023c8 <SSD1306_GotoXY>
			SSD1306_Puts(display_buffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4917      	ldr	r1, [pc, #92]	; (8002030 <pressure_data_c_init+0xd4>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fa8e 	bl	80024f4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001fd8:	f000 f950 	bl	800227c <SSD1306_UpdateScreen>

			sprintf(display_buffer, "Altitude: %.2f m", Telemetry.altitude);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <pressure_data_c_init+0xc4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	f107 000c 	add.w	r0, r7, #12
 8001fee:	4912      	ldr	r1, [pc, #72]	; (8002038 <pressure_data_c_init+0xdc>)
 8001ff0:	f005 fd5c 	bl	8007aac <siprintf>
			SSD1306_GotoXY(0, 36);
 8001ff4:	2124      	movs	r1, #36	; 0x24
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f9e6 	bl	80023c8 <SSD1306_GotoXY>
			SSD1306_Puts(display_buffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2201      	movs	r2, #1
 8002002:	490b      	ldr	r1, [pc, #44]	; (8002030 <pressure_data_c_init+0xd4>)
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa75 	bl	80024f4 <SSD1306_Puts>

			SSD1306_UpdateScreen();
 800200a:	f000 f937 	bl	800227c <SSD1306_UpdateScreen>
//		}
	  osDelay(500);
 800200e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002012:	f003 fe16 	bl	8005c42 <osDelay>
  {
 8002016:	e7a7      	b.n	8001f68 <pressure_data_c_init+0xc>
 8002018:	200005ec 	.word	0x200005ec
 800201c:	200005f0 	.word	0x200005f0
 8002020:	200005e8 	.word	0x200005e8
 8002024:	200005f8 	.word	0x200005f8
 8002028:	40380000 	.word	0x40380000
 800202c:	0800acf8 	.word	0x0800acf8
 8002030:	20000000 	.word	0x20000000
 8002034:	0800ad08 	.word	0x0800ad08
 8002038:	0800ad1c 	.word	0x0800ad1c

0800203c <temp_data_collect_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_data_collect_init */
void temp_data_collect_init(void const * argument)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0a4      	sub	sp, #144	; 0x90
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_data_collect_init */
	//only to collect humidity data
	HAL_TIM_Base_Start(&htim2);
 8002044:	4819      	ldr	r0, [pc, #100]	; (80020ac <temp_data_collect_init+0x70>)
 8002046:	f002 fe7f 	bl	8004d48 <HAL_TIM_Base_Start>
	DHT11_Init(&dht, &htim2, GPIOA, GPIO_PIN_0);
 800204a:	2301      	movs	r3, #1
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <temp_data_collect_init+0x74>)
 800204e:	4917      	ldr	r1, [pc, #92]	; (80020ac <temp_data_collect_init+0x70>)
 8002050:	4818      	ldr	r0, [pc, #96]	; (80020b4 <temp_data_collect_init+0x78>)
 8002052:	f7ff fbd9 	bl	8001808 <DHT11_Init>
	char display_buffer_h[128];
	 SSD1306_Init();
 8002056:	f000 f84d 	bl	80020f4 <SSD1306_Init>
  /* Infinite loop */
  for(;;)
  {
	HAL_StatusTypeDef  dht11Status;
	dht11Status = DHT11_Read(&dht);
 800205a:	4816      	ldr	r0, [pc, #88]	; (80020b4 <temp_data_collect_init+0x78>)
 800205c:	f7ff fd0f 	bl	8001a7e <DHT11_Read>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Telemetry.humidity = dht.humidity;
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <temp_data_collect_init+0x78>)
 8002068:	7b5a      	ldrb	r2, [r3, #13]
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <temp_data_collect_init+0x7c>)
 800206c:	731a      	strb	r2, [r3, #12]
	if ( dht11Status == HAL_OK)
 800206e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <temp_data_collect_init+0x66>
	  {


		sprintf(display_buffer_h, "Humidity: %d %%", Telemetry.humidity);
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <temp_data_collect_init+0x7c>)
 8002078:	7b1b      	ldrb	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <temp_data_collect_init+0x80>)
 8002082:	4618      	mov	r0, r3
 8002084:	f005 fd12 	bl	8007aac <siprintf>
		SSD1306_GotoXY(0, 24);
 8002088:	2118      	movs	r1, #24
 800208a:	2000      	movs	r0, #0
 800208c:	f000 f99c 	bl	80023c8 <SSD1306_GotoXY>
		SSD1306_Puts(display_buffer_h, &Font_7x10, SSD1306_COLOR_WHITE);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2201      	movs	r2, #1
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <temp_data_collect_init+0x84>)
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fa2b 	bl	80024f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800209e:	f000 f8ed 	bl	800227c <SSD1306_UpdateScreen>
	//  print the values in oled screen
	  }



    osDelay(700);
 80020a2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80020a6:	f003 fdcc 	bl	8005c42 <osDelay>
  {
 80020aa:	e7d6      	b.n	800205a <temp_data_collect_init+0x1e>
 80020ac:	20000554 	.word	0x20000554
 80020b0:	40020000 	.word	0x40020000
 80020b4:	2000062c 	.word	0x2000062c
 80020b8:	200005e8 	.word	0x200005e8
 80020bc:	0800ad30 	.word	0x0800ad30
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020d6:	f000 fda3 	bl	8002c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <Error_Handler+0x8>
	...

080020f4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80020fa:	f000 fa21 	bl	8002540 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80020fe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002102:	2201      	movs	r2, #1
 8002104:	2178      	movs	r1, #120	; 0x78
 8002106:	485b      	ldr	r0, [pc, #364]	; (8002274 <SSD1306_Init+0x180>)
 8002108:	f001 fcce 	bl	8003aa8 <HAL_I2C_IsDeviceReady>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002112:	2300      	movs	r3, #0
 8002114:	e0a9      	b.n	800226a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002116:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800211a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800211c:	e002      	b.n	8002124 <SSD1306_Init+0x30>
		p--;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3b01      	subs	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f9      	bne.n	800211e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800212a:	22ae      	movs	r2, #174	; 0xae
 800212c:	2100      	movs	r1, #0
 800212e:	2078      	movs	r0, #120	; 0x78
 8002130:	f000 fa82 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002134:	2220      	movs	r2, #32
 8002136:	2100      	movs	r1, #0
 8002138:	2078      	movs	r0, #120	; 0x78
 800213a:	f000 fa7d 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800213e:	2210      	movs	r2, #16
 8002140:	2100      	movs	r1, #0
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	f000 fa78 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002148:	22b0      	movs	r2, #176	; 0xb0
 800214a:	2100      	movs	r1, #0
 800214c:	2078      	movs	r0, #120	; 0x78
 800214e:	f000 fa73 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002152:	22c8      	movs	r2, #200	; 0xc8
 8002154:	2100      	movs	r1, #0
 8002156:	2078      	movs	r0, #120	; 0x78
 8002158:	f000 fa6e 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2078      	movs	r0, #120	; 0x78
 8002162:	f000 fa69 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002166:	2210      	movs	r2, #16
 8002168:	2100      	movs	r1, #0
 800216a:	2078      	movs	r0, #120	; 0x78
 800216c:	f000 fa64 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	2100      	movs	r1, #0
 8002174:	2078      	movs	r0, #120	; 0x78
 8002176:	f000 fa5f 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800217a:	2281      	movs	r2, #129	; 0x81
 800217c:	2100      	movs	r1, #0
 800217e:	2078      	movs	r0, #120	; 0x78
 8002180:	f000 fa5a 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	2100      	movs	r1, #0
 8002188:	2078      	movs	r0, #120	; 0x78
 800218a:	f000 fa55 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800218e:	22a1      	movs	r2, #161	; 0xa1
 8002190:	2100      	movs	r1, #0
 8002192:	2078      	movs	r0, #120	; 0x78
 8002194:	f000 fa50 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002198:	22a6      	movs	r2, #166	; 0xa6
 800219a:	2100      	movs	r1, #0
 800219c:	2078      	movs	r0, #120	; 0x78
 800219e:	f000 fa4b 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80021a2:	22a8      	movs	r2, #168	; 0xa8
 80021a4:	2100      	movs	r1, #0
 80021a6:	2078      	movs	r0, #120	; 0x78
 80021a8:	f000 fa46 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	2100      	movs	r1, #0
 80021b0:	2078      	movs	r0, #120	; 0x78
 80021b2:	f000 fa41 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80021b6:	22a4      	movs	r2, #164	; 0xa4
 80021b8:	2100      	movs	r1, #0
 80021ba:	2078      	movs	r0, #120	; 0x78
 80021bc:	f000 fa3c 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80021c0:	22d3      	movs	r2, #211	; 0xd3
 80021c2:	2100      	movs	r1, #0
 80021c4:	2078      	movs	r0, #120	; 0x78
 80021c6:	f000 fa37 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2078      	movs	r0, #120	; 0x78
 80021d0:	f000 fa32 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80021d4:	22d5      	movs	r2, #213	; 0xd5
 80021d6:	2100      	movs	r1, #0
 80021d8:	2078      	movs	r0, #120	; 0x78
 80021da:	f000 fa2d 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80021de:	22f0      	movs	r2, #240	; 0xf0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2078      	movs	r0, #120	; 0x78
 80021e4:	f000 fa28 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80021e8:	22d9      	movs	r2, #217	; 0xd9
 80021ea:	2100      	movs	r1, #0
 80021ec:	2078      	movs	r0, #120	; 0x78
 80021ee:	f000 fa23 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80021f2:	2222      	movs	r2, #34	; 0x22
 80021f4:	2100      	movs	r1, #0
 80021f6:	2078      	movs	r0, #120	; 0x78
 80021f8:	f000 fa1e 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80021fc:	22da      	movs	r2, #218	; 0xda
 80021fe:	2100      	movs	r1, #0
 8002200:	2078      	movs	r0, #120	; 0x78
 8002202:	f000 fa19 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002206:	2212      	movs	r2, #18
 8002208:	2100      	movs	r1, #0
 800220a:	2078      	movs	r0, #120	; 0x78
 800220c:	f000 fa14 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002210:	22db      	movs	r2, #219	; 0xdb
 8002212:	2100      	movs	r1, #0
 8002214:	2078      	movs	r0, #120	; 0x78
 8002216:	f000 fa0f 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800221a:	2220      	movs	r2, #32
 800221c:	2100      	movs	r1, #0
 800221e:	2078      	movs	r0, #120	; 0x78
 8002220:	f000 fa0a 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002224:	228d      	movs	r2, #141	; 0x8d
 8002226:	2100      	movs	r1, #0
 8002228:	2078      	movs	r0, #120	; 0x78
 800222a:	f000 fa05 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800222e:	2214      	movs	r2, #20
 8002230:	2100      	movs	r1, #0
 8002232:	2078      	movs	r0, #120	; 0x78
 8002234:	f000 fa00 	bl	8002638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002238:	22af      	movs	r2, #175	; 0xaf
 800223a:	2100      	movs	r1, #0
 800223c:	2078      	movs	r0, #120	; 0x78
 800223e:	f000 f9fb 	bl	8002638 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002242:	222e      	movs	r2, #46	; 0x2e
 8002244:	2100      	movs	r1, #0
 8002246:	2078      	movs	r0, #120	; 0x78
 8002248:	f000 f9f6 	bl	8002638 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800224c:	2000      	movs	r0, #0
 800224e:	f000 f843 	bl	80022d8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002252:	f000 f813 	bl	800227c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <SSD1306_Init+0x184>)
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SSD1306_Init+0x184>)
 800225e:	2200      	movs	r2, #0
 8002260:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SSD1306_Init+0x184>)
 8002264:	2201      	movs	r2, #1
 8002266:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000500 	.word	0x20000500
 8002278:	20000a3c 	.word	0x20000a3c

0800227c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	e01d      	b.n	80022c4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	3b50      	subs	r3, #80	; 0x50
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	2100      	movs	r1, #0
 8002292:	2078      	movs	r0, #120	; 0x78
 8002294:	f000 f9d0 	bl	8002638 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2078      	movs	r0, #120	; 0x78
 800229e:	f000 f9cb 	bl	8002638 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80022a2:	2210      	movs	r2, #16
 80022a4:	2100      	movs	r1, #0
 80022a6:	2078      	movs	r0, #120	; 0x78
 80022a8:	f000 f9c6 	bl	8002638 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <SSD1306_UpdateScreen+0x58>)
 80022b2:	441a      	add	r2, r3
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	2078      	movs	r0, #120	; 0x78
 80022ba:	f000 f957 	bl	800256c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	3301      	adds	r3, #1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b07      	cmp	r3, #7
 80022c8:	d9de      	bls.n	8002288 <SSD1306_UpdateScreen+0xc>
	}
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000063c 	.word	0x2000063c

080022d8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <SSD1306_Fill+0x14>
 80022e8:	2300      	movs	r3, #0
 80022ea:	e000      	b.n	80022ee <SSD1306_Fill+0x16>
 80022ec:	23ff      	movs	r3, #255	; 0xff
 80022ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f2:	4619      	mov	r1, r3
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <SSD1306_Fill+0x2c>)
 80022f6:	f005 fc3c 	bl	8007b72 <memset>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000063c 	.word	0x2000063c

08002308 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
 8002312:	460b      	mov	r3, r1
 8002314:	80bb      	strh	r3, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	70fb      	strb	r3, [r7, #3]
	if (
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b7f      	cmp	r3, #127	; 0x7f
 800231e:	d848      	bhi.n	80023b2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	2b3f      	cmp	r3, #63	; 0x3f
 8002324:	d845      	bhi.n	80023b2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <SSD1306_DrawPixel+0xb8>)
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11a      	bne.n	8002378 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	88bb      	ldrh	r3, [r7, #4]
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	b298      	uxth	r0, r3
 800234a:	4603      	mov	r3, r0
 800234c:	01db      	lsls	r3, r3, #7
 800234e:	4413      	add	r3, r2
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <SSD1306_DrawPixel+0xbc>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	b25a      	sxtb	r2, r3
 8002356:	88bb      	ldrh	r3, [r7, #4]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	b259      	sxtb	r1, r3
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	4603      	mov	r3, r0
 800236c:	01db      	lsls	r3, r3, #7
 800236e:	4413      	add	r3, r2
 8002370:	b2c9      	uxtb	r1, r1
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <SSD1306_DrawPixel+0xbc>)
 8002374:	54d1      	strb	r1, [r2, r3]
 8002376:	e01d      	b.n	80023b4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	88bb      	ldrh	r3, [r7, #4]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	b298      	uxth	r0, r3
 8002380:	4603      	mov	r3, r0
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	4413      	add	r3, r2
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <SSD1306_DrawPixel+0xbc>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	b25a      	sxtb	r2, r3
 800238c:	88bb      	ldrh	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	b25b      	sxtb	r3, r3
 800239e:	4013      	ands	r3, r2
 80023a0:	b259      	sxtb	r1, r3
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	4603      	mov	r3, r0
 80023a6:	01db      	lsls	r3, r3, #7
 80023a8:	4413      	add	r3, r2
 80023aa:	b2c9      	uxtb	r1, r1
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <SSD1306_DrawPixel+0xbc>)
 80023ae:	54d1      	strb	r1, [r2, r3]
 80023b0:	e000      	b.n	80023b4 <SSD1306_DrawPixel+0xac>
		return;
 80023b2:	bf00      	nop
	}
}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000a3c 	.word	0x20000a3c
 80023c4:	2000063c 	.word	0x2000063c

080023c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	460a      	mov	r2, r1
 80023d2:	80fb      	strh	r3, [r7, #6]
 80023d4:	4613      	mov	r3, r2
 80023d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SSD1306_GotoXY+0x28>)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <SSD1306_GotoXY+0x28>)
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	8053      	strh	r3, [r2, #2]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	20000a3c 	.word	0x20000a3c

080023f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	4613      	mov	r3, r2
 8002402:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
	if (
 8002410:	2b7f      	cmp	r3, #127	; 0x7f
 8002412:	dc07      	bgt.n	8002424 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002416:	885b      	ldrh	r3, [r3, #2]
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002420:	2b3f      	cmp	r3, #63	; 0x3f
 8002422:	dd01      	ble.n	8002428 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002424:	2300      	movs	r3, #0
 8002426:	e05e      	b.n	80024e6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e04b      	b.n	80024c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	3b20      	subs	r3, #32
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	7849      	ldrb	r1, [r1, #1]
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4619      	mov	r1, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	440b      	add	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	e030      	b.n	80024b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	b29b      	uxth	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	b298      	uxth	r0, r3
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002470:	885a      	ldrh	r2, [r3, #2]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4413      	add	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	79ba      	ldrb	r2, [r7, #6]
 800247c:	4619      	mov	r1, r3
 800247e:	f7ff ff43 	bl	8002308 <SSD1306_DrawPixel>
 8002482:	e014      	b.n	80024ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4413      	add	r3, r2
 800248e:	b298      	uxth	r0, r3
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <SSD1306_Putc+0xfc>)
 8002492:	885a      	ldrh	r2, [r3, #2]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	b299      	uxth	r1, r3
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff ff2d 	bl	8002308 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3301      	adds	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4293      	cmp	r3, r2
 80024be:	d3c8      	bcc.n	8002452 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	461a      	mov	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d3ad      	bcc.n	800242e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <SSD1306_Putc+0xfc>)
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4413      	add	r3, r2
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <SSD1306_Putc+0xfc>)
 80024e2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80024e4:	79fb      	ldrb	r3, [r7, #7]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000a3c 	.word	0x20000a3c

080024f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002502:	e012      	b.n	800252a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	79fa      	ldrb	r2, [r7, #7]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff71 	bl	80023f4 <SSD1306_Putc>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d002      	beq.n	8002524 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	e008      	b.n	8002536 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e8      	bne.n	8002504 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	781b      	ldrb	r3, [r3, #0]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <ssd1306_I2C_Init+0x28>)
 8002548:	607b      	str	r3, [r7, #4]
	while(p>0)
 800254a:	e002      	b.n	8002552 <ssd1306_I2C_Init+0x12>
		p--;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	0003d090 	.word	0x0003d090

0800256c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b0c7      	sub	sp, #284	; 0x11c
 8002570:	af02      	add	r7, sp, #8
 8002572:	4604      	mov	r4, r0
 8002574:	4608      	mov	r0, r1
 8002576:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800257a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800257e:	600a      	str	r2, [r1, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002586:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800258a:	4622      	mov	r2, r4
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002592:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002596:	4602      	mov	r2, r0
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800259e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a2:	460a      	mov	r2, r1
 80025a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80025a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025b2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80025c0:	e015      	b.n	80025ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80025c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025ca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	441a      	add	r2, r3
 80025d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025d6:	3301      	adds	r3, #1
 80025d8:	7811      	ldrb	r1, [r2, #0]
 80025da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025de:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80025e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80025e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025e8:	3301      	adds	r3, #1
 80025ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80025ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025f8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d8df      	bhi.n	80025c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8002602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002606:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b299      	uxth	r1, r3
 800260e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002612:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	f107 020c 	add.w	r2, r7, #12
 8002620:	200a      	movs	r0, #10
 8002622:	9000      	str	r0, [sp, #0]
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <ssd1306_I2C_WriteMulti+0xc8>)
 8002626:	f000 ff1b 	bl	8003460 <HAL_I2C_Master_Transmit>
}
 800262a:	bf00      	nop
 800262c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	20000500 	.word	0x20000500

08002638 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	460b      	mov	r3, r1
 8002644:	71bb      	strb	r3, [r7, #6]
 8002646:	4613      	mov	r3, r2
 8002648:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800264e:	797b      	ldrb	r3, [r7, #5]
 8002650:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	b299      	uxth	r1, r3
 8002656:	f107 020c 	add.w	r2, r7, #12
 800265a:	230a      	movs	r3, #10
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2302      	movs	r3, #2
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <ssd1306_I2C_Write+0x38>)
 8002662:	f000 fefd 	bl	8003460 <HAL_I2C_Master_Transmit>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000500 	.word	0x20000500

08002674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_MspInit+0x54>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_MspInit+0x54>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_MspInit+0x54>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_MspInit+0x54>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_MspInit+0x54>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_MspInit+0x54>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	210f      	movs	r1, #15
 80026b6:	f06f 0001 	mvn.w	r0, #1
 80026ba:	f000 fbad 	bl	8002e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <HAL_I2C_MspInit+0x108>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d12c      	bne.n	8002748 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 800270a:	23c0      	movs	r3, #192	; 0xc0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270e:	2312      	movs	r3, #18
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800271a:	2304      	movs	r3, #4
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	482d      	ldr	r0, [pc, #180]	; (80027dc <HAL_I2C_MspInit+0x110>)
 8002726:	f000 fba1 	bl	8002e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 8002734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002746:	e041      	b.n	80027cc <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_I2C_MspInit+0x114>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d13c      	bne.n	80027cc <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OLED_SCL_Pin;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002774:	2312      	movs	r3, #18
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002780:	2304      	movs	r3, #4
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <HAL_I2C_MspInit+0x110>)
 800278c:	f000 fb6e 	bl	8002e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8002790:	2308      	movs	r3, #8
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002794:	2312      	movs	r3, #18
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80027a0:	2309      	movs	r3, #9
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <HAL_I2C_MspInit+0x110>)
 80027ac:	f000 fb5e 	bl	8002e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 80027ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_I2C_MspInit+0x10c>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3730      	adds	r7, #48	; 0x30
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40005400 	.word	0x40005400
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40005800 	.word	0x40005800

080027e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d10d      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_TIM_Base_MspInit+0x3c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_TIM_Base_MspInit+0x3c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_TIM_Base_MspInit+0x3c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_UART_MspInit+0x84>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d12b      	bne.n	800289e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_UART_MspInit+0x88>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_UART_MspInit+0x88>)
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_UART_MspInit+0x88>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_UART_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_UART_MspInit+0x88>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_UART_MspInit+0x88>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800287e:	230c      	movs	r3, #12
 8002880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800288e:	2307      	movs	r3, #7
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <HAL_UART_MspInit+0x8c>)
 800289a:	f000 fae7 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40004400 	.word	0x40004400
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000

080028b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_InitTick+0xd0>)
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_InitTick+0xd0>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6453      	str	r3, [r2, #68]	; 0x44
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_InitTick+0xd0>)
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028e0:	f107 020c 	add.w	r2, r7, #12
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 f9aa 	bl	8004c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028f0:	f002 f994 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 80028f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_InitTick+0xd4>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	3b01      	subs	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_InitTick+0xd8>)
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_InitTick+0xdc>)
 8002908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_InitTick+0xd8>)
 800290c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002910:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_InitTick+0xd8>)
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_InitTick+0xd8>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_InitTick+0xd8>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_InitTick+0xd8>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <HAL_InitTick+0xd8>)
 800292c:	f002 f9bc 	bl	8004ca8 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11b      	bne.n	8002976 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800293e:	4813      	ldr	r0, [pc, #76]	; (800298c <HAL_InitTick+0xd8>)
 8002940:	f002 fa5c 	bl	8004dfc <HAL_TIM_Base_Start_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800294a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800294e:	2b00      	cmp	r3, #0
 8002950:	d111      	bne.n	8002976 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002952:	2019      	movs	r0, #25
 8002954:	f000 fa7c 	bl	8002e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d808      	bhi.n	8002970 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800295e:	2200      	movs	r2, #0
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	2019      	movs	r0, #25
 8002964:	f000 fa58 	bl	8002e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_InitTick+0xe0>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e002      	b.n	8002976 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800297a:	4618      	mov	r0, r3
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	431bde83 	.word	0x431bde83
 800298c:	20000a44 	.word	0x20000a44
 8002990:	40010000 	.word	0x40010000
 8002994:	2000000c 	.word	0x2000000c

08002998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800299c:	e7fe      	b.n	800299c <NMI_Handler+0x4>

0800299e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <MemManage_Handler+0x4>

080029aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <BusFault_Handler+0x4>

080029b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <UsageFault_Handler+0x4>

080029b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029ca:	f002 fa79 	bl	8004ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000a44 	.word	0x20000a44

080029d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_kill>:

int _kill(int pid, int sig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f2:	f005 f967 	bl	8007cc4 <__errno>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2216      	movs	r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
  return -1;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_exit>:

void _exit (int status)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ffe7 	bl	80029e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a1a:	e7fe      	b.n	8002a1a <_exit+0x12>

08002a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e00a      	b.n	8002a44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a2e:	f3af 8000 	nop.w
 8002a32:	4601      	mov	r1, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	60ba      	str	r2, [r7, #8]
 8002a3a:	b2ca      	uxtb	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbf0      	blt.n	8002a2e <_read+0x12>
  }

  return len;
 8002a4c:	687b      	ldr	r3, [r7, #4]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e009      	b.n	8002a7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	60ba      	str	r2, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbf1      	blt.n	8002a68 <_write+0x12>
  }
  return len;
 8002a84:	687b      	ldr	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_close>:

int _close(int file)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_isatty>:

int _isatty(int file)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f005 f8cc 	bl	8007cc4 <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20010000 	.word	0x20010000
 8002b58:	00000400 	.word	0x00000400
 8002b5c:	20000a8c 	.word	0x20000a8c
 8002b60:	20004938 	.word	0x20004938

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb2:	f7ff ffd7 	bl	8002b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f005 f88b 	bl	8007cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff f811 	bl	8001be0 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002bcc:	0800b880 	.word	0x0800b880
  ldr r2, =_sbss
 8002bd0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002bd4:	20004934 	.word	0x20004934

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <HAL_Init+0x40>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_Init+0x40>)
 8002bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_Init+0x40>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f8fc 	bl	8002e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	200f      	movs	r0, #15
 8002c0c:	f7ff fe52 	bl	80028b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fd30 	bl	8002674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000010 	.word	0x20000010
 8002c44:	20000a90 	.word	0x20000a90

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000a90 	.word	0x20000a90

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000010 	.word	0x20000010

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff4c 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2a:	f7ff ff61 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7ff ffb1 	bl	8002d9c <NVIC_EncodePriority>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff80 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff54 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e159      	b.n	800313c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f040 8148 	bne.w	8003136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d005      	beq.n	8002ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d130      	bne.n	8002f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 0201 	and.w	r2, r3, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d017      	beq.n	8002f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d123      	bne.n	8002fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	220f      	movs	r2, #15
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	08da      	lsrs	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3208      	adds	r2, #8
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0203 	and.w	r2, r3, #3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a2 	beq.w	8003136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_GPIO_Init+0x2e8>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a56      	ldr	r2, [pc, #344]	; (8003154 <HAL_GPIO_Init+0x2e8>)
 8002ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_GPIO_Init+0x2e8>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300e:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_GPIO_Init+0x2ec>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a49      	ldr	r2, [pc, #292]	; (800315c <HAL_GPIO_Init+0x2f0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d019      	beq.n	800306e <HAL_GPIO_Init+0x202>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_GPIO_Init+0x2f4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0x1fe>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_GPIO_Init+0x2f8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00d      	beq.n	8003066 <HAL_GPIO_Init+0x1fa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_GPIO_Init+0x2fc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x1f6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a45      	ldr	r2, [pc, #276]	; (800316c <HAL_GPIO_Init+0x300>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_GPIO_Init+0x1f2>
 800305a:	2304      	movs	r3, #4
 800305c:	e008      	b.n	8003070 <HAL_GPIO_Init+0x204>
 800305e:	2307      	movs	r3, #7
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x204>
 8003062:	2303      	movs	r3, #3
 8003064:	e004      	b.n	8003070 <HAL_GPIO_Init+0x204>
 8003066:	2302      	movs	r3, #2
 8003068:	e002      	b.n	8003070 <HAL_GPIO_Init+0x204>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x204>
 800306e:	2300      	movs	r3, #0
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	f002 0203 	and.w	r2, r2, #3
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4093      	lsls	r3, r2
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003080:	4935      	ldr	r1, [pc, #212]	; (8003158 <HAL_GPIO_Init+0x2ec>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3302      	adds	r3, #2
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_GPIO_Init+0x304>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030b2:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <HAL_GPIO_Init+0x304>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_GPIO_Init+0x304>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_GPIO_Init+0x304>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030e2:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_GPIO_Init+0x304>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_GPIO_Init+0x304>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <HAL_GPIO_Init+0x304>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_GPIO_Init+0x304>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3301      	adds	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	f67f aea2 	bls.w	8002e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40013800 	.word	0x40013800
 800315c:	40020000 	.word	0x40020000
 8003160:	40020400 	.word	0x40020400
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021000 	.word	0x40021000
 8003170:	40013c00 	.word	0x40013c00

08003174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e001      	b.n	8003196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c0:	e003      	b.n	80031ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e12b      	b.n	8003442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fa64 	bl	80026cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800323c:	f001 fcda 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a81      	ldr	r2, [pc, #516]	; (800344c <HAL_I2C_Init+0x274>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <HAL_I2C_Init+0x84>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a80      	ldr	r2, [pc, #512]	; (8003450 <HAL_I2C_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e006      	b.n	800326a <HAL_I2C_Init+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a7d      	ldr	r2, [pc, #500]	; (8003454 <HAL_I2C_Init+0x27c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e7      	b.n	8003442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_I2C_Init+0x280>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_I2C_Init+0x274>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d802      	bhi.n	80032ac <HAL_I2C_Init+0xd4>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	e009      	b.n	80032c0 <HAL_I2C_Init+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <HAL_I2C_Init+0x284>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	495c      	ldr	r1, [pc, #368]	; (800344c <HAL_I2C_Init+0x274>)
 80032dc:	428b      	cmp	r3, r1
 80032de:	d819      	bhi.n	8003314 <HAL_I2C_Init+0x13c>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_I2C_Init+0x138>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e59      	subs	r1, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb1 f3f3 	udiv	r3, r1, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	e051      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003310:	2304      	movs	r3, #4
 8003312:	e04f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <HAL_I2C_Init+0x168>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e012      	b.n	8003366 <HAL_I2C_Init+0x18e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x196>
 800336a:	2301      	movs	r3, #1
 800336c:	e022      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_I2C_Init+0x1bc>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e58      	subs	r0, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	440b      	add	r3, r1
 8003384:	fbb0 f3f3 	udiv	r3, r0, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	6809      	ldr	r1, [r1, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6911      	ldr	r1, [r2, #16]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68d2      	ldr	r2, [r2, #12]
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	000186a0 	.word	0x000186a0
 8003450:	001e847f 	.word	0x001e847f
 8003454:	003d08ff 	.word	0x003d08ff
 8003458:	431bde83 	.word	0x431bde83
 800345c:	10624dd3 	.word	0x10624dd3

08003460 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff fbe8 	bl	8002c48 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 80e0 	bne.w	8003648 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2319      	movs	r3, #25
 800348e:	2201      	movs	r2, #1
 8003490:	4970      	ldr	r1, [pc, #448]	; (8003654 <HAL_I2C_Master_Transmit+0x1f4>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fda0 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	e0d3      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2C_Master_Transmit+0x50>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0cc      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d007      	beq.n	80034d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2221      	movs	r2, #33	; 0x21
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2210      	movs	r2, #16
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	893a      	ldrh	r2, [r7, #8]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_I2C_Master_Transmit+0x1f8>)
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003518:	8979      	ldrh	r1, [r7, #10]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6a3a      	ldr	r2, [r7, #32]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fbf0 	bl	8003d04 <I2C_MasterRequestWrite>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08d      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003544:	e066      	b.n	8003614 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fe1a 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06b      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_I2C_Master_Transmit+0x188>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6a39      	ldr	r1, [r7, #32]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fe0a 	bl	8004206 <I2C_WaitOnBTFFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e01a      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d194      	bne.n	8003546 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000

0800365c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003676:	f7ff fae7 	bl	8002c48 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	f040 8208 	bne.w	8003a9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2319      	movs	r3, #25
 8003690:	2201      	movs	r2, #1
 8003692:	497b      	ldr	r1, [pc, #492]	; (8003880 <HAL_I2C_Mem_Read+0x224>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fc9f 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e1fb      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x56>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e1f4      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	; 0x22
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_I2C_Mem_Read+0x228>)
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371a:	88f8      	ldrh	r0, [r7, #6]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4603      	mov	r3, r0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fb6c 	bl	8003e08 <I2C_RequestMemoryRead>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1b0      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e184      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	2b01      	cmp	r3, #1
 8003770:	d11b      	bne.n	80037aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e164      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11b      	bne.n	80037ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	e144      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003800:	e138      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	2b03      	cmp	r3, #3
 8003808:	f200 80f1 	bhi.w	80039ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b01      	cmp	r3, #1
 8003812:	d123      	bne.n	800385c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fd35 	bl	8004288 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e139      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385a:	e10b      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b02      	cmp	r3, #2
 8003862:	d14e      	bne.n	8003902 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	2200      	movs	r2, #0
 800386c:	4906      	ldr	r1, [pc, #24]	; (8003888 <HAL_I2C_Mem_Read+0x22c>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fbb2 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e10e      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
 800387e:	bf00      	nop
 8003880:	00100002 	.word	0x00100002
 8003884:	ffff0000 	.word	0xffff0000
 8003888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003900:	e0b8      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2200      	movs	r2, #0
 800390a:	4966      	ldr	r1, [pc, #408]	; (8003aa4 <HAL_I2C_Mem_Read+0x448>)
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fb63 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0bf      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2200      	movs	r2, #0
 8003966:	494f      	ldr	r1, [pc, #316]	; (8003aa4 <HAL_I2C_Mem_Read+0x448>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fb35 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e091      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ec:	e042      	b.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fc48 	bl	8004288 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e04c      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d118      	bne.n	8003a74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f aec2 	bne.w	8003802 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	00010004 	.word	0x00010004

08003aa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff f8c6 	bl	8002c48 <HAL_GetTick>
 8003abc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	f040 8111 	bne.w	8003cf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2319      	movs	r3, #25
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4988      	ldr	r1, [pc, #544]	; (8003cfc <HAL_I2C_IsDeviceReady+0x254>)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa7c 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e104      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_I2C_IsDeviceReady+0x50>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0fd      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d007      	beq.n	8003b1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2224      	movs	r2, #36	; 0x24
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a70      	ldr	r2, [pc, #448]	; (8003d00 <HAL_I2C_IsDeviceReady+0x258>)
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa3a 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b78:	d103      	bne.n	8003b82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0b6      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b96:	f7ff f857 	bl	8002c48 <HAL_GetTick>
 8003b9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bca:	e025      	b.n	8003c18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bcc:	f7ff f83c 	bl	8002c48 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <HAL_I2C_IsDeviceReady+0x13a>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	22a0      	movs	r2, #160	; 0xa0
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2ba0      	cmp	r3, #160	; 0xa0
 8003c22:	d005      	beq.n	8003c30 <HAL_I2C_IsDeviceReady+0x188>
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_I2C_IsDeviceReady+0x188>
 8003c2a:	7dbb      	ldrb	r3, [r7, #22]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0cd      	beq.n	8003bcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d129      	bne.n	8003c9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	4921      	ldr	r1, [pc, #132]	; (8003cfc <HAL_I2C_IsDeviceReady+0x254>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9ae 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e036      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e02c      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2319      	movs	r3, #25
 8003cba:	2201      	movs	r2, #1
 8003cbc:	490f      	ldr	r1, [pc, #60]	; (8003cfc <HAL_I2C_IsDeviceReady+0x254>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f98a 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e012      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f4ff af32 	bcc.w	8003b42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d006      	beq.n	8003d2e <I2C_MasterRequestWrite+0x2a>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d003      	beq.n	8003d2e <I2C_MasterRequestWrite+0x2a>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00b      	b.n	8003d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d107      	bne.n	8003d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f937 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7e:	d103      	bne.n	8003d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e035      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e01b      	b.n	8003de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da8:	897b      	ldrh	r3, [r7, #10]
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030f 	orn	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	490e      	ldr	r1, [pc, #56]	; (8003e00 <I2C_MasterRequestWrite+0xfc>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f95d 	bl	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e010      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4907      	ldr	r1, [pc, #28]	; (8003e04 <I2C_MasterRequestWrite+0x100>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f94d 	bl	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010008 	.word	0x00010008
 8003e04:	00010002 	.word	0x00010002

08003e08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	817b      	strh	r3, [r7, #10]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	813b      	strh	r3, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f8c2 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e68:	d103      	bne.n	8003e72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0aa      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	4952      	ldr	r1, [pc, #328]	; (8003fd4 <I2C_RequestMemoryRead+0x1cc>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f8fa 	bl	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e097      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f964 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e076      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e021      	b.n	8003f34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef0:	893b      	ldrh	r3, [r7, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f93e 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e050      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f923 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e035      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f82b 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d103      	bne.n	8003fa0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e013      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa4:	897b      	ldrh	r3, [r7, #10]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	4906      	ldr	r1, [pc, #24]	; (8003fd4 <I2C_RequestMemoryRead+0x1cc>)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f863 	bl	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	00010002 	.word	0x00010002

08003fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe8:	e025      	b.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d021      	beq.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe fe29 	bl	8002c48 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e023      	b.n	800407e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10d      	bne.n	800405c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	e00c      	b.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	429a      	cmp	r2, r3
 800407a:	d0b6      	beq.n	8003fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004094:	e051      	b.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d123      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e046      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe fda7 	bl	8002c48 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e020      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10c      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e00b      	b.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	43da      	mvns	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d18d      	bne.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004190:	e02d      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8ce 	bl	8004334 <I2C_IsAcknowledgeFailed>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e02d      	b.n	80041fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d021      	beq.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fd4d 	bl	8002c48 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e007      	b.n	80041fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d1ca      	bne.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004212:	e02d      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f88d 	bl	8004334 <I2C_IsAcknowledgeFailed>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e02d      	b.n	8004280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d021      	beq.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fe fd0c 	bl	8002c48 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e007      	b.n	8004280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b04      	cmp	r3, #4
 800427c:	d1ca      	bne.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004294:	e042      	b.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d119      	bne.n	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0210 	mvn.w	r2, #16
 80042ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e029      	b.n	800432c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d8:	f7fe fcb6 	bl	8002c48 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e007      	b.n	800432c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d1b5      	bne.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d11b      	bne.n	8004384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e267      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b2:	4b88      	ldr	r3, [pc, #544]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b85      	ldr	r3, [pc, #532]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b82      	ldr	r3, [pc, #520]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b7e      	ldr	r3, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e242      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b76      	ldr	r3, [pc, #472]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b70      	ldr	r3, [pc, #448]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6f      	ldr	r2, [pc, #444]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6c      	ldr	r2, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe fbfc 	bl	8002c48 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe fbf8 	bl	8002c48 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e207      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe fbe8 	bl	8002c48 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fe fbe4 	bl	8002c48 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1f3      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1c7      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4937      	ldr	r1, [pc, #220]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e03a      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fe fb9d 	bl	8002c48 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004512:	f7fe fb99 	bl	8002c48 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1a8      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4925      	ldr	r1, [pc, #148]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe fb7c 	bl	8002c48 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fe fb78 	bl	8002c48 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e187      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d036      	beq.n	80045ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_RCC_OscConfig+0x248>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fe fb5c 	bl	8002c48 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fe fb58 	bl	8002c48 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e167      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
 80045b2:	e01b      	b.n	80045ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_OscConfig+0x248>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fe fb45 	bl	8002c48 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e00e      	b.n	80045e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fe fb41 	bl	8002c48 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d907      	bls.n	80045e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e150      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	42470000 	.word	0x42470000
 80045dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e0:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ea      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8097 	beq.w	8004728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fe:	4b81      	ldr	r3, [pc, #516]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	4b7d      	ldr	r3, [pc, #500]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a7c      	ldr	r2, [pc, #496]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b7a      	ldr	r3, [pc, #488]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b77      	ldr	r3, [pc, #476]	; (8004808 <HAL_RCC_OscConfig+0x474>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b74      	ldr	r3, [pc, #464]	; (8004808 <HAL_RCC_OscConfig+0x474>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	; (8004808 <HAL_RCC_OscConfig+0x474>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fe fb01 	bl	8002c48 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fe fafd 	bl	8002c48 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e10c      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_OscConfig+0x474>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x2ea>
 8004670:	4b64      	ldr	r3, [pc, #400]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a63      	ldr	r2, [pc, #396]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x30c>
 8004686:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a5e      	ldr	r2, [pc, #376]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a5b      	ldr	r2, [pc, #364]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 80046a0:	4b58      	ldr	r3, [pc, #352]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a57      	ldr	r2, [pc, #348]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b55      	ldr	r3, [pc, #340]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a54      	ldr	r2, [pc, #336]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fe fac2 	bl	8002c48 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fe fabe 	bl	8002c48 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0cb      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	4b49      	ldr	r3, [pc, #292]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ee      	beq.n	80046c8 <HAL_RCC_OscConfig+0x334>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ec:	f7fe faac 	bl	8002c48 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fe faa8 	bl	8002c48 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0b5      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ee      	bne.n	80046f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b39      	ldr	r3, [pc, #228]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	4a38      	ldr	r2, [pc, #224]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a1 	beq.w	8004874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004732:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d05c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d141      	bne.n	80047ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b31      	ldr	r3, [pc, #196]	; (800480c <HAL_RCC_OscConfig+0x478>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fa7c 	bl	8002c48 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe fa78 	bl	8002c48 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e087      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	491b      	ldr	r1, [pc, #108]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x478>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe fa51 	bl	8002c48 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047aa:	f7fe fa4d 	bl	8002c48 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e05c      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x416>
 80047c8:	e054      	b.n	8004874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCC_OscConfig+0x478>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fa3a 	bl	8002c48 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fe fa36 	bl	8002c48 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e045      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_OscConfig+0x470>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x444>
 80047f6:	e03d      	b.n	8004874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e038      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
 8004804:	40023800 	.word	0x40023800
 8004808:	40007000 	.word	0x40007000
 800480c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x4ec>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d028      	beq.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d121      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d11a      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	3b01      	subs	r3, #1
 800485a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0cc      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90c      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b63      	ldr	r3, [pc, #396]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b8      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a58      	ldr	r2, [pc, #352]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f0:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a52      	ldr	r2, [pc, #328]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	494d      	ldr	r1, [pc, #308]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d044      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d119      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d003      	beq.n	8004942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e067      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4934      	ldr	r1, [pc, #208]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004974:	f7fe f968 	bl	8002c48 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fe f964 	bl	8002c48 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e04f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a4:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d20c      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4916      	ldr	r1, [pc, #88]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490e      	ldr	r1, [pc, #56]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f821 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490a      	ldr	r1, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd ff42 	bl	80028b4 <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00
 8004a40:	40023800 	.word	0x40023800
 8004a44:	0800b4b4 	.word	0x0800b4b4
 8004a48:	20000008 	.word	0x20000008
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a54:	b090      	sub	sp, #64	; 0x40
 8004a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a60:	2300      	movs	r3, #0
 8004a62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a68:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d00d      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x40>
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	f200 80a1 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x16c>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d003      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a82:	e09b      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a88:	e09b      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8a:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a8e:	e098      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a90:	4b4f      	ldr	r3, [pc, #316]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a9a:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	2200      	movs	r2, #0
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004abc:	fb03 f201 	mul.w	r2, r3, r1
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	fb00 f303 	mul.w	r3, r0, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aca:	fba0 1202 	umull	r1, r2, r0, r2
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad6:	4413      	add	r3, r2
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004adc:	2200      	movs	r2, #0
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aea:	f7fc f905 	bl	8000cf8 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4613      	mov	r3, r2
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af6:	e053      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af8:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	2200      	movs	r2, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	617a      	str	r2, [r7, #20]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b0a:	f04f 0b00 	mov.w	fp, #0
 8004b0e:	4652      	mov	r2, sl
 8004b10:	465b      	mov	r3, fp
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	0159      	lsls	r1, r3, #5
 8004b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b20:	0150      	lsls	r0, r2, #5
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	ebb2 080a 	subs.w	r8, r2, sl
 8004b2a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b42:	ebb2 0408 	subs.w	r4, r2, r8
 8004b46:	eb63 0509 	sbc.w	r5, r3, r9
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	00eb      	lsls	r3, r5, #3
 8004b54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b58:	00e2      	lsls	r2, r4, #3
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	461d      	mov	r5, r3
 8004b5e:	eb14 030a 	adds.w	r3, r4, sl
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	eb45 030b 	adc.w	r3, r5, fp
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b76:	4629      	mov	r1, r5
 8004b78:	028b      	lsls	r3, r1, #10
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b80:	4621      	mov	r1, r4
 8004b82:	028a      	lsls	r2, r1, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	60fa      	str	r2, [r7, #12]
 8004b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b94:	f7fc f8b0 	bl	8000cf8 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3740      	adds	r7, #64	; 0x40
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	017d7840 	.word	0x017d7840

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000008 	.word	0x20000008

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	0800b4c4 	.word	0x0800b4c4

08004c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c20:	f7ff ffdc 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0b5b      	lsrs	r3, r3, #13
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	0800b4c4 	.word	0x0800b4c4

08004c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	220f      	movs	r2, #15
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCC_GetClockConfig+0x60>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0207 	and.w	r2, r3, #7
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40023c00 	.word	0x40023c00

08004ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fd88 	bl	80027e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 fae2 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d001      	beq.n	8004d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e03c      	b.n	8004dda <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_TIM_Base_Start+0xa0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_Base_Start+0x5c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d013      	beq.n	8004da4 <HAL_TIM_Base_Start+0x5c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <HAL_TIM_Base_Start+0xa4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_TIM_Base_Start+0x5c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_TIM_Base_Start+0xa8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_TIM_Base_Start+0x5c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <HAL_TIM_Base_Start+0xac>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_TIM_Base_Start+0x5c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <HAL_TIM_Base_Start+0xb0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d010      	beq.n	8004dd8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	e007      	b.n	8004dd8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	40014000 	.word	0x40014000

08004dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d001      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e044      	b.n	8004e9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_TIM_Base_Start_IT+0xb0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x6c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d013      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x6c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x6c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x6c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x6c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIM_Base_Start_IT+0xc0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d111      	bne.n	8004e8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d010      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	e007      	b.n	8004e9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40014000 	.word	0x40014000

08004ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0202 	mvn.w	r2, #2
 8004eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f9b5 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9a7 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9b8 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0204 	mvn.w	r2, #4
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f98b 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f97d 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f98e 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0208 	mvn.w	r2, #8
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2204      	movs	r2, #4
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f961 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f953 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f964 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0210 	mvn.w	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2208      	movs	r2, #8
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f937 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f929 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f93a 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0201 	mvn.w	r2, #1
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fd f840 	bl	80020c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d10e      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d107      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fab2 	bl	80055d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d10e      	bne.n	800509c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d107      	bne.n	800509c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f8ff 	bl	800529a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0220 	mvn.w	r2, #32
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa7c 	bl	80055c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_ConfigClockSource+0x1c>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0b4      	b.n	8005256 <HAL_TIM_ConfigClockSource+0x186>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d03e      	beq.n	80051a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	f200 8087 	bhi.w	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	f000 8086 	beq.w	8005242 <HAL_TIM_ConfigClockSource+0x172>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d87f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b70      	cmp	r3, #112	; 0x70
 800513e:	d01a      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0xa6>
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d87b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b60      	cmp	r3, #96	; 0x60
 8005146:	d050      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x11a>
 8005148:	2b60      	cmp	r3, #96	; 0x60
 800514a:	d877      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b50      	cmp	r3, #80	; 0x50
 800514e:	d03c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0xfa>
 8005150:	2b50      	cmp	r3, #80	; 0x50
 8005152:	d873      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d058      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x13a>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d86f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b30      	cmp	r3, #48	; 0x30
 800515e:	d064      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d86b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d060      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d867      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05c      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b10      	cmp	r3, #16
 8005172:	d05a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005174:	e062      	b.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f000 f98d 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	609a      	str	r2, [r3, #8]
      break;
 80051a2:	e04f      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f000 f976 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c6:	609a      	str	r2, [r3, #8]
      break;
 80051c8:	e03c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 f8ea 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2150      	movs	r1, #80	; 0x50
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f943 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 80051e8:	e02c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 f909 	bl	800540e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2160      	movs	r1, #96	; 0x60
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f933 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8005208:	e01c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	f000 f8ca 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f923 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8005228:	e00c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 f91a 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 800523a:	e003      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e000      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a34      	ldr	r2, [pc, #208]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a31      	ldr	r2, [pc, #196]	; (8005398 <TIM_Base_SetConfig+0xe8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a30      	ldr	r2, [pc, #192]	; (800539c <TIM_Base_SetConfig+0xec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x38>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM_Base_SetConfig+0xf0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01b      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d017      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <TIM_Base_SetConfig+0xe8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <TIM_Base_SetConfig+0xec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <TIM_Base_SetConfig+0xf0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <TIM_Base_SetConfig+0xf4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <TIM_Base_SetConfig+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <TIM_Base_SetConfig+0xfc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a08      	ldr	r2, [pc, #32]	; (8005394 <TIM_Base_SetConfig+0xe4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 030a 	bic.w	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0210 	bic.w	r2, r3, #16
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e050      	b.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d018      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d013      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00e      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10c      	bne.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4313      	orrs	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40014000 	.word	0x40014000

080055c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e03f      	b.n	800567a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fd f908 	bl	8002824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800562a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f829 	bl	8005684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b0c0      	sub	sp, #256	; 0x100
 800568a:	af00      	add	r7, sp, #0
 800568c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	68d9      	ldr	r1, [r3, #12]
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	ea40 0301 	orr.w	r3, r0, r1
 80056ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056dc:	f021 010c 	bic.w	r1, r1, #12
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ea:	430b      	orrs	r3, r1
 80056ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fe:	6999      	ldr	r1, [r3, #24]
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	ea40 0301 	orr.w	r3, r0, r1
 800570a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b8f      	ldr	r3, [pc, #572]	; (8005950 <UART_SetConfig+0x2cc>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d005      	beq.n	8005724 <UART_SetConfig+0xa0>
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b8d      	ldr	r3, [pc, #564]	; (8005954 <UART_SetConfig+0x2d0>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d104      	bne.n	800572e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7ff fa7a 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 8005728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800572c:	e003      	b.n	8005736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800572e:	f7ff fa61 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8005732:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	f040 810c 	bne.w	800595c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800574e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005756:	4622      	mov	r2, r4
 8005758:	462b      	mov	r3, r5
 800575a:	1891      	adds	r1, r2, r2
 800575c:	65b9      	str	r1, [r7, #88]	; 0x58
 800575e:	415b      	adcs	r3, r3
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005766:	4621      	mov	r1, r4
 8005768:	eb12 0801 	adds.w	r8, r2, r1
 800576c:	4629      	mov	r1, r5
 800576e:	eb43 0901 	adc.w	r9, r3, r1
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800577e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005786:	4690      	mov	r8, r2
 8005788:	4699      	mov	r9, r3
 800578a:	4623      	mov	r3, r4
 800578c:	eb18 0303 	adds.w	r3, r8, r3
 8005790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005794:	462b      	mov	r3, r5
 8005796:	eb49 0303 	adc.w	r3, r9, r3
 800579a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057b2:	460b      	mov	r3, r1
 80057b4:	18db      	adds	r3, r3, r3
 80057b6:	653b      	str	r3, [r7, #80]	; 0x50
 80057b8:	4613      	mov	r3, r2
 80057ba:	eb42 0303 	adc.w	r3, r2, r3
 80057be:	657b      	str	r3, [r7, #84]	; 0x54
 80057c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057c8:	f7fb fa96 	bl	8000cf8 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b61      	ldr	r3, [pc, #388]	; (8005958 <UART_SetConfig+0x2d4>)
 80057d2:	fba3 2302 	umull	r2, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	011c      	lsls	r4, r3, #4
 80057da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	1891      	adds	r1, r2, r2
 80057f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80057f4:	415b      	adcs	r3, r3
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057fc:	4641      	mov	r1, r8
 80057fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005802:	4649      	mov	r1, r9
 8005804:	eb43 0b01 	adc.w	fp, r3, r1
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800581c:	4692      	mov	sl, r2
 800581e:	469b      	mov	fp, r3
 8005820:	4643      	mov	r3, r8
 8005822:	eb1a 0303 	adds.w	r3, sl, r3
 8005826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800582a:	464b      	mov	r3, r9
 800582c:	eb4b 0303 	adc.w	r3, fp, r3
 8005830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005840:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005848:	460b      	mov	r3, r1
 800584a:	18db      	adds	r3, r3, r3
 800584c:	643b      	str	r3, [r7, #64]	; 0x40
 800584e:	4613      	mov	r3, r2
 8005850:	eb42 0303 	adc.w	r3, r2, r3
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800585a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800585e:	f7fb fa4b 	bl	8000cf8 <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4611      	mov	r1, r2
 8005868:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <UART_SetConfig+0x2d4>)
 800586a:	fba3 2301 	umull	r2, r3, r3, r1
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2264      	movs	r2, #100	; 0x64
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	1acb      	subs	r3, r1, r3
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <UART_SetConfig+0x2d4>)
 8005880:	fba3 2302 	umull	r2, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800588c:	441c      	add	r4, r3
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005892:	2200      	movs	r2, #0
 8005894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800589c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058a8:	415b      	adcs	r3, r3
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058b0:	4641      	mov	r1, r8
 80058b2:	1851      	adds	r1, r2, r1
 80058b4:	6339      	str	r1, [r7, #48]	; 0x30
 80058b6:	4649      	mov	r1, r9
 80058b8:	414b      	adcs	r3, r1
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058c8:	4659      	mov	r1, fp
 80058ca:	00cb      	lsls	r3, r1, #3
 80058cc:	4651      	mov	r1, sl
 80058ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d2:	4651      	mov	r1, sl
 80058d4:	00ca      	lsls	r2, r1, #3
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	4603      	mov	r3, r0
 80058dc:	4642      	mov	r2, r8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	464b      	mov	r3, r9
 80058e6:	460a      	mov	r2, r1
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005904:	460b      	mov	r3, r1
 8005906:	18db      	adds	r3, r3, r3
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
 800590a:	4613      	mov	r3, r2
 800590c:	eb42 0303 	adc.w	r3, r2, r3
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800591a:	f7fb f9ed 	bl	8000cf8 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <UART_SetConfig+0x2d4>)
 8005924:	fba3 1302 	umull	r1, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	2164      	movs	r1, #100	; 0x64
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	3332      	adds	r3, #50	; 0x32
 8005936:	4a08      	ldr	r2, [pc, #32]	; (8005958 <UART_SetConfig+0x2d4>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	f003 0207 	and.w	r2, r3, #7
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4422      	add	r2, r4
 800594a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800594c:	e106      	b.n	8005b5c <UART_SetConfig+0x4d8>
 800594e:	bf00      	nop
 8005950:	40011000 	.word	0x40011000
 8005954:	40011400 	.word	0x40011400
 8005958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005960:	2200      	movs	r2, #0
 8005962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005966:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800596a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	1891      	adds	r1, r2, r2
 8005974:	6239      	str	r1, [r7, #32]
 8005976:	415b      	adcs	r3, r3
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	4641      	mov	r1, r8
 8005980:	1854      	adds	r4, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0501 	adc.w	r5, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059a4:	464b      	mov	r3, r9
 80059a6:	eb45 0303 	adc.w	r3, r5, r3
 80059aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059ca:	4629      	mov	r1, r5
 80059cc:	008b      	lsls	r3, r1, #2
 80059ce:	4621      	mov	r1, r4
 80059d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d4:	4621      	mov	r1, r4
 80059d6:	008a      	lsls	r2, r1, #2
 80059d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059dc:	f7fb f98c 	bl	8000cf8 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b60      	ldr	r3, [pc, #384]	; (8005b68 <UART_SetConfig+0x4e4>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	61b9      	str	r1, [r7, #24]
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6139      	str	r1, [r7, #16]
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a68:	4649      	mov	r1, r9
 8005a6a:	008b      	lsls	r3, r1, #2
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a72:	4641      	mov	r1, r8
 8005a74:	008a      	lsls	r2, r1, #2
 8005a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a7a:	f7fb f93d 	bl	8000cf8 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005a86:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2264      	movs	r2, #100	; 0x64
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	1acb      	subs	r3, r1, r3
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	3332      	adds	r3, #50	; 0x32
 8005a98:	4a33      	ldr	r2, [pc, #204]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa4:	441c      	add	r4, r3
 8005aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aaa:	2200      	movs	r2, #0
 8005aac:	673b      	str	r3, [r7, #112]	; 0x70
 8005aae:	677a      	str	r2, [r7, #116]	; 0x74
 8005ab0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	415b      	adcs	r3, r3
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	1851      	adds	r1, r2, r1
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	4649      	mov	r1, r9
 8005acc:	414b      	adcs	r3, r1
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005adc:	4659      	mov	r1, fp
 8005ade:	00cb      	lsls	r3, r1, #3
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	00ca      	lsls	r2, r1, #3
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	4642      	mov	r2, r8
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005af6:	464b      	mov	r3, r9
 8005af8:	460a      	mov	r2, r1
 8005afa:	eb42 0303 	adc.w	r3, r2, r3
 8005afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	663b      	str	r3, [r7, #96]	; 0x60
 8005b0a:	667a      	str	r2, [r7, #100]	; 0x64
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b18:	4649      	mov	r1, r9
 8005b1a:	008b      	lsls	r3, r1, #2
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b22:	4641      	mov	r1, r8
 8005b24:	008a      	lsls	r2, r1, #2
 8005b26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b2a:	f7fb f8e5 	bl	8000cf8 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005b34:	fba3 1302 	umull	r1, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	2164      	movs	r1, #100	; 0x64
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	3332      	adds	r3, #50	; 0x32
 8005b46:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <UART_SetConfig+0x4e4>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f003 020f 	and.w	r2, r3, #15
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4422      	add	r2, r4
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b62:	46bd      	mov	sp, r7
 8005b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b68:	51eb851f 	.word	0x51eb851f

08005b6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b7e:	2b84      	cmp	r3, #132	; 0x84
 8005b80:	d005      	beq.n	8005b8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ba0:	f000 faf6 	bl	8006190 <vTaskStartScheduler>
  
  return osOK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bac:	b089      	sub	sp, #36	; 0x24
 8005bae:	af04      	add	r7, sp, #16
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <osThreadCreate+0x54>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01c      	beq.n	8005bfe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685c      	ldr	r4, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691e      	ldr	r6, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ffc8 	bl	8005b6c <makeFreeRtosPriority>
 8005bdc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005be6:	9202      	str	r2, [sp, #8]
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	9100      	str	r1, [sp, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f8ed 	bl	8005dd2 <xTaskCreateStatic>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e01c      	b.n	8005c38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685c      	ldr	r4, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff ffaa 	bl	8005b6c <makeFreeRtosPriority>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	9200      	str	r2, [sp, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	4632      	mov	r2, r6
 8005c26:	4629      	mov	r1, r5
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f92f 	bl	8005e8c <xTaskCreate>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d001      	beq.n	8005c38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c42 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <osDelay+0x16>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	e000      	b.n	8005c5a <osDelay+0x18>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fa64 	bl	8006128 <vTaskDelay>
  
  return osOK;
 8005c60:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0208 	add.w	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f103 0208 	add.w	r2, r3, #8
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	d103      	bne.n	8005d2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e00c      	b.n	8005d46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e002      	b.n	8005d3a <vListInsert+0x2e>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d2f6      	bcs.n	8005d34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6892      	ldr	r2, [r2, #8]
 8005d94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6852      	ldr	r2, [r2, #4]
 8005d9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d103      	bne.n	8005db2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b08e      	sub	sp, #56	; 0x38
 8005dd6:	af04      	add	r7, sp, #16
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	61fb      	str	r3, [r7, #28]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e18:	23a0      	movs	r3, #160	; 0xa0
 8005e1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8005e20:	d00a      	beq.n	8005e38 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	61bb      	str	r3, [r7, #24]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <xTaskCreateStatic+0xac>
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01b      	beq.n	8005e7e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f851 	bl	8005f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e78:	f000 f8ec 	bl	8006054 <prvAddNewTaskToReadyList>
 8005e7c:	e001      	b.n	8005e82 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e82:	697b      	ldr	r3, [r7, #20]
	}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af04      	add	r7, sp, #16
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fef1 	bl	8006c88 <pvPortMalloc>
 8005ea6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eae:	20a0      	movs	r0, #160	; 0xa0
 8005eb0:	f000 feea 	bl	8006c88 <pvPortMalloc>
 8005eb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec2:	e005      	b.n	8005ed0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ec4:	6978      	ldr	r0, [r7, #20]
 8005ec6:	f000 ffab 	bl	8006e20 <vPortFree>
 8005eca:	e001      	b.n	8005ed0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f80f 	bl	8005f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	69f8      	ldr	r0, [r7, #28]
 8005efc:	f000 f8aa 	bl	8006054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f00:	2301      	movs	r3, #1
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	e002      	b.n	8005f0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	3b01      	subs	r3, #1
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	617b      	str	r3, [r7, #20]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01f      	beq.n	8005fa6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e012      	b.n	8005f92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	7819      	ldrb	r1, [r3, #0]
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3334      	adds	r3, #52	; 0x34
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d006      	beq.n	8005f9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b0f      	cmp	r3, #15
 8005f96:	d9e9      	bls.n	8005f6c <prvInitialiseNewTask+0x54>
 8005f98:	e000      	b.n	8005f9c <prvInitialiseNewTask+0x84>
			{
				break;
 8005f9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa4:	e003      	b.n	8005fae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	d901      	bls.n	8005fb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fb4:	2306      	movs	r3, #6
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fe6b 	bl	8005caa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fe66 	bl	8005caa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f1c3 0207 	rsb	r2, r3, #7
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	334c      	adds	r3, #76	; 0x4c
 8006008:	224c      	movs	r2, #76	; 0x4c
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fdb0 	bl	8007b72 <memset>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <prvInitialiseNewTask+0x130>)
 8006016:	651a      	str	r2, [r3, #80]	; 0x50
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	4a0c      	ldr	r2, [pc, #48]	; (800604c <prvInitialiseNewTask+0x134>)
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	4a0b      	ldr	r2, [pc, #44]	; (8006050 <prvInitialiseNewTask+0x138>)
 8006022:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	69b8      	ldr	r0, [r7, #24]
 800602a:	f000 fc1f 	bl	800686c <pxPortInitialiseStack>
 800602e:	4602      	mov	r2, r0
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006040:	bf00      	nop
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	200047e8 	.word	0x200047e8
 800604c:	20004850 	.word	0x20004850
 8006050:	200048b8 	.word	0x200048b8

08006054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800605c:	f000 fd32 	bl	8006ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006060:	4b2a      	ldr	r3, [pc, #168]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a29      	ldr	r2, [pc, #164]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 8006068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800606a:	4b29      	ldr	r3, [pc, #164]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006072:	4a27      	ldr	r2, [pc, #156]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <prvAddNewTaskToReadyList+0xb8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d110      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006080:	f000 facc 	bl	800661c <prvInitialiseTaskLists>
 8006084:	e00d      	b.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <prvAddNewTaskToReadyList+0xc0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d802      	bhi.n	80060a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800609c:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <prvAddNewTaskToReadyList+0xc4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <prvAddNewTaskToReadyList+0xc4>)
 80060aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	409a      	lsls	r2, r3
 80060b4:	4b19      	ldr	r3, [pc, #100]	; (800611c <prvAddNewTaskToReadyList+0xc8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	4a18      	ldr	r2, [pc, #96]	; (800611c <prvAddNewTaskToReadyList+0xc8>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4a15      	ldr	r2, [pc, #84]	; (8006120 <prvAddNewTaskToReadyList+0xcc>)
 80060cc:	441a      	add	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7ff fdf5 	bl	8005cc4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060da:	f000 fd23 	bl	8006b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <prvAddNewTaskToReadyList+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e6:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvAddNewTaskToReadyList+0xbc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d207      	bcs.n	8006104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <prvAddNewTaskToReadyList+0xd0>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000b94 	.word	0x20000b94
 8006110:	20000a94 	.word	0x20000a94
 8006114:	20000ba0 	.word	0x20000ba0
 8006118:	20000bb0 	.word	0x20000bb0
 800611c:	20000b9c 	.word	0x20000b9c
 8006120:	20000a98 	.word	0x20000a98
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800613a:	4b13      	ldr	r3, [pc, #76]	; (8006188 <vTaskDelay+0x60>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <vTaskDelay+0x30>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60bb      	str	r3, [r7, #8]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006158:	f000 f884 	bl	8006264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800615c:	2100      	movs	r1, #0
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fb1e 	bl	80067a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006164:	f000 f88c 	bl	8006280 <xTaskResumeAll>
 8006168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d107      	bne.n	8006180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <vTaskDelay+0x64>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000bbc 	.word	0x20000bbc
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800619e:	463a      	mov	r2, r7
 80061a0:	1d39      	adds	r1, r7, #4
 80061a2:	f107 0308 	add.w	r3, r7, #8
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fb fce6 	bl	8001b78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	9202      	str	r2, [sp, #8]
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	460a      	mov	r2, r1
 80061be:	4921      	ldr	r1, [pc, #132]	; (8006244 <vTaskStartScheduler+0xb4>)
 80061c0:	4821      	ldr	r0, [pc, #132]	; (8006248 <vTaskStartScheduler+0xb8>)
 80061c2:	f7ff fe06 	bl	8005dd2 <xTaskCreateStatic>
 80061c6:	4603      	mov	r3, r0
 80061c8:	4a20      	ldr	r2, [pc, #128]	; (800624c <vTaskStartScheduler+0xbc>)
 80061ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061cc:	4b1f      	ldr	r3, [pc, #124]	; (800624c <vTaskStartScheduler+0xbc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e001      	b.n	80061de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d11b      	bne.n	800621c <vTaskStartScheduler+0x8c>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	613b      	str	r3, [r7, #16]
}
 80061f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <vTaskStartScheduler+0xc0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	334c      	adds	r3, #76	; 0x4c
 80061fe:	4a15      	ldr	r2, [pc, #84]	; (8006254 <vTaskStartScheduler+0xc4>)
 8006200:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <vTaskStartScheduler+0xc8>)
 8006204:	f04f 32ff 	mov.w	r2, #4294967295
 8006208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <vTaskStartScheduler+0xcc>)
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <vTaskStartScheduler+0xd0>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006216:	f000 fbb3 	bl	8006980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800621a:	e00e      	b.n	800623a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d10a      	bne.n	800623a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	60fb      	str	r3, [r7, #12]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <vTaskStartScheduler+0xa8>
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	0800ad40 	.word	0x0800ad40
 8006248:	080065ed 	.word	0x080065ed
 800624c:	20000bb8 	.word	0x20000bb8
 8006250:	20000a94 	.word	0x20000a94
 8006254:	20000070 	.word	0x20000070
 8006258:	20000bb4 	.word	0x20000bb4
 800625c:	20000ba0 	.word	0x20000ba0
 8006260:	20000b98 	.word	0x20000b98

08006264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <vTaskSuspendAll+0x18>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	4a03      	ldr	r2, [pc, #12]	; (800627c <vTaskSuspendAll+0x18>)
 8006270:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006272:	bf00      	nop
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000bbc 	.word	0x20000bbc

08006280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800628e:	4b41      	ldr	r3, [pc, #260]	; (8006394 <xTaskResumeAll+0x114>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <xTaskResumeAll+0x2c>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	603b      	str	r3, [r7, #0]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062ac:	f000 fc0a 	bl	8006ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062b0:	4b38      	ldr	r3, [pc, #224]	; (8006394 <xTaskResumeAll+0x114>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4a37      	ldr	r2, [pc, #220]	; (8006394 <xTaskResumeAll+0x114>)
 80062b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ba:	4b36      	ldr	r3, [pc, #216]	; (8006394 <xTaskResumeAll+0x114>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d161      	bne.n	8006386 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062c2:	4b35      	ldr	r3, [pc, #212]	; (8006398 <xTaskResumeAll+0x118>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d05d      	beq.n	8006386 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ca:	e02e      	b.n	800632a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062cc:	4b33      	ldr	r3, [pc, #204]	; (800639c <xTaskResumeAll+0x11c>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3318      	adds	r3, #24
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fd50 	bl	8005d7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fd4b 	bl	8005d7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <xTaskResumeAll+0x120>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <xTaskResumeAll+0x120>)
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <xTaskResumeAll+0x124>)
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3304      	adds	r3, #4
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f7ff fcd7 	bl	8005cc4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631a:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <xTaskResumeAll+0x128>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	429a      	cmp	r2, r3
 8006322:	d302      	bcc.n	800632a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006324:	4b21      	ldr	r3, [pc, #132]	; (80063ac <xTaskResumeAll+0x12c>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632a:	4b1c      	ldr	r3, [pc, #112]	; (800639c <xTaskResumeAll+0x11c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1cc      	bne.n	80062cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006338:	f000 fa12 	bl	8006760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <xTaskResumeAll+0x130>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006348:	f000 f836 	bl	80063b8 <xTaskIncrementTick>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <xTaskResumeAll+0x12c>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3b01      	subs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f1      	bne.n	8006348 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <xTaskResumeAll+0x130>)
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <xTaskResumeAll+0x12c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <xTaskResumeAll+0x134>)
 8006378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006386:	f000 fbcd 	bl	8006b24 <vPortExitCritical>

	return xAlreadyYielded;
 800638a:	68bb      	ldr	r3, [r7, #8]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000bbc 	.word	0x20000bbc
 8006398:	20000b94 	.word	0x20000b94
 800639c:	20000b54 	.word	0x20000b54
 80063a0:	20000b9c 	.word	0x20000b9c
 80063a4:	20000a98 	.word	0x20000a98
 80063a8:	20000a94 	.word	0x20000a94
 80063ac:	20000ba8 	.word	0x20000ba8
 80063b0:	20000ba4 	.word	0x20000ba4
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <xTaskIncrementTick+0x144>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 808e 	bne.w	80064e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063cc:	4b4c      	ldr	r3, [pc, #304]	; (8006500 <xTaskIncrementTick+0x148>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063d4:	4a4a      	ldr	r2, [pc, #296]	; (8006500 <xTaskIncrementTick+0x148>)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d120      	bne.n	8006422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063e0:	4b48      	ldr	r3, [pc, #288]	; (8006504 <xTaskIncrementTick+0x14c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	603b      	str	r3, [r7, #0]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <xTaskIncrementTick+0x46>
 8006400:	4b40      	ldr	r3, [pc, #256]	; (8006504 <xTaskIncrementTick+0x14c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	4b40      	ldr	r3, [pc, #256]	; (8006508 <xTaskIncrementTick+0x150>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3e      	ldr	r2, [pc, #248]	; (8006504 <xTaskIncrementTick+0x14c>)
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	4a3e      	ldr	r2, [pc, #248]	; (8006508 <xTaskIncrementTick+0x150>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b3d      	ldr	r3, [pc, #244]	; (800650c <xTaskIncrementTick+0x154>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a3c      	ldr	r2, [pc, #240]	; (800650c <xTaskIncrementTick+0x154>)
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	f000 f99f 	bl	8006760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006422:	4b3b      	ldr	r3, [pc, #236]	; (8006510 <xTaskIncrementTick+0x158>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d348      	bcc.n	80064be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800642c:	4b35      	ldr	r3, [pc, #212]	; (8006504 <xTaskIncrementTick+0x14c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006436:	4b36      	ldr	r3, [pc, #216]	; (8006510 <xTaskIncrementTick+0x158>)
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	601a      	str	r2, [r3, #0]
					break;
 800643e:	e03e      	b.n	80064be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006440:	4b30      	ldr	r3, [pc, #192]	; (8006504 <xTaskIncrementTick+0x14c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d203      	bcs.n	8006460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006458:	4a2d      	ldr	r2, [pc, #180]	; (8006510 <xTaskIncrementTick+0x158>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800645e:	e02e      	b.n	80064be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fc8a 	bl	8005d7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3318      	adds	r3, #24
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fc81 	bl	8005d7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	409a      	lsls	r2, r3
 8006484:	4b23      	ldr	r3, [pc, #140]	; (8006514 <xTaskIncrementTick+0x15c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4313      	orrs	r3, r2
 800648a:	4a22      	ldr	r2, [pc, #136]	; (8006514 <xTaskIncrementTick+0x15c>)
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <xTaskIncrementTick+0x160>)
 800649c:	441a      	add	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f7ff fc0d 	bl	8005cc4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <xTaskIncrementTick+0x164>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d3b9      	bcc.n	800642c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064bc:	e7b6      	b.n	800642c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064be:	4b17      	ldr	r3, [pc, #92]	; (800651c <xTaskIncrementTick+0x164>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4914      	ldr	r1, [pc, #80]	; (8006518 <xTaskIncrementTick+0x160>)
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d901      	bls.n	80064da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <xTaskIncrementTick+0x168>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e004      	b.n	80064f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <xTaskIncrementTick+0x16c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <xTaskIncrementTick+0x16c>)
 80064f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000bbc 	.word	0x20000bbc
 8006500:	20000b98 	.word	0x20000b98
 8006504:	20000b4c 	.word	0x20000b4c
 8006508:	20000b50 	.word	0x20000b50
 800650c:	20000bac 	.word	0x20000bac
 8006510:	20000bb4 	.word	0x20000bb4
 8006514:	20000b9c 	.word	0x20000b9c
 8006518:	20000a98 	.word	0x20000a98
 800651c:	20000a94 	.word	0x20000a94
 8006520:	20000ba8 	.word	0x20000ba8
 8006524:	20000ba4 	.word	0x20000ba4

08006528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <vTaskSwitchContext+0xac>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006536:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <vTaskSwitchContext+0xb0>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800653c:	e044      	b.n	80065c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800653e:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <vTaskSwitchContext+0xb0>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <vTaskSwitchContext+0xb4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	fab3 f383 	clz	r3, r3
 8006550:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	f1c3 031f 	rsb	r3, r3, #31
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	4921      	ldr	r1, [pc, #132]	; (80065e0 <vTaskSwitchContext+0xb8>)
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <vTaskSwitchContext+0x5c>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vTaskSwitchContext+0x5a>
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <vTaskSwitchContext+0xb8>)
 8006590:	4413      	add	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3308      	adds	r3, #8
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d104      	bne.n	80065b4 <vTaskSwitchContext+0x8c>
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	4a0a      	ldr	r2, [pc, #40]	; (80065e4 <vTaskSwitchContext+0xbc>)
 80065bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <vTaskSwitchContext+0xbc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	334c      	adds	r3, #76	; 0x4c
 80065c4:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <vTaskSwitchContext+0xc0>)
 80065c6:	6013      	str	r3, [r2, #0]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20000bbc 	.word	0x20000bbc
 80065d8:	20000ba8 	.word	0x20000ba8
 80065dc:	20000b9c 	.word	0x20000b9c
 80065e0:	20000a98 	.word	0x20000a98
 80065e4:	20000a94 	.word	0x20000a94
 80065e8:	20000070 	.word	0x20000070

080065ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f4:	f000 f852 	bl	800669c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <prvIdleTask+0x28>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d9f9      	bls.n	80065f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <prvIdleTask+0x2c>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006610:	e7f0      	b.n	80065f4 <prvIdleTask+0x8>
 8006612:	bf00      	nop
 8006614:	20000a98 	.word	0x20000a98
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e00c      	b.n	8006642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a12      	ldr	r2, [pc, #72]	; (800667c <prvInitialiseTaskLists+0x60>)
 8006634:	4413      	add	r3, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fb17 	bl	8005c6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3301      	adds	r3, #1
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b06      	cmp	r3, #6
 8006646:	d9ef      	bls.n	8006628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006648:	480d      	ldr	r0, [pc, #52]	; (8006680 <prvInitialiseTaskLists+0x64>)
 800664a:	f7ff fb0e 	bl	8005c6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800664e:	480d      	ldr	r0, [pc, #52]	; (8006684 <prvInitialiseTaskLists+0x68>)
 8006650:	f7ff fb0b 	bl	8005c6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006654:	480c      	ldr	r0, [pc, #48]	; (8006688 <prvInitialiseTaskLists+0x6c>)
 8006656:	f7ff fb08 	bl	8005c6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800665a:	480c      	ldr	r0, [pc, #48]	; (800668c <prvInitialiseTaskLists+0x70>)
 800665c:	f7ff fb05 	bl	8005c6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006660:	480b      	ldr	r0, [pc, #44]	; (8006690 <prvInitialiseTaskLists+0x74>)
 8006662:	f7ff fb02 	bl	8005c6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006666:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <prvInitialiseTaskLists+0x78>)
 8006668:	4a05      	ldr	r2, [pc, #20]	; (8006680 <prvInitialiseTaskLists+0x64>)
 800666a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvInitialiseTaskLists+0x7c>)
 800666e:	4a05      	ldr	r2, [pc, #20]	; (8006684 <prvInitialiseTaskLists+0x68>)
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000a98 	.word	0x20000a98
 8006680:	20000b24 	.word	0x20000b24
 8006684:	20000b38 	.word	0x20000b38
 8006688:	20000b54 	.word	0x20000b54
 800668c:	20000b68 	.word	0x20000b68
 8006690:	20000b80 	.word	0x20000b80
 8006694:	20000b4c 	.word	0x20000b4c
 8006698:	20000b50 	.word	0x20000b50

0800669c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066a2:	e019      	b.n	80066d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066a4:	f000 fa0e 	bl	8006ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <prvCheckTasksWaitingTermination+0x50>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fb62 	bl	8005d7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a0b      	ldr	r2, [pc, #44]	; (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ce:	f000 fa29 	bl	8006b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f810 	bl	80066f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e1      	bne.n	80066a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000b68 	.word	0x20000b68
 80066f0:	20000b94 	.word	0x20000b94
 80066f4:	20000b7c 	.word	0x20000b7c

080066f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	334c      	adds	r3, #76	; 0x4c
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fa51 	bl	8007bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006710:	2b00      	cmp	r3, #0
 8006712:	d108      	bne.n	8006726 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fb81 	bl	8006e20 <vPortFree>
				vPortFree( pxTCB );
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fb7e 	bl	8006e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006724:	e018      	b.n	8006758 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800672c:	2b01      	cmp	r3, #1
 800672e:	d103      	bne.n	8006738 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fb75 	bl	8006e20 <vPortFree>
	}
 8006736:	e00f      	b.n	8006758 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800673e:	2b02      	cmp	r3, #2
 8006740:	d00a      	beq.n	8006758 <prvDeleteTCB+0x60>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <prvDeleteTCB+0x5e>
	}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <prvResetNextTaskUnblockTime+0x38>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <prvResetNextTaskUnblockTime+0x3c>)
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006778:	e008      	b.n	800678c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <prvResetNextTaskUnblockTime+0x38>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <prvResetNextTaskUnblockTime+0x3c>)
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20000b4c 	.word	0x20000b4c
 800679c:	20000bb4 	.word	0x20000bb4

080067a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fae1 	bl	8005d7e <uxListRemove>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	2201      	movs	r2, #1
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	43da      	mvns	r2, r3
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4013      	ands	r3, r2
 80067d6:	4a20      	ldr	r2, [pc, #128]	; (8006858 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d10a      	bne.n	80067f8 <prvAddCurrentTaskToDelayedList+0x58>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	481a      	ldr	r0, [pc, #104]	; (800685c <prvAddCurrentTaskToDelayedList+0xbc>)
 80067f2:	f7ff fa67 	bl	8005cc4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067f6:	e026      	b.n	8006846 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	d209      	bcs.n	8006824 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7ff fa75 	bl	8005d0c <vListInsert>
}
 8006822:	e010      	b.n	8006846 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7ff fa6b 	bl	8005d0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d202      	bcs.n	8006846 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006840:	4a09      	ldr	r2, [pc, #36]	; (8006868 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6013      	str	r3, [r2, #0]
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000b98 	.word	0x20000b98
 8006854:	20000a94 	.word	0x20000a94
 8006858:	20000b9c 	.word	0x20000b9c
 800685c:	20000b80 	.word	0x20000b80
 8006860:	20000b50 	.word	0x20000b50
 8006864:	20000b4c 	.word	0x20000b4c
 8006868:	20000bb4 	.word	0x20000bb4

0800686c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3b04      	subs	r3, #4
 800687c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b04      	subs	r3, #4
 800688a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3b04      	subs	r3, #4
 800689a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800689c:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <pxPortInitialiseStack+0x64>)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3b14      	subs	r3, #20
 80068a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f06f 0202 	mvn.w	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b20      	subs	r3, #32
 80068c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068c2:	68fb      	ldr	r3, [r7, #12]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	080068d5 	.word	0x080068d5

080068d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068de:	4b12      	ldr	r3, [pc, #72]	; (8006928 <prvTaskExitError+0x54>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d00a      	beq.n	80068fe <prvTaskExitError+0x2a>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60fb      	str	r3, [r7, #12]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <prvTaskExitError+0x28>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60bb      	str	r3, [r7, #8]
}
 8006910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006912:	bf00      	nop
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0fc      	beq.n	8006914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	20000014 	.word	0x20000014
 800692c:	00000000 	.word	0x00000000

08006930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <pxCurrentTCBConst2>)
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	6808      	ldr	r0, [r1, #0]
 8006936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	f380 8809 	msr	PSP, r0
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8811 	msr	BASEPRI, r0
 800694a:	4770      	bx	lr
 800694c:	f3af 8000 	nop.w

08006950 <pxCurrentTCBConst2>:
 8006950:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006958:	4808      	ldr	r0, [pc, #32]	; (800697c <prvPortStartFirstTask+0x24>)
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f380 8808 	msr	MSP, r0
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f380 8814 	msr	CONTROL, r0
 800696a:	b662      	cpsie	i
 800696c:	b661      	cpsie	f
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	df00      	svc	0
 8006978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800697a:	bf00      	nop
 800697c:	e000ed08 	.word	0xe000ed08

08006980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006986:	4b46      	ldr	r3, [pc, #280]	; (8006aa0 <xPortStartScheduler+0x120>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a46      	ldr	r2, [pc, #280]	; (8006aa4 <xPortStartScheduler+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10a      	bne.n	80069a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069a6:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <xPortStartScheduler+0x120>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3f      	ldr	r2, [pc, #252]	; (8006aa8 <xPortStartScheduler+0x128>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10a      	bne.n	80069c6 <xPortStartScheduler+0x46>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069c6:	4b39      	ldr	r3, [pc, #228]	; (8006aac <xPortStartScheduler+0x12c>)
 80069c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	22ff      	movs	r2, #255	; 0xff
 80069d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4b31      	ldr	r3, [pc, #196]	; (8006ab0 <xPortStartScheduler+0x130>)
 80069ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069ee:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <xPortStartScheduler+0x134>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f4:	e009      	b.n	8006a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80069f6:	4b2f      	ldr	r3, [pc, #188]	; (8006ab4 <xPortStartScheduler+0x134>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4a2d      	ldr	r2, [pc, #180]	; (8006ab4 <xPortStartScheduler+0x134>)
 80069fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a0a:	78fb      	ldrb	r3, [r7, #3]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a12:	2b80      	cmp	r3, #128	; 0x80
 8006a14:	d0ef      	beq.n	80069f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a16:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <xPortStartScheduler+0x134>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1c3 0307 	rsb	r3, r3, #7
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d00a      	beq.n	8006a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60bb      	str	r3, [r7, #8]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a38:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <xPortStartScheduler+0x134>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <xPortStartScheduler+0x134>)
 8006a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <xPortStartScheduler+0x134>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a4a:	4a1a      	ldr	r2, [pc, #104]	; (8006ab4 <xPortStartScheduler+0x134>)
 8006a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a56:	4b18      	ldr	r3, [pc, #96]	; (8006ab8 <xPortStartScheduler+0x138>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <xPortStartScheduler+0x138>)
 8006a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <xPortStartScheduler+0x138>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <xPortStartScheduler+0x138>)
 8006a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a6e:	f000 f8dd 	bl	8006c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a72:	4b12      	ldr	r3, [pc, #72]	; (8006abc <xPortStartScheduler+0x13c>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a78:	f000 f8fc 	bl	8006c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a7c:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <xPortStartScheduler+0x140>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0f      	ldr	r2, [pc, #60]	; (8006ac0 <xPortStartScheduler+0x140>)
 8006a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a88:	f7ff ff66 	bl	8006958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a8c:	f7ff fd4c 	bl	8006528 <vTaskSwitchContext>
	prvTaskExitError();
 8006a90:	f7ff ff20 	bl	80068d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	e000ed00 	.word	0xe000ed00
 8006aa4:	410fc271 	.word	0x410fc271
 8006aa8:	410fc270 	.word	0x410fc270
 8006aac:	e000e400 	.word	0xe000e400
 8006ab0:	20000bc0 	.word	0x20000bc0
 8006ab4:	20000bc4 	.word	0x20000bc4
 8006ab8:	e000ed20 	.word	0xe000ed20
 8006abc:	20000014 	.word	0x20000014
 8006ac0:	e000ef34 	.word	0xe000ef34

08006ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	607b      	str	r3, [r7, #4]
}
 8006adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <vPortEnterCritical+0x58>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a0d      	ldr	r2, [pc, #52]	; (8006b1c <vPortEnterCritical+0x58>)
 8006ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <vPortEnterCritical+0x58>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d10f      	bne.n	8006b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <vPortEnterCritical+0x5c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <vPortEnterCritical+0x4a>
	}
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000014 	.word	0x20000014
 8006b20:	e000ed04 	.word	0xe000ed04

08006b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <vPortExitCritical+0x50>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <vPortExitCritical+0x24>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	607b      	str	r3, [r7, #4]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <vPortExitCritical+0x50>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <vPortExitCritical+0x50>)
 8006b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b52:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <vPortExitCritical+0x50>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <vPortExitCritical+0x42>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000014 	.word	0x20000014
	...

08006b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b80:	f3ef 8009 	mrs	r0, PSP
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <pxCurrentTCBConst>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f01e 0f10 	tst.w	lr, #16
 8006b90:	bf08      	it	eq
 8006b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9a:	6010      	str	r0, [r2, #0]
 8006b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ba4:	f380 8811 	msr	BASEPRI, r0
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f7ff fcba 	bl	8006528 <vTaskSwitchContext>
 8006bb4:	f04f 0000 	mov.w	r0, #0
 8006bb8:	f380 8811 	msr	BASEPRI, r0
 8006bbc:	bc09      	pop	{r0, r3}
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	6808      	ldr	r0, [r1, #0]
 8006bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc6:	f01e 0f10 	tst.w	lr, #16
 8006bca:	bf08      	it	eq
 8006bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bd0:	f380 8809 	msr	PSP, r0
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst>:
 8006be0:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c02:	f7ff fbd9 	bl	80063b8 <xTaskIncrementTick>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <SysTick_Handler+0x40>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
}
 8006c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <vPortSetupTimerInterrupt+0x34>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <vPortSetupTimerInterrupt+0x38>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <vPortSetupTimerInterrupt+0x3c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <vPortSetupTimerInterrupt+0x40>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <vPortSetupTimerInterrupt+0x44>)
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c4e:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <vPortSetupTimerInterrupt+0x34>)
 8006c50:	2207      	movs	r2, #7
 8006c52:	601a      	str	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	e000e010 	.word	0xe000e010
 8006c64:	e000e018 	.word	0xe000e018
 8006c68:	20000008 	.word	0x20000008
 8006c6c:	10624dd3 	.word	0x10624dd3
 8006c70:	e000e014 	.word	0xe000e014

08006c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c84 <vPortEnableVFP+0x10>
 8006c78:	6801      	ldr	r1, [r0, #0]
 8006c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c7e:	6001      	str	r1, [r0, #0]
 8006c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c82:	bf00      	nop
 8006c84:	e000ed88 	.word	0xe000ed88

08006c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c94:	f7ff fae6 	bl	8006264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c98:	4b5b      	ldr	r3, [pc, #364]	; (8006e08 <pvPortMalloc+0x180>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ca0:	f000 f920 	bl	8006ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ca4:	4b59      	ldr	r3, [pc, #356]	; (8006e0c <pvPortMalloc+0x184>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 8093 	bne.w	8006dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01d      	beq.n	8006cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cb8:	2208      	movs	r2, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	617b      	str	r3, [r7, #20]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d06e      	beq.n	8006dd8 <pvPortMalloc+0x150>
 8006cfa:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <pvPortMalloc+0x188>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d869      	bhi.n	8006dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d04:	4b43      	ldr	r3, [pc, #268]	; (8006e14 <pvPortMalloc+0x18c>)
 8006d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d08:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <pvPortMalloc+0x18c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d0e:	e004      	b.n	8006d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d903      	bls.n	8006d2c <pvPortMalloc+0xa4>
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f1      	bne.n	8006d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <pvPortMalloc+0x180>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d050      	beq.n	8006dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1ad2      	subs	r2, r2, r3
 8006d50:	2308      	movs	r3, #8
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d91f      	bls.n	8006d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <pvPortMalloc+0xf8>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	613b      	str	r3, [r7, #16]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d92:	69b8      	ldr	r0, [r7, #24]
 8006d94:	f000 f908 	bl	8006fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <pvPortMalloc+0x188>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <pvPortMalloc+0x188>)
 8006da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <pvPortMalloc+0x188>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <pvPortMalloc+0x190>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d203      	bcs.n	8006dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <pvPortMalloc+0x188>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <pvPortMalloc+0x190>)
 8006db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <pvPortMalloc+0x184>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <pvPortMalloc+0x194>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <pvPortMalloc+0x194>)
 8006dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dd8:	f7ff fa52 	bl	8006280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <pvPortMalloc+0x174>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <pvPortMalloc+0x172>
	return pvReturn;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3728      	adds	r7, #40	; 0x28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200047d0 	.word	0x200047d0
 8006e0c:	200047e4 	.word	0x200047e4
 8006e10:	200047d4 	.word	0x200047d4
 8006e14:	200047c8 	.word	0x200047c8
 8006e18:	200047d8 	.word	0x200047d8
 8006e1c:	200047dc 	.word	0x200047dc

08006e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d04d      	beq.n	8006ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e32:	2308      	movs	r3, #8
 8006e34:	425b      	negs	r3, r3
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <vPortFree+0xb8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <vPortFree+0x44>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60fb      	str	r3, [r7, #12]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <vPortFree+0x62>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60bb      	str	r3, [r7, #8]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <vPortFree+0xb8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01e      	beq.n	8006ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11a      	bne.n	8006ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <vPortFree+0xb8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ea8:	f7ff f9dc 	bl	8006264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <vPortFree+0xbc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <vPortFree+0xbc>)
 8006eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eba:	6938      	ldr	r0, [r7, #16]
 8006ebc:	f000 f874 	bl	8006fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vPortFree+0xc0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vPortFree+0xc0>)
 8006ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eca:	f7ff f9d9 	bl	8006280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ece:	bf00      	nop
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200047e4 	.word	0x200047e4
 8006edc:	200047d4 	.word	0x200047d4
 8006ee0:	200047e0 	.word	0x200047e0

08006ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <prvHeapInit+0xac>)
 8006ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3307      	adds	r3, #7
 8006f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <prvHeapInit+0xac>)
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <prvHeapInit+0xb0>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <prvHeapInit+0xb0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f30:	2208      	movs	r2, #8
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <prvHeapInit+0xb4>)
 8006f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvHeapInit+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvHeapInit+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvHeapInit+0xb4>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <prvHeapInit+0xb8>)
 8006f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <prvHeapInit+0xbc>)
 8006f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <prvHeapInit+0xc0>)
 8006f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000bc8 	.word	0x20000bc8
 8006f94:	200047c8 	.word	0x200047c8
 8006f98:	200047d0 	.word	0x200047d0
 8006f9c:	200047d8 	.word	0x200047d8
 8006fa0:	200047d4 	.word	0x200047d4
 8006fa4:	200047e4 	.word	0x200047e4

08006fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <prvInsertBlockIntoFreeList+0xac>)
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e002      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x14>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d8f7      	bhi.n	8006fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d108      	bne.n	8006fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d118      	bne.n	8007030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d00d      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e008      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d002      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	200047c8 	.word	0x200047c8
 8007058:	200047d0 	.word	0x200047d0

0800705c <__cvt>:
 800705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	ec55 4b10 	vmov	r4, r5, d0
 8007064:	2d00      	cmp	r5, #0
 8007066:	460e      	mov	r6, r1
 8007068:	4619      	mov	r1, r3
 800706a:	462b      	mov	r3, r5
 800706c:	bfbb      	ittet	lt
 800706e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007072:	461d      	movlt	r5, r3
 8007074:	2300      	movge	r3, #0
 8007076:	232d      	movlt	r3, #45	; 0x2d
 8007078:	700b      	strb	r3, [r1, #0]
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007080:	4691      	mov	r9, r2
 8007082:	f023 0820 	bic.w	r8, r3, #32
 8007086:	bfbc      	itt	lt
 8007088:	4622      	movlt	r2, r4
 800708a:	4614      	movlt	r4, r2
 800708c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007090:	d005      	beq.n	800709e <__cvt+0x42>
 8007092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007096:	d100      	bne.n	800709a <__cvt+0x3e>
 8007098:	3601      	adds	r6, #1
 800709a:	2102      	movs	r1, #2
 800709c:	e000      	b.n	80070a0 <__cvt+0x44>
 800709e:	2103      	movs	r1, #3
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	ab02      	add	r3, sp, #8
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	ec45 4b10 	vmov	d0, r4, r5
 80070ac:	4653      	mov	r3, sl
 80070ae:	4632      	mov	r2, r6
 80070b0:	f000 fece 	bl	8007e50 <_dtoa_r>
 80070b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070b8:	4607      	mov	r7, r0
 80070ba:	d102      	bne.n	80070c2 <__cvt+0x66>
 80070bc:	f019 0f01 	tst.w	r9, #1
 80070c0:	d022      	beq.n	8007108 <__cvt+0xac>
 80070c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070c6:	eb07 0906 	add.w	r9, r7, r6
 80070ca:	d110      	bne.n	80070ee <__cvt+0x92>
 80070cc:	783b      	ldrb	r3, [r7, #0]
 80070ce:	2b30      	cmp	r3, #48	; 0x30
 80070d0:	d10a      	bne.n	80070e8 <__cvt+0x8c>
 80070d2:	2200      	movs	r2, #0
 80070d4:	2300      	movs	r3, #0
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80070de:	b918      	cbnz	r0, 80070e8 <__cvt+0x8c>
 80070e0:	f1c6 0601 	rsb	r6, r6, #1
 80070e4:	f8ca 6000 	str.w	r6, [sl]
 80070e8:	f8da 3000 	ldr.w	r3, [sl]
 80070ec:	4499      	add	r9, r3
 80070ee:	2200      	movs	r2, #0
 80070f0:	2300      	movs	r3, #0
 80070f2:	4620      	mov	r0, r4
 80070f4:	4629      	mov	r1, r5
 80070f6:	f7f9 fcef 	bl	8000ad8 <__aeabi_dcmpeq>
 80070fa:	b108      	cbz	r0, 8007100 <__cvt+0xa4>
 80070fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007100:	2230      	movs	r2, #48	; 0x30
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	454b      	cmp	r3, r9
 8007106:	d307      	bcc.n	8007118 <__cvt+0xbc>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800710c:	1bdb      	subs	r3, r3, r7
 800710e:	4638      	mov	r0, r7
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	b004      	add	sp, #16
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	1c59      	adds	r1, r3, #1
 800711a:	9103      	str	r1, [sp, #12]
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e7f0      	b.n	8007102 <__cvt+0xa6>

08007120 <__exponent>:
 8007120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007122:	4603      	mov	r3, r0
 8007124:	2900      	cmp	r1, #0
 8007126:	bfb8      	it	lt
 8007128:	4249      	neglt	r1, r1
 800712a:	f803 2b02 	strb.w	r2, [r3], #2
 800712e:	bfb4      	ite	lt
 8007130:	222d      	movlt	r2, #45	; 0x2d
 8007132:	222b      	movge	r2, #43	; 0x2b
 8007134:	2909      	cmp	r1, #9
 8007136:	7042      	strb	r2, [r0, #1]
 8007138:	dd2a      	ble.n	8007190 <__exponent+0x70>
 800713a:	f10d 0207 	add.w	r2, sp, #7
 800713e:	4617      	mov	r7, r2
 8007140:	260a      	movs	r6, #10
 8007142:	4694      	mov	ip, r2
 8007144:	fb91 f5f6 	sdiv	r5, r1, r6
 8007148:	fb06 1415 	mls	r4, r6, r5, r1
 800714c:	3430      	adds	r4, #48	; 0x30
 800714e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007152:	460c      	mov	r4, r1
 8007154:	2c63      	cmp	r4, #99	; 0x63
 8007156:	f102 32ff 	add.w	r2, r2, #4294967295
 800715a:	4629      	mov	r1, r5
 800715c:	dcf1      	bgt.n	8007142 <__exponent+0x22>
 800715e:	3130      	adds	r1, #48	; 0x30
 8007160:	f1ac 0402 	sub.w	r4, ip, #2
 8007164:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007168:	1c41      	adds	r1, r0, #1
 800716a:	4622      	mov	r2, r4
 800716c:	42ba      	cmp	r2, r7
 800716e:	d30a      	bcc.n	8007186 <__exponent+0x66>
 8007170:	f10d 0209 	add.w	r2, sp, #9
 8007174:	eba2 020c 	sub.w	r2, r2, ip
 8007178:	42bc      	cmp	r4, r7
 800717a:	bf88      	it	hi
 800717c:	2200      	movhi	r2, #0
 800717e:	4413      	add	r3, r2
 8007180:	1a18      	subs	r0, r3, r0
 8007182:	b003      	add	sp, #12
 8007184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800718a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800718e:	e7ed      	b.n	800716c <__exponent+0x4c>
 8007190:	2330      	movs	r3, #48	; 0x30
 8007192:	3130      	adds	r1, #48	; 0x30
 8007194:	7083      	strb	r3, [r0, #2]
 8007196:	70c1      	strb	r1, [r0, #3]
 8007198:	1d03      	adds	r3, r0, #4
 800719a:	e7f1      	b.n	8007180 <__exponent+0x60>

0800719c <_printf_float>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	ed2d 8b02 	vpush	{d8}
 80071a4:	b08d      	sub	sp, #52	; 0x34
 80071a6:	460c      	mov	r4, r1
 80071a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071ac:	4616      	mov	r6, r2
 80071ae:	461f      	mov	r7, r3
 80071b0:	4605      	mov	r5, r0
 80071b2:	f000 fce7 	bl	8007b84 <_localeconv_r>
 80071b6:	f8d0 a000 	ldr.w	sl, [r0]
 80071ba:	4650      	mov	r0, sl
 80071bc:	f7f9 f860 	bl	8000280 <strlen>
 80071c0:	2300      	movs	r3, #0
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	9305      	str	r3, [sp, #20]
 80071c8:	f8d8 3000 	ldr.w	r3, [r8]
 80071cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071d0:	3307      	adds	r3, #7
 80071d2:	f023 0307 	bic.w	r3, r3, #7
 80071d6:	f103 0208 	add.w	r2, r3, #8
 80071da:	f8c8 2000 	str.w	r2, [r8]
 80071de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80071ec:	ee08 0a10 	vmov	s16, r0
 80071f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80071f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071f8:	4b9e      	ldr	r3, [pc, #632]	; (8007474 <_printf_float+0x2d8>)
 80071fa:	f04f 32ff 	mov.w	r2, #4294967295
 80071fe:	f7f9 fc9d 	bl	8000b3c <__aeabi_dcmpun>
 8007202:	bb88      	cbnz	r0, 8007268 <_printf_float+0xcc>
 8007204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007208:	4b9a      	ldr	r3, [pc, #616]	; (8007474 <_printf_float+0x2d8>)
 800720a:	f04f 32ff 	mov.w	r2, #4294967295
 800720e:	f7f9 fc77 	bl	8000b00 <__aeabi_dcmple>
 8007212:	bb48      	cbnz	r0, 8007268 <_printf_float+0xcc>
 8007214:	2200      	movs	r2, #0
 8007216:	2300      	movs	r3, #0
 8007218:	4640      	mov	r0, r8
 800721a:	4649      	mov	r1, r9
 800721c:	f7f9 fc66 	bl	8000aec <__aeabi_dcmplt>
 8007220:	b110      	cbz	r0, 8007228 <_printf_float+0x8c>
 8007222:	232d      	movs	r3, #45	; 0x2d
 8007224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007228:	4a93      	ldr	r2, [pc, #588]	; (8007478 <_printf_float+0x2dc>)
 800722a:	4b94      	ldr	r3, [pc, #592]	; (800747c <_printf_float+0x2e0>)
 800722c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007230:	bf94      	ite	ls
 8007232:	4690      	movls	r8, r2
 8007234:	4698      	movhi	r8, r3
 8007236:	2303      	movs	r3, #3
 8007238:	6123      	str	r3, [r4, #16]
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f04f 0900 	mov.w	r9, #0
 8007246:	9700      	str	r7, [sp, #0]
 8007248:	4633      	mov	r3, r6
 800724a:	aa0b      	add	r2, sp, #44	; 0x2c
 800724c:	4621      	mov	r1, r4
 800724e:	4628      	mov	r0, r5
 8007250:	f000 f9da 	bl	8007608 <_printf_common>
 8007254:	3001      	adds	r0, #1
 8007256:	f040 8090 	bne.w	800737a <_printf_float+0x1de>
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	b00d      	add	sp, #52	; 0x34
 8007260:	ecbd 8b02 	vpop	{d8}
 8007264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f9 fc64 	bl	8000b3c <__aeabi_dcmpun>
 8007274:	b140      	cbz	r0, 8007288 <_printf_float+0xec>
 8007276:	464b      	mov	r3, r9
 8007278:	2b00      	cmp	r3, #0
 800727a:	bfbc      	itt	lt
 800727c:	232d      	movlt	r3, #45	; 0x2d
 800727e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007282:	4a7f      	ldr	r2, [pc, #508]	; (8007480 <_printf_float+0x2e4>)
 8007284:	4b7f      	ldr	r3, [pc, #508]	; (8007484 <_printf_float+0x2e8>)
 8007286:	e7d1      	b.n	800722c <_printf_float+0x90>
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800728e:	9206      	str	r2, [sp, #24]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	d13f      	bne.n	8007314 <_printf_float+0x178>
 8007294:	2306      	movs	r3, #6
 8007296:	6063      	str	r3, [r4, #4]
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	6861      	ldr	r1, [r4, #4]
 800729c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072a0:	2300      	movs	r3, #0
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	ab0a      	add	r3, sp, #40	; 0x28
 80072a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072aa:	ab09      	add	r3, sp, #36	; 0x24
 80072ac:	ec49 8b10 	vmov	d0, r8, r9
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7ff fecf 	bl	800705c <__cvt>
 80072be:	9b06      	ldr	r3, [sp, #24]
 80072c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c2:	2b47      	cmp	r3, #71	; 0x47
 80072c4:	4680      	mov	r8, r0
 80072c6:	d108      	bne.n	80072da <_printf_float+0x13e>
 80072c8:	1cc8      	adds	r0, r1, #3
 80072ca:	db02      	blt.n	80072d2 <_printf_float+0x136>
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	dd41      	ble.n	8007356 <_printf_float+0x1ba>
 80072d2:	f1ab 0302 	sub.w	r3, fp, #2
 80072d6:	fa5f fb83 	uxtb.w	fp, r3
 80072da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072de:	d820      	bhi.n	8007322 <_printf_float+0x186>
 80072e0:	3901      	subs	r1, #1
 80072e2:	465a      	mov	r2, fp
 80072e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072e8:	9109      	str	r1, [sp, #36]	; 0x24
 80072ea:	f7ff ff19 	bl	8007120 <__exponent>
 80072ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072f0:	1813      	adds	r3, r2, r0
 80072f2:	2a01      	cmp	r2, #1
 80072f4:	4681      	mov	r9, r0
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	dc02      	bgt.n	8007300 <_printf_float+0x164>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	07d2      	lsls	r2, r2, #31
 80072fe:	d501      	bpl.n	8007304 <_printf_float+0x168>
 8007300:	3301      	adds	r3, #1
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007308:	2b00      	cmp	r3, #0
 800730a:	d09c      	beq.n	8007246 <_printf_float+0xaa>
 800730c:	232d      	movs	r3, #45	; 0x2d
 800730e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007312:	e798      	b.n	8007246 <_printf_float+0xaa>
 8007314:	9a06      	ldr	r2, [sp, #24]
 8007316:	2a47      	cmp	r2, #71	; 0x47
 8007318:	d1be      	bne.n	8007298 <_printf_float+0xfc>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1bc      	bne.n	8007298 <_printf_float+0xfc>
 800731e:	2301      	movs	r3, #1
 8007320:	e7b9      	b.n	8007296 <_printf_float+0xfa>
 8007322:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007326:	d118      	bne.n	800735a <_printf_float+0x1be>
 8007328:	2900      	cmp	r1, #0
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	dd0b      	ble.n	8007346 <_printf_float+0x1aa>
 800732e:	6121      	str	r1, [r4, #16]
 8007330:	b913      	cbnz	r3, 8007338 <_printf_float+0x19c>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	07d0      	lsls	r0, r2, #31
 8007336:	d502      	bpl.n	800733e <_printf_float+0x1a2>
 8007338:	3301      	adds	r3, #1
 800733a:	440b      	add	r3, r1
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007340:	f04f 0900 	mov.w	r9, #0
 8007344:	e7de      	b.n	8007304 <_printf_float+0x168>
 8007346:	b913      	cbnz	r3, 800734e <_printf_float+0x1b2>
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	07d2      	lsls	r2, r2, #31
 800734c:	d501      	bpl.n	8007352 <_printf_float+0x1b6>
 800734e:	3302      	adds	r3, #2
 8007350:	e7f4      	b.n	800733c <_printf_float+0x1a0>
 8007352:	2301      	movs	r3, #1
 8007354:	e7f2      	b.n	800733c <_printf_float+0x1a0>
 8007356:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735c:	4299      	cmp	r1, r3
 800735e:	db05      	blt.n	800736c <_printf_float+0x1d0>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	6121      	str	r1, [r4, #16]
 8007364:	07d8      	lsls	r0, r3, #31
 8007366:	d5ea      	bpl.n	800733e <_printf_float+0x1a2>
 8007368:	1c4b      	adds	r3, r1, #1
 800736a:	e7e7      	b.n	800733c <_printf_float+0x1a0>
 800736c:	2900      	cmp	r1, #0
 800736e:	bfd4      	ite	le
 8007370:	f1c1 0202 	rsble	r2, r1, #2
 8007374:	2201      	movgt	r2, #1
 8007376:	4413      	add	r3, r2
 8007378:	e7e0      	b.n	800733c <_printf_float+0x1a0>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	055a      	lsls	r2, r3, #21
 800737e:	d407      	bmi.n	8007390 <_printf_float+0x1f4>
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	4642      	mov	r2, r8
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	d12c      	bne.n	80073e8 <_printf_float+0x24c>
 800738e:	e764      	b.n	800725a <_printf_float+0xbe>
 8007390:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007394:	f240 80e0 	bls.w	8007558 <_printf_float+0x3bc>
 8007398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	f7f9 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d034      	beq.n	8007412 <_printf_float+0x276>
 80073a8:	4a37      	ldr	r2, [pc, #220]	; (8007488 <_printf_float+0x2ec>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af51 	beq.w	800725a <_printf_float+0xbe>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	db02      	blt.n	80073c6 <_printf_float+0x22a>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07d8      	lsls	r0, r3, #31
 80073c4:	d510      	bpl.n	80073e8 <_printf_float+0x24c>
 80073c6:	ee18 3a10 	vmov	r3, s16
 80073ca:	4652      	mov	r2, sl
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af41 	beq.w	800725a <_printf_float+0xbe>
 80073d8:	f04f 0800 	mov.w	r8, #0
 80073dc:	f104 091a 	add.w	r9, r4, #26
 80073e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e2:	3b01      	subs	r3, #1
 80073e4:	4543      	cmp	r3, r8
 80073e6:	dc09      	bgt.n	80073fc <_printf_float+0x260>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	079b      	lsls	r3, r3, #30
 80073ec:	f100 8107 	bmi.w	80075fe <_printf_float+0x462>
 80073f0:	68e0      	ldr	r0, [r4, #12]
 80073f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f4:	4298      	cmp	r0, r3
 80073f6:	bfb8      	it	lt
 80073f8:	4618      	movlt	r0, r3
 80073fa:	e730      	b.n	800725e <_printf_float+0xc2>
 80073fc:	2301      	movs	r3, #1
 80073fe:	464a      	mov	r2, r9
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af27 	beq.w	800725a <_printf_float+0xbe>
 800740c:	f108 0801 	add.w	r8, r8, #1
 8007410:	e7e6      	b.n	80073e0 <_printf_float+0x244>
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	dc39      	bgt.n	800748c <_printf_float+0x2f0>
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <_printf_float+0x2ec>)
 800741a:	2301      	movs	r3, #1
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f af19 	beq.w	800725a <_printf_float+0xbe>
 8007428:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800742c:	4313      	orrs	r3, r2
 800742e:	d102      	bne.n	8007436 <_printf_float+0x29a>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d5d8      	bpl.n	80073e8 <_printf_float+0x24c>
 8007436:	ee18 3a10 	vmov	r3, s16
 800743a:	4652      	mov	r2, sl
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f af09 	beq.w	800725a <_printf_float+0xbe>
 8007448:	f04f 0900 	mov.w	r9, #0
 800744c:	f104 0a1a 	add.w	sl, r4, #26
 8007450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007452:	425b      	negs	r3, r3
 8007454:	454b      	cmp	r3, r9
 8007456:	dc01      	bgt.n	800745c <_printf_float+0x2c0>
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	e792      	b.n	8007382 <_printf_float+0x1e6>
 800745c:	2301      	movs	r3, #1
 800745e:	4652      	mov	r2, sl
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f aef7 	beq.w	800725a <_printf_float+0xbe>
 800746c:	f109 0901 	add.w	r9, r9, #1
 8007470:	e7ee      	b.n	8007450 <_printf_float+0x2b4>
 8007472:	bf00      	nop
 8007474:	7fefffff 	.word	0x7fefffff
 8007478:	0800b4cc 	.word	0x0800b4cc
 800747c:	0800b4d0 	.word	0x0800b4d0
 8007480:	0800b4d4 	.word	0x0800b4d4
 8007484:	0800b4d8 	.word	0x0800b4d8
 8007488:	0800b4dc 	.word	0x0800b4dc
 800748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007490:	429a      	cmp	r2, r3
 8007492:	bfa8      	it	ge
 8007494:	461a      	movge	r2, r3
 8007496:	2a00      	cmp	r2, #0
 8007498:	4691      	mov	r9, r2
 800749a:	dc37      	bgt.n	800750c <_printf_float+0x370>
 800749c:	f04f 0b00 	mov.w	fp, #0
 80074a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a4:	f104 021a 	add.w	r2, r4, #26
 80074a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074aa:	9305      	str	r3, [sp, #20]
 80074ac:	eba3 0309 	sub.w	r3, r3, r9
 80074b0:	455b      	cmp	r3, fp
 80074b2:	dc33      	bgt.n	800751c <_printf_float+0x380>
 80074b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b8:	429a      	cmp	r2, r3
 80074ba:	db3b      	blt.n	8007534 <_printf_float+0x398>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	07da      	lsls	r2, r3, #31
 80074c0:	d438      	bmi.n	8007534 <_printf_float+0x398>
 80074c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80074c6:	eba2 0903 	sub.w	r9, r2, r3
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	1ad2      	subs	r2, r2, r3
 80074ce:	4591      	cmp	r9, r2
 80074d0:	bfa8      	it	ge
 80074d2:	4691      	movge	r9, r2
 80074d4:	f1b9 0f00 	cmp.w	r9, #0
 80074d8:	dc35      	bgt.n	8007546 <_printf_float+0x3aa>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074e2:	f104 0a1a 	add.w	sl, r4, #26
 80074e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	eba3 0309 	sub.w	r3, r3, r9
 80074f0:	4543      	cmp	r3, r8
 80074f2:	f77f af79 	ble.w	80073e8 <_printf_float+0x24c>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4652      	mov	r2, sl
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	f43f aeaa 	beq.w	800725a <_printf_float+0xbe>
 8007506:	f108 0801 	add.w	r8, r8, #1
 800750a:	e7ec      	b.n	80074e6 <_printf_float+0x34a>
 800750c:	4613      	mov	r3, r2
 800750e:	4631      	mov	r1, r6
 8007510:	4642      	mov	r2, r8
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	d1c0      	bne.n	800749c <_printf_float+0x300>
 800751a:	e69e      	b.n	800725a <_printf_float+0xbe>
 800751c:	2301      	movs	r3, #1
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	9205      	str	r2, [sp, #20]
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f ae97 	beq.w	800725a <_printf_float+0xbe>
 800752c:	9a05      	ldr	r2, [sp, #20]
 800752e:	f10b 0b01 	add.w	fp, fp, #1
 8007532:	e7b9      	b.n	80074a8 <_printf_float+0x30c>
 8007534:	ee18 3a10 	vmov	r3, s16
 8007538:	4652      	mov	r2, sl
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	d1be      	bne.n	80074c2 <_printf_float+0x326>
 8007544:	e689      	b.n	800725a <_printf_float+0xbe>
 8007546:	9a05      	ldr	r2, [sp, #20]
 8007548:	464b      	mov	r3, r9
 800754a:	4442      	add	r2, r8
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	d1c1      	bne.n	80074da <_printf_float+0x33e>
 8007556:	e680      	b.n	800725a <_printf_float+0xbe>
 8007558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800755a:	2a01      	cmp	r2, #1
 800755c:	dc01      	bgt.n	8007562 <_printf_float+0x3c6>
 800755e:	07db      	lsls	r3, r3, #31
 8007560:	d53a      	bpl.n	80075d8 <_printf_float+0x43c>
 8007562:	2301      	movs	r3, #1
 8007564:	4642      	mov	r2, r8
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f ae74 	beq.w	800725a <_printf_float+0xbe>
 8007572:	ee18 3a10 	vmov	r3, s16
 8007576:	4652      	mov	r2, sl
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f ae6b 	beq.w	800725a <_printf_float+0xbe>
 8007584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007588:	2200      	movs	r2, #0
 800758a:	2300      	movs	r3, #0
 800758c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007590:	f7f9 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007594:	b9d8      	cbnz	r0, 80075ce <_printf_float+0x432>
 8007596:	f10a 33ff 	add.w	r3, sl, #4294967295
 800759a:	f108 0201 	add.w	r2, r8, #1
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	d10e      	bne.n	80075c6 <_printf_float+0x42a>
 80075a8:	e657      	b.n	800725a <_printf_float+0xbe>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4652      	mov	r2, sl
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	f43f ae50 	beq.w	800725a <_printf_float+0xbe>
 80075ba:	f108 0801 	add.w	r8, r8, #1
 80075be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4543      	cmp	r3, r8
 80075c4:	dcf1      	bgt.n	80075aa <_printf_float+0x40e>
 80075c6:	464b      	mov	r3, r9
 80075c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075cc:	e6da      	b.n	8007384 <_printf_float+0x1e8>
 80075ce:	f04f 0800 	mov.w	r8, #0
 80075d2:	f104 0a1a 	add.w	sl, r4, #26
 80075d6:	e7f2      	b.n	80075be <_printf_float+0x422>
 80075d8:	2301      	movs	r3, #1
 80075da:	4642      	mov	r2, r8
 80075dc:	e7df      	b.n	800759e <_printf_float+0x402>
 80075de:	2301      	movs	r3, #1
 80075e0:	464a      	mov	r2, r9
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae36 	beq.w	800725a <_printf_float+0xbe>
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	68e3      	ldr	r3, [r4, #12]
 80075f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075f6:	1a5b      	subs	r3, r3, r1
 80075f8:	4543      	cmp	r3, r8
 80075fa:	dcf0      	bgt.n	80075de <_printf_float+0x442>
 80075fc:	e6f8      	b.n	80073f0 <_printf_float+0x254>
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	f104 0919 	add.w	r9, r4, #25
 8007606:	e7f4      	b.n	80075f2 <_printf_float+0x456>

08007608 <_printf_common>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	4616      	mov	r6, r2
 800760e:	4699      	mov	r9, r3
 8007610:	688a      	ldr	r2, [r1, #8]
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007618:	4293      	cmp	r3, r2
 800761a:	bfb8      	it	lt
 800761c:	4613      	movlt	r3, r2
 800761e:	6033      	str	r3, [r6, #0]
 8007620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007624:	4607      	mov	r7, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b10a      	cbz	r2, 800762e <_printf_common+0x26>
 800762a:	3301      	adds	r3, #1
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	0699      	lsls	r1, r3, #26
 8007632:	bf42      	ittt	mi
 8007634:	6833      	ldrmi	r3, [r6, #0]
 8007636:	3302      	addmi	r3, #2
 8007638:	6033      	strmi	r3, [r6, #0]
 800763a:	6825      	ldr	r5, [r4, #0]
 800763c:	f015 0506 	ands.w	r5, r5, #6
 8007640:	d106      	bne.n	8007650 <_printf_common+0x48>
 8007642:	f104 0a19 	add.w	sl, r4, #25
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	6832      	ldr	r2, [r6, #0]
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	42ab      	cmp	r3, r5
 800764e:	dc26      	bgt.n	800769e <_printf_common+0x96>
 8007650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007654:	1e13      	subs	r3, r2, #0
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	bf18      	it	ne
 800765a:	2301      	movne	r3, #1
 800765c:	0692      	lsls	r2, r2, #26
 800765e:	d42b      	bmi.n	80076b8 <_printf_common+0xb0>
 8007660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	3001      	adds	r0, #1
 800766c:	d01e      	beq.n	80076ac <_printf_common+0xa4>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	6922      	ldr	r2, [r4, #16]
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	2b04      	cmp	r3, #4
 8007678:	bf02      	ittt	eq
 800767a:	68e5      	ldreq	r5, [r4, #12]
 800767c:	6833      	ldreq	r3, [r6, #0]
 800767e:	1aed      	subeq	r5, r5, r3
 8007680:	68a3      	ldr	r3, [r4, #8]
 8007682:	bf0c      	ite	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	2500      	movne	r5, #0
 800768a:	4293      	cmp	r3, r2
 800768c:	bfc4      	itt	gt
 800768e:	1a9b      	subgt	r3, r3, r2
 8007690:	18ed      	addgt	r5, r5, r3
 8007692:	2600      	movs	r6, #0
 8007694:	341a      	adds	r4, #26
 8007696:	42b5      	cmp	r5, r6
 8007698:	d11a      	bne.n	80076d0 <_printf_common+0xc8>
 800769a:	2000      	movs	r0, #0
 800769c:	e008      	b.n	80076b0 <_printf_common+0xa8>
 800769e:	2301      	movs	r3, #1
 80076a0:	4652      	mov	r2, sl
 80076a2:	4649      	mov	r1, r9
 80076a4:	4638      	mov	r0, r7
 80076a6:	47c0      	blx	r8
 80076a8:	3001      	adds	r0, #1
 80076aa:	d103      	bne.n	80076b4 <_printf_common+0xac>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b4:	3501      	adds	r5, #1
 80076b6:	e7c6      	b.n	8007646 <_printf_common+0x3e>
 80076b8:	18e1      	adds	r1, r4, r3
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	2030      	movs	r0, #48	; 0x30
 80076be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c2:	4422      	add	r2, r4
 80076c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076cc:	3302      	adds	r3, #2
 80076ce:	e7c7      	b.n	8007660 <_printf_common+0x58>
 80076d0:	2301      	movs	r3, #1
 80076d2:	4622      	mov	r2, r4
 80076d4:	4649      	mov	r1, r9
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c0      	blx	r8
 80076da:	3001      	adds	r0, #1
 80076dc:	d0e6      	beq.n	80076ac <_printf_common+0xa4>
 80076de:	3601      	adds	r6, #1
 80076e0:	e7d9      	b.n	8007696 <_printf_common+0x8e>
	...

080076e4 <_printf_i>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	7e0f      	ldrb	r7, [r1, #24]
 80076ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076ec:	2f78      	cmp	r7, #120	; 0x78
 80076ee:	4691      	mov	r9, r2
 80076f0:	4680      	mov	r8, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	469a      	mov	sl, r3
 80076f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076fa:	d807      	bhi.n	800770c <_printf_i+0x28>
 80076fc:	2f62      	cmp	r7, #98	; 0x62
 80076fe:	d80a      	bhi.n	8007716 <_printf_i+0x32>
 8007700:	2f00      	cmp	r7, #0
 8007702:	f000 80d4 	beq.w	80078ae <_printf_i+0x1ca>
 8007706:	2f58      	cmp	r7, #88	; 0x58
 8007708:	f000 80c0 	beq.w	800788c <_printf_i+0x1a8>
 800770c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007714:	e03a      	b.n	800778c <_printf_i+0xa8>
 8007716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800771a:	2b15      	cmp	r3, #21
 800771c:	d8f6      	bhi.n	800770c <_printf_i+0x28>
 800771e:	a101      	add	r1, pc, #4	; (adr r1, 8007724 <_printf_i+0x40>)
 8007720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007724:	0800777d 	.word	0x0800777d
 8007728:	08007791 	.word	0x08007791
 800772c:	0800770d 	.word	0x0800770d
 8007730:	0800770d 	.word	0x0800770d
 8007734:	0800770d 	.word	0x0800770d
 8007738:	0800770d 	.word	0x0800770d
 800773c:	08007791 	.word	0x08007791
 8007740:	0800770d 	.word	0x0800770d
 8007744:	0800770d 	.word	0x0800770d
 8007748:	0800770d 	.word	0x0800770d
 800774c:	0800770d 	.word	0x0800770d
 8007750:	08007895 	.word	0x08007895
 8007754:	080077bd 	.word	0x080077bd
 8007758:	0800784f 	.word	0x0800784f
 800775c:	0800770d 	.word	0x0800770d
 8007760:	0800770d 	.word	0x0800770d
 8007764:	080078b7 	.word	0x080078b7
 8007768:	0800770d 	.word	0x0800770d
 800776c:	080077bd 	.word	0x080077bd
 8007770:	0800770d 	.word	0x0800770d
 8007774:	0800770d 	.word	0x0800770d
 8007778:	08007857 	.word	0x08007857
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800778c:	2301      	movs	r3, #1
 800778e:	e09f      	b.n	80078d0 <_printf_i+0x1ec>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	0607      	lsls	r7, r0, #24
 8007796:	f103 0104 	add.w	r1, r3, #4
 800779a:	6029      	str	r1, [r5, #0]
 800779c:	d501      	bpl.n	80077a2 <_printf_i+0xbe>
 800779e:	681e      	ldr	r6, [r3, #0]
 80077a0:	e003      	b.n	80077aa <_printf_i+0xc6>
 80077a2:	0646      	lsls	r6, r0, #25
 80077a4:	d5fb      	bpl.n	800779e <_printf_i+0xba>
 80077a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	da03      	bge.n	80077b6 <_printf_i+0xd2>
 80077ae:	232d      	movs	r3, #45	; 0x2d
 80077b0:	4276      	negs	r6, r6
 80077b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b6:	485a      	ldr	r0, [pc, #360]	; (8007920 <_printf_i+0x23c>)
 80077b8:	230a      	movs	r3, #10
 80077ba:	e012      	b.n	80077e2 <_printf_i+0xfe>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	6820      	ldr	r0, [r4, #0]
 80077c0:	1d19      	adds	r1, r3, #4
 80077c2:	6029      	str	r1, [r5, #0]
 80077c4:	0605      	lsls	r5, r0, #24
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0xe8>
 80077c8:	681e      	ldr	r6, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <_printf_i+0xee>
 80077cc:	0641      	lsls	r1, r0, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0xe4>
 80077d0:	881e      	ldrh	r6, [r3, #0]
 80077d2:	4853      	ldr	r0, [pc, #332]	; (8007920 <_printf_i+0x23c>)
 80077d4:	2f6f      	cmp	r7, #111	; 0x6f
 80077d6:	bf0c      	ite	eq
 80077d8:	2308      	moveq	r3, #8
 80077da:	230a      	movne	r3, #10
 80077dc:	2100      	movs	r1, #0
 80077de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077e2:	6865      	ldr	r5, [r4, #4]
 80077e4:	60a5      	str	r5, [r4, #8]
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	bfa2      	ittt	ge
 80077ea:	6821      	ldrge	r1, [r4, #0]
 80077ec:	f021 0104 	bicge.w	r1, r1, #4
 80077f0:	6021      	strge	r1, [r4, #0]
 80077f2:	b90e      	cbnz	r6, 80077f8 <_printf_i+0x114>
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	d04b      	beq.n	8007890 <_printf_i+0x1ac>
 80077f8:	4615      	mov	r5, r2
 80077fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80077fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007802:	5dc7      	ldrb	r7, [r0, r7]
 8007804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007808:	4637      	mov	r7, r6
 800780a:	42bb      	cmp	r3, r7
 800780c:	460e      	mov	r6, r1
 800780e:	d9f4      	bls.n	80077fa <_printf_i+0x116>
 8007810:	2b08      	cmp	r3, #8
 8007812:	d10b      	bne.n	800782c <_printf_i+0x148>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	07de      	lsls	r6, r3, #31
 8007818:	d508      	bpl.n	800782c <_printf_i+0x148>
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6861      	ldr	r1, [r4, #4]
 800781e:	4299      	cmp	r1, r3
 8007820:	bfde      	ittt	le
 8007822:	2330      	movle	r3, #48	; 0x30
 8007824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800782c:	1b52      	subs	r2, r2, r5
 800782e:	6122      	str	r2, [r4, #16]
 8007830:	f8cd a000 	str.w	sl, [sp]
 8007834:	464b      	mov	r3, r9
 8007836:	aa03      	add	r2, sp, #12
 8007838:	4621      	mov	r1, r4
 800783a:	4640      	mov	r0, r8
 800783c:	f7ff fee4 	bl	8007608 <_printf_common>
 8007840:	3001      	adds	r0, #1
 8007842:	d14a      	bne.n	80078da <_printf_i+0x1f6>
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	b004      	add	sp, #16
 800784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f043 0320 	orr.w	r3, r3, #32
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	4833      	ldr	r0, [pc, #204]	; (8007924 <_printf_i+0x240>)
 8007858:	2778      	movs	r7, #120	; 0x78
 800785a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	061f      	lsls	r7, r3, #24
 8007864:	f851 6b04 	ldr.w	r6, [r1], #4
 8007868:	d402      	bmi.n	8007870 <_printf_i+0x18c>
 800786a:	065f      	lsls	r7, r3, #25
 800786c:	bf48      	it	mi
 800786e:	b2b6      	uxthmi	r6, r6
 8007870:	07df      	lsls	r7, r3, #31
 8007872:	bf48      	it	mi
 8007874:	f043 0320 	orrmi.w	r3, r3, #32
 8007878:	6029      	str	r1, [r5, #0]
 800787a:	bf48      	it	mi
 800787c:	6023      	strmi	r3, [r4, #0]
 800787e:	b91e      	cbnz	r6, 8007888 <_printf_i+0x1a4>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	f023 0320 	bic.w	r3, r3, #32
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	2310      	movs	r3, #16
 800788a:	e7a7      	b.n	80077dc <_printf_i+0xf8>
 800788c:	4824      	ldr	r0, [pc, #144]	; (8007920 <_printf_i+0x23c>)
 800788e:	e7e4      	b.n	800785a <_printf_i+0x176>
 8007890:	4615      	mov	r5, r2
 8007892:	e7bd      	b.n	8007810 <_printf_i+0x12c>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	6826      	ldr	r6, [r4, #0]
 8007898:	6961      	ldr	r1, [r4, #20]
 800789a:	1d18      	adds	r0, r3, #4
 800789c:	6028      	str	r0, [r5, #0]
 800789e:	0635      	lsls	r5, r6, #24
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0x1c4>
 80078a4:	6019      	str	r1, [r3, #0]
 80078a6:	e002      	b.n	80078ae <_printf_i+0x1ca>
 80078a8:	0670      	lsls	r0, r6, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0x1c0>
 80078ac:	8019      	strh	r1, [r3, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	4615      	mov	r5, r2
 80078b4:	e7bc      	b.n	8007830 <_printf_i+0x14c>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	602a      	str	r2, [r5, #0]
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	6862      	ldr	r2, [r4, #4]
 80078c0:	2100      	movs	r1, #0
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7f8 fc8c 	bl	80001e0 <memchr>
 80078c8:	b108      	cbz	r0, 80078ce <_printf_i+0x1ea>
 80078ca:	1b40      	subs	r0, r0, r5
 80078cc:	6060      	str	r0, [r4, #4]
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	2300      	movs	r3, #0
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	e7aa      	b.n	8007830 <_printf_i+0x14c>
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	462a      	mov	r2, r5
 80078de:	4649      	mov	r1, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	47d0      	blx	sl
 80078e4:	3001      	adds	r0, #1
 80078e6:	d0ad      	beq.n	8007844 <_printf_i+0x160>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	079b      	lsls	r3, r3, #30
 80078ec:	d413      	bmi.n	8007916 <_printf_i+0x232>
 80078ee:	68e0      	ldr	r0, [r4, #12]
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	4298      	cmp	r0, r3
 80078f4:	bfb8      	it	lt
 80078f6:	4618      	movlt	r0, r3
 80078f8:	e7a6      	b.n	8007848 <_printf_i+0x164>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	47d0      	blx	sl
 8007904:	3001      	adds	r0, #1
 8007906:	d09d      	beq.n	8007844 <_printf_i+0x160>
 8007908:	3501      	adds	r5, #1
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	9903      	ldr	r1, [sp, #12]
 800790e:	1a5b      	subs	r3, r3, r1
 8007910:	42ab      	cmp	r3, r5
 8007912:	dcf2      	bgt.n	80078fa <_printf_i+0x216>
 8007914:	e7eb      	b.n	80078ee <_printf_i+0x20a>
 8007916:	2500      	movs	r5, #0
 8007918:	f104 0619 	add.w	r6, r4, #25
 800791c:	e7f5      	b.n	800790a <_printf_i+0x226>
 800791e:	bf00      	nop
 8007920:	0800b4de 	.word	0x0800b4de
 8007924:	0800b4ef 	.word	0x0800b4ef

08007928 <std>:
 8007928:	2300      	movs	r3, #0
 800792a:	b510      	push	{r4, lr}
 800792c:	4604      	mov	r4, r0
 800792e:	e9c0 3300 	strd	r3, r3, [r0]
 8007932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007936:	6083      	str	r3, [r0, #8]
 8007938:	8181      	strh	r1, [r0, #12]
 800793a:	6643      	str	r3, [r0, #100]	; 0x64
 800793c:	81c2      	strh	r2, [r0, #14]
 800793e:	6183      	str	r3, [r0, #24]
 8007940:	4619      	mov	r1, r3
 8007942:	2208      	movs	r2, #8
 8007944:	305c      	adds	r0, #92	; 0x5c
 8007946:	f000 f914 	bl	8007b72 <memset>
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <std+0x58>)
 800794c:	6263      	str	r3, [r4, #36]	; 0x24
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <std+0x5c>)
 8007950:	62a3      	str	r3, [r4, #40]	; 0x28
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <std+0x60>)
 8007954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <std+0x64>)
 8007958:	6323      	str	r3, [r4, #48]	; 0x30
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <std+0x68>)
 800795c:	6224      	str	r4, [r4, #32]
 800795e:	429c      	cmp	r4, r3
 8007960:	d006      	beq.n	8007970 <std+0x48>
 8007962:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007966:	4294      	cmp	r4, r2
 8007968:	d002      	beq.n	8007970 <std+0x48>
 800796a:	33d0      	adds	r3, #208	; 0xd0
 800796c:	429c      	cmp	r4, r3
 800796e:	d105      	bne.n	800797c <std+0x54>
 8007970:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f000 b9ce 	b.w	8007d18 <__retarget_lock_init_recursive>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	08007aed 	.word	0x08007aed
 8007984:	08007b0f 	.word	0x08007b0f
 8007988:	08007b47 	.word	0x08007b47
 800798c:	08007b6b 	.word	0x08007b6b
 8007990:	200047e8 	.word	0x200047e8

08007994 <stdio_exit_handler>:
 8007994:	4a02      	ldr	r2, [pc, #8]	; (80079a0 <stdio_exit_handler+0xc>)
 8007996:	4903      	ldr	r1, [pc, #12]	; (80079a4 <stdio_exit_handler+0x10>)
 8007998:	4803      	ldr	r0, [pc, #12]	; (80079a8 <stdio_exit_handler+0x14>)
 800799a:	f000 b869 	b.w	8007a70 <_fwalk_sglue>
 800799e:	bf00      	nop
 80079a0:	20000018 	.word	0x20000018
 80079a4:	080096e9 	.word	0x080096e9
 80079a8:	20000024 	.word	0x20000024

080079ac <cleanup_stdio>:
 80079ac:	6841      	ldr	r1, [r0, #4]
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <cleanup_stdio+0x34>)
 80079b0:	4299      	cmp	r1, r3
 80079b2:	b510      	push	{r4, lr}
 80079b4:	4604      	mov	r4, r0
 80079b6:	d001      	beq.n	80079bc <cleanup_stdio+0x10>
 80079b8:	f001 fe96 	bl	80096e8 <_fflush_r>
 80079bc:	68a1      	ldr	r1, [r4, #8]
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <cleanup_stdio+0x38>)
 80079c0:	4299      	cmp	r1, r3
 80079c2:	d002      	beq.n	80079ca <cleanup_stdio+0x1e>
 80079c4:	4620      	mov	r0, r4
 80079c6:	f001 fe8f 	bl	80096e8 <_fflush_r>
 80079ca:	68e1      	ldr	r1, [r4, #12]
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <cleanup_stdio+0x3c>)
 80079ce:	4299      	cmp	r1, r3
 80079d0:	d004      	beq.n	80079dc <cleanup_stdio+0x30>
 80079d2:	4620      	mov	r0, r4
 80079d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d8:	f001 be86 	b.w	80096e8 <_fflush_r>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	200047e8 	.word	0x200047e8
 80079e4:	20004850 	.word	0x20004850
 80079e8:	200048b8 	.word	0x200048b8

080079ec <global_stdio_init.part.0>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <global_stdio_init.part.0+0x30>)
 80079f0:	4c0b      	ldr	r4, [pc, #44]	; (8007a20 <global_stdio_init.part.0+0x34>)
 80079f2:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <global_stdio_init.part.0+0x38>)
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	4620      	mov	r0, r4
 80079f8:	2200      	movs	r2, #0
 80079fa:	2104      	movs	r1, #4
 80079fc:	f7ff ff94 	bl	8007928 <std>
 8007a00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a04:	2201      	movs	r2, #1
 8007a06:	2109      	movs	r1, #9
 8007a08:	f7ff ff8e 	bl	8007928 <std>
 8007a0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a10:	2202      	movs	r2, #2
 8007a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a16:	2112      	movs	r1, #18
 8007a18:	f7ff bf86 	b.w	8007928 <std>
 8007a1c:	20004920 	.word	0x20004920
 8007a20:	200047e8 	.word	0x200047e8
 8007a24:	08007995 	.word	0x08007995

08007a28 <__sfp_lock_acquire>:
 8007a28:	4801      	ldr	r0, [pc, #4]	; (8007a30 <__sfp_lock_acquire+0x8>)
 8007a2a:	f000 b976 	b.w	8007d1a <__retarget_lock_acquire_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20004929 	.word	0x20004929

08007a34 <__sfp_lock_release>:
 8007a34:	4801      	ldr	r0, [pc, #4]	; (8007a3c <__sfp_lock_release+0x8>)
 8007a36:	f000 b971 	b.w	8007d1c <__retarget_lock_release_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	20004929 	.word	0x20004929

08007a40 <__sinit>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4604      	mov	r4, r0
 8007a44:	f7ff fff0 	bl	8007a28 <__sfp_lock_acquire>
 8007a48:	6a23      	ldr	r3, [r4, #32]
 8007a4a:	b11b      	cbz	r3, 8007a54 <__sinit+0x14>
 8007a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a50:	f7ff bff0 	b.w	8007a34 <__sfp_lock_release>
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <__sinit+0x28>)
 8007a56:	6223      	str	r3, [r4, #32]
 8007a58:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <__sinit+0x2c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f5      	bne.n	8007a4c <__sinit+0xc>
 8007a60:	f7ff ffc4 	bl	80079ec <global_stdio_init.part.0>
 8007a64:	e7f2      	b.n	8007a4c <__sinit+0xc>
 8007a66:	bf00      	nop
 8007a68:	080079ad 	.word	0x080079ad
 8007a6c:	20004920 	.word	0x20004920

08007a70 <_fwalk_sglue>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	4607      	mov	r7, r0
 8007a76:	4688      	mov	r8, r1
 8007a78:	4614      	mov	r4, r2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a80:	f1b9 0901 	subs.w	r9, r9, #1
 8007a84:	d505      	bpl.n	8007a92 <_fwalk_sglue+0x22>
 8007a86:	6824      	ldr	r4, [r4, #0]
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	d1f7      	bne.n	8007a7c <_fwalk_sglue+0xc>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d907      	bls.n	8007aa8 <_fwalk_sglue+0x38>
 8007a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	d003      	beq.n	8007aa8 <_fwalk_sglue+0x38>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c0      	blx	r8
 8007aa6:	4306      	orrs	r6, r0
 8007aa8:	3568      	adds	r5, #104	; 0x68
 8007aaa:	e7e9      	b.n	8007a80 <_fwalk_sglue+0x10>

08007aac <siprintf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	b500      	push	{lr}
 8007ab0:	b09c      	sub	sp, #112	; 0x70
 8007ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	9006      	str	r0, [sp, #24]
 8007ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007abc:	4809      	ldr	r0, [pc, #36]	; (8007ae4 <siprintf+0x38>)
 8007abe:	9107      	str	r1, [sp, #28]
 8007ac0:	9104      	str	r1, [sp, #16]
 8007ac2:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <siprintf+0x3c>)
 8007ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	a902      	add	r1, sp, #8
 8007ad0:	f001 fc86 	bl	80093e0 <_svfiprintf_r>
 8007ad4:	9b02      	ldr	r3, [sp, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	b01c      	add	sp, #112	; 0x70
 8007adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ae0:	b003      	add	sp, #12
 8007ae2:	4770      	bx	lr
 8007ae4:	20000070 	.word	0x20000070
 8007ae8:	ffff0208 	.word	0xffff0208

08007aec <__sread>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	f000 f8c2 	bl	8007c7c <_read_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bfab      	itete	ge
 8007afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007afe:	89a3      	ldrhlt	r3, [r4, #12]
 8007b00:	181b      	addge	r3, r3, r0
 8007b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b06:	bfac      	ite	ge
 8007b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b0a:	81a3      	strhlt	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__swrite>:
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	461f      	mov	r7, r3
 8007b14:	898b      	ldrh	r3, [r1, #12]
 8007b16:	05db      	lsls	r3, r3, #23
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	d505      	bpl.n	8007b2c <__swrite+0x1e>
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	2302      	movs	r3, #2
 8007b26:	2200      	movs	r2, #0
 8007b28:	f000 f896 	bl	8007c58 <_lseek_r>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	f000 b8ad 	b.w	8007ca0 <_write_r>

08007b46 <__sseek>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 f883 	bl	8007c58 <_lseek_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	bf15      	itete	ne
 8007b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b62:	81a3      	strheq	r3, [r4, #12]
 8007b64:	bf18      	it	ne
 8007b66:	81a3      	strhne	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__sclose>:
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 b80d 	b.w	8007b8c <_close_r>

08007b72 <memset>:
 8007b72:	4402      	add	r2, r0
 8007b74:	4603      	mov	r3, r0
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d100      	bne.n	8007b7c <memset+0xa>
 8007b7a:	4770      	bx	lr
 8007b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b80:	e7f9      	b.n	8007b76 <memset+0x4>
	...

08007b84 <_localeconv_r>:
 8007b84:	4800      	ldr	r0, [pc, #0]	; (8007b88 <_localeconv_r+0x4>)
 8007b86:	4770      	bx	lr
 8007b88:	20000164 	.word	0x20000164

08007b8c <_close_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	; (8007ba8 <_close_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7fa ff79 	bl	8002a8e <_close>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_close_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_close_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20004924 	.word	0x20004924

08007bac <_reclaim_reent>:
 8007bac:	4b29      	ldr	r3, [pc, #164]	; (8007c54 <_reclaim_reent+0xa8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	d04b      	beq.n	8007c50 <_reclaim_reent+0xa4>
 8007bb8:	69c3      	ldr	r3, [r0, #28]
 8007bba:	b143      	cbz	r3, 8007bce <_reclaim_reent+0x22>
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d144      	bne.n	8007c4c <_reclaim_reent+0xa0>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	6819      	ldr	r1, [r3, #0]
 8007bc6:	b111      	cbz	r1, 8007bce <_reclaim_reent+0x22>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 ff33 	bl	8008a34 <_free_r>
 8007bce:	6961      	ldr	r1, [r4, #20]
 8007bd0:	b111      	cbz	r1, 8007bd8 <_reclaim_reent+0x2c>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 ff2e 	bl	8008a34 <_free_r>
 8007bd8:	69e1      	ldr	r1, [r4, #28]
 8007bda:	b111      	cbz	r1, 8007be2 <_reclaim_reent+0x36>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 ff29 	bl	8008a34 <_free_r>
 8007be2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007be4:	b111      	cbz	r1, 8007bec <_reclaim_reent+0x40>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 ff24 	bl	8008a34 <_free_r>
 8007bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bee:	b111      	cbz	r1, 8007bf6 <_reclaim_reent+0x4a>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 ff1f 	bl	8008a34 <_free_r>
 8007bf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bf8:	b111      	cbz	r1, 8007c00 <_reclaim_reent+0x54>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 ff1a 	bl	8008a34 <_free_r>
 8007c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c02:	b111      	cbz	r1, 8007c0a <_reclaim_reent+0x5e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 ff15 	bl	8008a34 <_free_r>
 8007c0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c0c:	b111      	cbz	r1, 8007c14 <_reclaim_reent+0x68>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 ff10 	bl	8008a34 <_free_r>
 8007c14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c16:	b111      	cbz	r1, 8007c1e <_reclaim_reent+0x72>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 ff0b 	bl	8008a34 <_free_r>
 8007c1e:	6a23      	ldr	r3, [r4, #32]
 8007c20:	b1b3      	cbz	r3, 8007c50 <_reclaim_reent+0xa4>
 8007c22:	4620      	mov	r0, r4
 8007c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c28:	4718      	bx	r3
 8007c2a:	5949      	ldr	r1, [r1, r5]
 8007c2c:	b941      	cbnz	r1, 8007c40 <_reclaim_reent+0x94>
 8007c2e:	3504      	adds	r5, #4
 8007c30:	69e3      	ldr	r3, [r4, #28]
 8007c32:	2d80      	cmp	r5, #128	; 0x80
 8007c34:	68d9      	ldr	r1, [r3, #12]
 8007c36:	d1f8      	bne.n	8007c2a <_reclaim_reent+0x7e>
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fefb 	bl	8008a34 <_free_r>
 8007c3e:	e7c0      	b.n	8007bc2 <_reclaim_reent+0x16>
 8007c40:	680e      	ldr	r6, [r1, #0]
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fef6 	bl	8008a34 <_free_r>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	e7ef      	b.n	8007c2c <_reclaim_reent+0x80>
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	e7ef      	b.n	8007c30 <_reclaim_reent+0x84>
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	20000070 	.word	0x20000070

08007c58 <_lseek_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_lseek_r+0x20>)
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	602a      	str	r2, [r5, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7fa ff38 	bl	8002adc <_lseek>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_lseek_r+0x1e>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_lseek_r+0x1e>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20004924 	.word	0x20004924

08007c7c <_read_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_read_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7fa fec6 	bl	8002a1c <_read>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_read_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_read_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20004924 	.word	0x20004924

08007ca0 <_write_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	; (8007cc0 <_write_r+0x20>)
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7fa fed1 	bl	8002a56 <_write>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_write_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_write_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	20004924 	.word	0x20004924

08007cc4 <__errno>:
 8007cc4:	4b01      	ldr	r3, [pc, #4]	; (8007ccc <__errno+0x8>)
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000070 	.word	0x20000070

08007cd0 <__libc_init_array>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	4d0d      	ldr	r5, [pc, #52]	; (8007d08 <__libc_init_array+0x38>)
 8007cd4:	4c0d      	ldr	r4, [pc, #52]	; (8007d0c <__libc_init_array+0x3c>)
 8007cd6:	1b64      	subs	r4, r4, r5
 8007cd8:	10a4      	asrs	r4, r4, #2
 8007cda:	2600      	movs	r6, #0
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	d109      	bne.n	8007cf4 <__libc_init_array+0x24>
 8007ce0:	4d0b      	ldr	r5, [pc, #44]	; (8007d10 <__libc_init_array+0x40>)
 8007ce2:	4c0c      	ldr	r4, [pc, #48]	; (8007d14 <__libc_init_array+0x44>)
 8007ce4:	f002 ffd0 	bl	800ac88 <_init>
 8007ce8:	1b64      	subs	r4, r4, r5
 8007cea:	10a4      	asrs	r4, r4, #2
 8007cec:	2600      	movs	r6, #0
 8007cee:	42a6      	cmp	r6, r4
 8007cf0:	d105      	bne.n	8007cfe <__libc_init_array+0x2e>
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf8:	4798      	blx	r3
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	e7ee      	b.n	8007cdc <__libc_init_array+0xc>
 8007cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d02:	4798      	blx	r3
 8007d04:	3601      	adds	r6, #1
 8007d06:	e7f2      	b.n	8007cee <__libc_init_array+0x1e>
 8007d08:	0800b878 	.word	0x0800b878
 8007d0c:	0800b878 	.word	0x0800b878
 8007d10:	0800b878 	.word	0x0800b878
 8007d14:	0800b87c 	.word	0x0800b87c

08007d18 <__retarget_lock_init_recursive>:
 8007d18:	4770      	bx	lr

08007d1a <__retarget_lock_acquire_recursive>:
 8007d1a:	4770      	bx	lr

08007d1c <__retarget_lock_release_recursive>:
 8007d1c:	4770      	bx	lr

08007d1e <memcpy>:
 8007d1e:	440a      	add	r2, r1
 8007d20:	4291      	cmp	r1, r2
 8007d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d26:	d100      	bne.n	8007d2a <memcpy+0xc>
 8007d28:	4770      	bx	lr
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d34:	4291      	cmp	r1, r2
 8007d36:	d1f9      	bne.n	8007d2c <memcpy+0xe>
 8007d38:	bd10      	pop	{r4, pc}

08007d3a <quorem>:
 8007d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3e:	6903      	ldr	r3, [r0, #16]
 8007d40:	690c      	ldr	r4, [r1, #16]
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	4607      	mov	r7, r0
 8007d46:	db7e      	blt.n	8007e46 <quorem+0x10c>
 8007d48:	3c01      	subs	r4, #1
 8007d4a:	f101 0814 	add.w	r8, r1, #20
 8007d4e:	f100 0514 	add.w	r5, r0, #20
 8007d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d60:	3301      	adds	r3, #1
 8007d62:	429a      	cmp	r2, r3
 8007d64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d70:	d331      	bcc.n	8007dd6 <quorem+0x9c>
 8007d72:	f04f 0e00 	mov.w	lr, #0
 8007d76:	4640      	mov	r0, r8
 8007d78:	46ac      	mov	ip, r5
 8007d7a:	46f2      	mov	sl, lr
 8007d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d80:	b293      	uxth	r3, r2
 8007d82:	fb06 e303 	mla	r3, r6, r3, lr
 8007d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d8a:	0c1a      	lsrs	r2, r3, #16
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	ebaa 0303 	sub.w	r3, sl, r3
 8007d92:	f8dc a000 	ldr.w	sl, [ip]
 8007d96:	fa13 f38a 	uxtah	r3, r3, sl
 8007d9a:	fb06 220e 	mla	r2, r6, lr, r2
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007da6:	b292      	uxth	r2, r2
 8007da8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007db0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007db4:	4581      	cmp	r9, r0
 8007db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dba:	f84c 3b04 	str.w	r3, [ip], #4
 8007dbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dc2:	d2db      	bcs.n	8007d7c <quorem+0x42>
 8007dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dc8:	b92b      	cbnz	r3, 8007dd6 <quorem+0x9c>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	d32c      	bcc.n	8007e2e <quorem+0xf4>
 8007dd4:	613c      	str	r4, [r7, #16]
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f001 f9a8 	bl	800912c <__mcmp>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	db22      	blt.n	8007e26 <quorem+0xec>
 8007de0:	3601      	adds	r6, #1
 8007de2:	4629      	mov	r1, r5
 8007de4:	2000      	movs	r0, #0
 8007de6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dea:	f8d1 c000 	ldr.w	ip, [r1]
 8007dee:	b293      	uxth	r3, r2
 8007df0:	1ac3      	subs	r3, r0, r3
 8007df2:	0c12      	lsrs	r2, r2, #16
 8007df4:	fa13 f38c 	uxtah	r3, r3, ip
 8007df8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e06:	45c1      	cmp	r9, r8
 8007e08:	f841 3b04 	str.w	r3, [r1], #4
 8007e0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e10:	d2e9      	bcs.n	8007de6 <quorem+0xac>
 8007e12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1a:	b922      	cbnz	r2, 8007e26 <quorem+0xec>
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	429d      	cmp	r5, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	d30a      	bcc.n	8007e3a <quorem+0x100>
 8007e24:	613c      	str	r4, [r7, #16]
 8007e26:	4630      	mov	r0, r6
 8007e28:	b003      	add	sp, #12
 8007e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	d1ce      	bne.n	8007dd4 <quorem+0x9a>
 8007e36:	3c01      	subs	r4, #1
 8007e38:	e7c9      	b.n	8007dce <quorem+0x94>
 8007e3a:	6812      	ldr	r2, [r2, #0]
 8007e3c:	3b04      	subs	r3, #4
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	d1f0      	bne.n	8007e24 <quorem+0xea>
 8007e42:	3c01      	subs	r4, #1
 8007e44:	e7eb      	b.n	8007e1e <quorem+0xe4>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7ee      	b.n	8007e28 <quorem+0xee>
 8007e4a:	0000      	movs	r0, r0
 8007e4c:	0000      	movs	r0, r0
	...

08007e50 <_dtoa_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	ed2d 8b04 	vpush	{d8-d9}
 8007e58:	69c5      	ldr	r5, [r0, #28]
 8007e5a:	b093      	sub	sp, #76	; 0x4c
 8007e5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e60:	ec57 6b10 	vmov	r6, r7, d0
 8007e64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e68:	9107      	str	r1, [sp, #28]
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e70:	b975      	cbnz	r5, 8007e90 <_dtoa_r+0x40>
 8007e72:	2010      	movs	r0, #16
 8007e74:	f000 fe2a 	bl	8008acc <malloc>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	61e0      	str	r0, [r4, #28]
 8007e7c:	b920      	cbnz	r0, 8007e88 <_dtoa_r+0x38>
 8007e7e:	4bae      	ldr	r3, [pc, #696]	; (8008138 <_dtoa_r+0x2e8>)
 8007e80:	21ef      	movs	r1, #239	; 0xef
 8007e82:	48ae      	ldr	r0, [pc, #696]	; (800813c <_dtoa_r+0x2ec>)
 8007e84:	f001 fc82 	bl	800978c <__assert_func>
 8007e88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e8c:	6005      	str	r5, [r0, #0]
 8007e8e:	60c5      	str	r5, [r0, #12]
 8007e90:	69e3      	ldr	r3, [r4, #28]
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	b151      	cbz	r1, 8007eac <_dtoa_r+0x5c>
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	604a      	str	r2, [r1, #4]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4093      	lsls	r3, r2
 8007e9e:	608b      	str	r3, [r1, #8]
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 ff07 	bl	8008cb4 <_Bfree>
 8007ea6:	69e3      	ldr	r3, [r4, #28]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	1e3b      	subs	r3, r7, #0
 8007eae:	bfbb      	ittet	lt
 8007eb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	9303      	strlt	r3, [sp, #12]
 8007eb6:	2300      	movge	r3, #0
 8007eb8:	2201      	movlt	r2, #1
 8007eba:	bfac      	ite	ge
 8007ebc:	f8c8 3000 	strge.w	r3, [r8]
 8007ec0:	f8c8 2000 	strlt.w	r2, [r8]
 8007ec4:	4b9e      	ldr	r3, [pc, #632]	; (8008140 <_dtoa_r+0x2f0>)
 8007ec6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007eca:	ea33 0308 	bics.w	r3, r3, r8
 8007ece:	d11b      	bne.n	8007f08 <_dtoa_r+0xb8>
 8007ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ed2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007edc:	4333      	orrs	r3, r6
 8007ede:	f000 8593 	beq.w	8008a08 <_dtoa_r+0xbb8>
 8007ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee4:	b963      	cbnz	r3, 8007f00 <_dtoa_r+0xb0>
 8007ee6:	4b97      	ldr	r3, [pc, #604]	; (8008144 <_dtoa_r+0x2f4>)
 8007ee8:	e027      	b.n	8007f3a <_dtoa_r+0xea>
 8007eea:	4b97      	ldr	r3, [pc, #604]	; (8008148 <_dtoa_r+0x2f8>)
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	9800      	ldr	r0, [sp, #0]
 8007ef6:	b013      	add	sp, #76	; 0x4c
 8007ef8:	ecbd 8b04 	vpop	{d8-d9}
 8007efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f00:	4b90      	ldr	r3, [pc, #576]	; (8008144 <_dtoa_r+0x2f4>)
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	3303      	adds	r3, #3
 8007f06:	e7f3      	b.n	8007ef0 <_dtoa_r+0xa0>
 8007f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	ec51 0b17 	vmov	r0, r1, d7
 8007f12:	eeb0 8a47 	vmov.f32	s16, s14
 8007f16:	eef0 8a67 	vmov.f32	s17, s15
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f7f8 fddc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f20:	4681      	mov	r9, r0
 8007f22:	b160      	cbz	r0, 8007f3e <_dtoa_r+0xee>
 8007f24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f26:	2301      	movs	r3, #1
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8568 	beq.w	8008a02 <_dtoa_r+0xbb2>
 8007f32:	4b86      	ldr	r3, [pc, #536]	; (800814c <_dtoa_r+0x2fc>)
 8007f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	e7da      	b.n	8007ef4 <_dtoa_r+0xa4>
 8007f3e:	aa10      	add	r2, sp, #64	; 0x40
 8007f40:	a911      	add	r1, sp, #68	; 0x44
 8007f42:	4620      	mov	r0, r4
 8007f44:	eeb0 0a48 	vmov.f32	s0, s16
 8007f48:	eef0 0a68 	vmov.f32	s1, s17
 8007f4c:	f001 f994 	bl	8009278 <__d2b>
 8007f50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f54:	4682      	mov	sl, r0
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	d07f      	beq.n	800805a <_dtoa_r+0x20a>
 8007f5a:	ee18 3a90 	vmov	r3, s17
 8007f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f66:	ec51 0b18 	vmov	r0, r1, d8
 8007f6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f76:	4619      	mov	r1, r3
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4b75      	ldr	r3, [pc, #468]	; (8008150 <_dtoa_r+0x300>)
 8007f7c:	f7f8 f98c 	bl	8000298 <__aeabi_dsub>
 8007f80:	a367      	add	r3, pc, #412	; (adr r3, 8008120 <_dtoa_r+0x2d0>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fb3f 	bl	8000608 <__aeabi_dmul>
 8007f8a:	a367      	add	r3, pc, #412	; (adr r3, 8008128 <_dtoa_r+0x2d8>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 f984 	bl	800029c <__adddf3>
 8007f94:	4606      	mov	r6, r0
 8007f96:	4628      	mov	r0, r5
 8007f98:	460f      	mov	r7, r1
 8007f9a:	f7f8 facb 	bl	8000534 <__aeabi_i2d>
 8007f9e:	a364      	add	r3, pc, #400	; (adr r3, 8008130 <_dtoa_r+0x2e0>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fb30 	bl	8000608 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f974 	bl	800029c <__adddf3>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	460f      	mov	r7, r1
 8007fb8:	f7f8 fdd6 	bl	8000b68 <__aeabi_d2iz>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4683      	mov	fp, r0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fd91 	bl	8000aec <__aeabi_dcmplt>
 8007fca:	b148      	cbz	r0, 8007fe0 <_dtoa_r+0x190>
 8007fcc:	4658      	mov	r0, fp
 8007fce:	f7f8 fab1 	bl	8000534 <__aeabi_i2d>
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	f7f8 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fda:	b908      	cbnz	r0, 8007fe0 <_dtoa_r+0x190>
 8007fdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fe0:	f1bb 0f16 	cmp.w	fp, #22
 8007fe4:	d857      	bhi.n	8008096 <_dtoa_r+0x246>
 8007fe6:	4b5b      	ldr	r3, [pc, #364]	; (8008154 <_dtoa_r+0x304>)
 8007fe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	ec51 0b18 	vmov	r0, r1, d8
 8007ff4:	f7f8 fd7a 	bl	8000aec <__aeabi_dcmplt>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d04e      	beq.n	800809a <_dtoa_r+0x24a>
 8007ffc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008000:	2300      	movs	r3, #0
 8008002:	930c      	str	r3, [sp, #48]	; 0x30
 8008004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008006:	1b5b      	subs	r3, r3, r5
 8008008:	1e5a      	subs	r2, r3, #1
 800800a:	bf45      	ittet	mi
 800800c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008010:	9305      	strmi	r3, [sp, #20]
 8008012:	2300      	movpl	r3, #0
 8008014:	2300      	movmi	r3, #0
 8008016:	9206      	str	r2, [sp, #24]
 8008018:	bf54      	ite	pl
 800801a:	9305      	strpl	r3, [sp, #20]
 800801c:	9306      	strmi	r3, [sp, #24]
 800801e:	f1bb 0f00 	cmp.w	fp, #0
 8008022:	db3c      	blt.n	800809e <_dtoa_r+0x24e>
 8008024:	9b06      	ldr	r3, [sp, #24]
 8008026:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800802a:	445b      	add	r3, fp
 800802c:	9306      	str	r3, [sp, #24]
 800802e:	2300      	movs	r3, #0
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	9b07      	ldr	r3, [sp, #28]
 8008034:	2b09      	cmp	r3, #9
 8008036:	d868      	bhi.n	800810a <_dtoa_r+0x2ba>
 8008038:	2b05      	cmp	r3, #5
 800803a:	bfc4      	itt	gt
 800803c:	3b04      	subgt	r3, #4
 800803e:	9307      	strgt	r3, [sp, #28]
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	f1a3 0302 	sub.w	r3, r3, #2
 8008046:	bfcc      	ite	gt
 8008048:	2500      	movgt	r5, #0
 800804a:	2501      	movle	r5, #1
 800804c:	2b03      	cmp	r3, #3
 800804e:	f200 8085 	bhi.w	800815c <_dtoa_r+0x30c>
 8008052:	e8df f003 	tbb	[pc, r3]
 8008056:	3b2e      	.short	0x3b2e
 8008058:	5839      	.short	0x5839
 800805a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800805e:	441d      	add	r5, r3
 8008060:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008064:	2b20      	cmp	r3, #32
 8008066:	bfc1      	itttt	gt
 8008068:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800806c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008070:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008074:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008078:	bfd6      	itet	le
 800807a:	f1c3 0320 	rsble	r3, r3, #32
 800807e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008082:	fa06 f003 	lslle.w	r0, r6, r3
 8008086:	f7f8 fa45 	bl	8000514 <__aeabi_ui2d>
 800808a:	2201      	movs	r2, #1
 800808c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008090:	3d01      	subs	r5, #1
 8008092:	920e      	str	r2, [sp, #56]	; 0x38
 8008094:	e76f      	b.n	8007f76 <_dtoa_r+0x126>
 8008096:	2301      	movs	r3, #1
 8008098:	e7b3      	b.n	8008002 <_dtoa_r+0x1b2>
 800809a:	900c      	str	r0, [sp, #48]	; 0x30
 800809c:	e7b2      	b.n	8008004 <_dtoa_r+0x1b4>
 800809e:	9b05      	ldr	r3, [sp, #20]
 80080a0:	eba3 030b 	sub.w	r3, r3, fp
 80080a4:	9305      	str	r3, [sp, #20]
 80080a6:	f1cb 0300 	rsb	r3, fp, #0
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	2300      	movs	r3, #0
 80080ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b0:	e7bf      	b.n	8008032 <_dtoa_r+0x1e2>
 80080b2:	2300      	movs	r3, #0
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc52      	bgt.n	8008162 <_dtoa_r+0x312>
 80080bc:	2301      	movs	r3, #1
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	461a      	mov	r2, r3
 80080c4:	920a      	str	r2, [sp, #40]	; 0x28
 80080c6:	e00b      	b.n	80080e0 <_dtoa_r+0x290>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e7f3      	b.n	80080b4 <_dtoa_r+0x264>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
 80080d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d2:	445b      	add	r3, fp
 80080d4:	9301      	str	r3, [sp, #4]
 80080d6:	3301      	adds	r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	bfb8      	it	lt
 80080de:	2301      	movlt	r3, #1
 80080e0:	69e0      	ldr	r0, [r4, #28]
 80080e2:	2100      	movs	r1, #0
 80080e4:	2204      	movs	r2, #4
 80080e6:	f102 0614 	add.w	r6, r2, #20
 80080ea:	429e      	cmp	r6, r3
 80080ec:	d93d      	bls.n	800816a <_dtoa_r+0x31a>
 80080ee:	6041      	str	r1, [r0, #4]
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fd9f 	bl	8008c34 <_Balloc>
 80080f6:	9000      	str	r0, [sp, #0]
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d139      	bne.n	8008170 <_dtoa_r+0x320>
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <_dtoa_r+0x308>)
 80080fe:	4602      	mov	r2, r0
 8008100:	f240 11af 	movw	r1, #431	; 0x1af
 8008104:	e6bd      	b.n	8007e82 <_dtoa_r+0x32>
 8008106:	2301      	movs	r3, #1
 8008108:	e7e1      	b.n	80080ce <_dtoa_r+0x27e>
 800810a:	2501      	movs	r5, #1
 800810c:	2300      	movs	r3, #0
 800810e:	9307      	str	r3, [sp, #28]
 8008110:	9509      	str	r5, [sp, #36]	; 0x24
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	2200      	movs	r2, #0
 800811c:	2312      	movs	r3, #18
 800811e:	e7d1      	b.n	80080c4 <_dtoa_r+0x274>
 8008120:	636f4361 	.word	0x636f4361
 8008124:	3fd287a7 	.word	0x3fd287a7
 8008128:	8b60c8b3 	.word	0x8b60c8b3
 800812c:	3fc68a28 	.word	0x3fc68a28
 8008130:	509f79fb 	.word	0x509f79fb
 8008134:	3fd34413 	.word	0x3fd34413
 8008138:	0800b50d 	.word	0x0800b50d
 800813c:	0800b524 	.word	0x0800b524
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	0800b509 	.word	0x0800b509
 8008148:	0800b500 	.word	0x0800b500
 800814c:	0800b4dd 	.word	0x0800b4dd
 8008150:	3ff80000 	.word	0x3ff80000
 8008154:	0800b610 	.word	0x0800b610
 8008158:	0800b57c 	.word	0x0800b57c
 800815c:	2301      	movs	r3, #1
 800815e:	9309      	str	r3, [sp, #36]	; 0x24
 8008160:	e7d7      	b.n	8008112 <_dtoa_r+0x2c2>
 8008162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	e7ba      	b.n	80080e0 <_dtoa_r+0x290>
 800816a:	3101      	adds	r1, #1
 800816c:	0052      	lsls	r2, r2, #1
 800816e:	e7ba      	b.n	80080e6 <_dtoa_r+0x296>
 8008170:	69e3      	ldr	r3, [r4, #28]
 8008172:	9a00      	ldr	r2, [sp, #0]
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	2b0e      	cmp	r3, #14
 800817a:	f200 80a8 	bhi.w	80082ce <_dtoa_r+0x47e>
 800817e:	2d00      	cmp	r5, #0
 8008180:	f000 80a5 	beq.w	80082ce <_dtoa_r+0x47e>
 8008184:	f1bb 0f00 	cmp.w	fp, #0
 8008188:	dd38      	ble.n	80081fc <_dtoa_r+0x3ac>
 800818a:	4bc0      	ldr	r3, [pc, #768]	; (800848c <_dtoa_r+0x63c>)
 800818c:	f00b 020f 	and.w	r2, fp, #15
 8008190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008194:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008198:	e9d3 6700 	ldrd	r6, r7, [r3]
 800819c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80081a0:	d019      	beq.n	80081d6 <_dtoa_r+0x386>
 80081a2:	4bbb      	ldr	r3, [pc, #748]	; (8008490 <_dtoa_r+0x640>)
 80081a4:	ec51 0b18 	vmov	r0, r1, d8
 80081a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081ac:	f7f8 fb56 	bl	800085c <__aeabi_ddiv>
 80081b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b4:	f008 080f 	and.w	r8, r8, #15
 80081b8:	2503      	movs	r5, #3
 80081ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008490 <_dtoa_r+0x640>
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d10a      	bne.n	80081da <_dtoa_r+0x38a>
 80081c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c8:	4632      	mov	r2, r6
 80081ca:	463b      	mov	r3, r7
 80081cc:	f7f8 fb46 	bl	800085c <__aeabi_ddiv>
 80081d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d4:	e02b      	b.n	800822e <_dtoa_r+0x3de>
 80081d6:	2502      	movs	r5, #2
 80081d8:	e7ef      	b.n	80081ba <_dtoa_r+0x36a>
 80081da:	f018 0f01 	tst.w	r8, #1
 80081de:	d008      	beq.n	80081f2 <_dtoa_r+0x3a2>
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081e8:	f7f8 fa0e 	bl	8000608 <__aeabi_dmul>
 80081ec:	3501      	adds	r5, #1
 80081ee:	4606      	mov	r6, r0
 80081f0:	460f      	mov	r7, r1
 80081f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081f6:	f109 0908 	add.w	r9, r9, #8
 80081fa:	e7e0      	b.n	80081be <_dtoa_r+0x36e>
 80081fc:	f000 809f 	beq.w	800833e <_dtoa_r+0x4ee>
 8008200:	f1cb 0600 	rsb	r6, fp, #0
 8008204:	4ba1      	ldr	r3, [pc, #644]	; (800848c <_dtoa_r+0x63c>)
 8008206:	4fa2      	ldr	r7, [pc, #648]	; (8008490 <_dtoa_r+0x640>)
 8008208:	f006 020f 	and.w	r2, r6, #15
 800820c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	ec51 0b18 	vmov	r0, r1, d8
 8008218:	f7f8 f9f6 	bl	8000608 <__aeabi_dmul>
 800821c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008220:	1136      	asrs	r6, r6, #4
 8008222:	2300      	movs	r3, #0
 8008224:	2502      	movs	r5, #2
 8008226:	2e00      	cmp	r6, #0
 8008228:	d17e      	bne.n	8008328 <_dtoa_r+0x4d8>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1d0      	bne.n	80081d0 <_dtoa_r+0x380>
 800822e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008230:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8084 	beq.w	8008342 <_dtoa_r+0x4f2>
 800823a:	4b96      	ldr	r3, [pc, #600]	; (8008494 <_dtoa_r+0x644>)
 800823c:	2200      	movs	r2, #0
 800823e:	4640      	mov	r0, r8
 8008240:	4649      	mov	r1, r9
 8008242:	f7f8 fc53 	bl	8000aec <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	d07b      	beq.n	8008342 <_dtoa_r+0x4f2>
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d078      	beq.n	8008342 <_dtoa_r+0x4f2>
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	dd39      	ble.n	80082ca <_dtoa_r+0x47a>
 8008256:	4b90      	ldr	r3, [pc, #576]	; (8008498 <_dtoa_r+0x648>)
 8008258:	2200      	movs	r2, #0
 800825a:	4640      	mov	r0, r8
 800825c:	4649      	mov	r1, r9
 800825e:	f7f8 f9d3 	bl	8000608 <__aeabi_dmul>
 8008262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008266:	9e01      	ldr	r6, [sp, #4]
 8008268:	f10b 37ff 	add.w	r7, fp, #4294967295
 800826c:	3501      	adds	r5, #1
 800826e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008272:	4628      	mov	r0, r5
 8008274:	f7f8 f95e 	bl	8000534 <__aeabi_i2d>
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	f7f8 f9c4 	bl	8000608 <__aeabi_dmul>
 8008280:	4b86      	ldr	r3, [pc, #536]	; (800849c <_dtoa_r+0x64c>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 f80a 	bl	800029c <__adddf3>
 8008288:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800828c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	2e00      	cmp	r6, #0
 8008294:	d158      	bne.n	8008348 <_dtoa_r+0x4f8>
 8008296:	4b82      	ldr	r3, [pc, #520]	; (80084a0 <_dtoa_r+0x650>)
 8008298:	2200      	movs	r2, #0
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f7 fffb 	bl	8000298 <__aeabi_dsub>
 80082a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082a6:	4680      	mov	r8, r0
 80082a8:	4689      	mov	r9, r1
 80082aa:	f7f8 fc3d 	bl	8000b28 <__aeabi_dcmpgt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8296 	bne.w	80087e0 <_dtoa_r+0x990>
 80082b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082b8:	4640      	mov	r0, r8
 80082ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082be:	4649      	mov	r1, r9
 80082c0:	f7f8 fc14 	bl	8000aec <__aeabi_dcmplt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f040 8289 	bne.w	80087dc <_dtoa_r+0x98c>
 80082ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f2c0 814e 	blt.w	8008572 <_dtoa_r+0x722>
 80082d6:	f1bb 0f0e 	cmp.w	fp, #14
 80082da:	f300 814a 	bgt.w	8008572 <_dtoa_r+0x722>
 80082de:	4b6b      	ldr	r3, [pc, #428]	; (800848c <_dtoa_r+0x63c>)
 80082e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f280 80dc 	bge.w	80084a8 <_dtoa_r+0x658>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f300 80d8 	bgt.w	80084a8 <_dtoa_r+0x658>
 80082f8:	f040 826f 	bne.w	80087da <_dtoa_r+0x98a>
 80082fc:	4b68      	ldr	r3, [pc, #416]	; (80084a0 <_dtoa_r+0x650>)
 80082fe:	2200      	movs	r2, #0
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800830c:	f7f8 fc02 	bl	8000b14 <__aeabi_dcmpge>
 8008310:	9e04      	ldr	r6, [sp, #16]
 8008312:	4637      	mov	r7, r6
 8008314:	2800      	cmp	r0, #0
 8008316:	f040 8245 	bne.w	80087a4 <_dtoa_r+0x954>
 800831a:	9d00      	ldr	r5, [sp, #0]
 800831c:	2331      	movs	r3, #49	; 0x31
 800831e:	f805 3b01 	strb.w	r3, [r5], #1
 8008322:	f10b 0b01 	add.w	fp, fp, #1
 8008326:	e241      	b.n	80087ac <_dtoa_r+0x95c>
 8008328:	07f2      	lsls	r2, r6, #31
 800832a:	d505      	bpl.n	8008338 <_dtoa_r+0x4e8>
 800832c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	3501      	adds	r5, #1
 8008336:	2301      	movs	r3, #1
 8008338:	1076      	asrs	r6, r6, #1
 800833a:	3708      	adds	r7, #8
 800833c:	e773      	b.n	8008226 <_dtoa_r+0x3d6>
 800833e:	2502      	movs	r5, #2
 8008340:	e775      	b.n	800822e <_dtoa_r+0x3de>
 8008342:	9e04      	ldr	r6, [sp, #16]
 8008344:	465f      	mov	r7, fp
 8008346:	e792      	b.n	800826e <_dtoa_r+0x41e>
 8008348:	9900      	ldr	r1, [sp, #0]
 800834a:	4b50      	ldr	r3, [pc, #320]	; (800848c <_dtoa_r+0x63c>)
 800834c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008350:	4431      	add	r1, r6
 8008352:	9102      	str	r1, [sp, #8]
 8008354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008356:	eeb0 9a47 	vmov.f32	s18, s14
 800835a:	eef0 9a67 	vmov.f32	s19, s15
 800835e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008366:	2900      	cmp	r1, #0
 8008368:	d044      	beq.n	80083f4 <_dtoa_r+0x5a4>
 800836a:	494e      	ldr	r1, [pc, #312]	; (80084a4 <_dtoa_r+0x654>)
 800836c:	2000      	movs	r0, #0
 800836e:	f7f8 fa75 	bl	800085c <__aeabi_ddiv>
 8008372:	ec53 2b19 	vmov	r2, r3, d9
 8008376:	f7f7 ff8f 	bl	8000298 <__aeabi_dsub>
 800837a:	9d00      	ldr	r5, [sp, #0]
 800837c:	ec41 0b19 	vmov	d9, r0, r1
 8008380:	4649      	mov	r1, r9
 8008382:	4640      	mov	r0, r8
 8008384:	f7f8 fbf0 	bl	8000b68 <__aeabi_d2iz>
 8008388:	4606      	mov	r6, r0
 800838a:	f7f8 f8d3 	bl	8000534 <__aeabi_i2d>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4640      	mov	r0, r8
 8008394:	4649      	mov	r1, r9
 8008396:	f7f7 ff7f 	bl	8000298 <__aeabi_dsub>
 800839a:	3630      	adds	r6, #48	; 0x30
 800839c:	f805 6b01 	strb.w	r6, [r5], #1
 80083a0:	ec53 2b19 	vmov	r2, r3, d9
 80083a4:	4680      	mov	r8, r0
 80083a6:	4689      	mov	r9, r1
 80083a8:	f7f8 fba0 	bl	8000aec <__aeabi_dcmplt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d164      	bne.n	800847a <_dtoa_r+0x62a>
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	4937      	ldr	r1, [pc, #220]	; (8008494 <_dtoa_r+0x644>)
 80083b6:	2000      	movs	r0, #0
 80083b8:	f7f7 ff6e 	bl	8000298 <__aeabi_dsub>
 80083bc:	ec53 2b19 	vmov	r2, r3, d9
 80083c0:	f7f8 fb94 	bl	8000aec <__aeabi_dcmplt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f040 80b6 	bne.w	8008536 <_dtoa_r+0x6e6>
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	429d      	cmp	r5, r3
 80083ce:	f43f af7c 	beq.w	80082ca <_dtoa_r+0x47a>
 80083d2:	4b31      	ldr	r3, [pc, #196]	; (8008498 <_dtoa_r+0x648>)
 80083d4:	ec51 0b19 	vmov	r0, r1, d9
 80083d8:	2200      	movs	r2, #0
 80083da:	f7f8 f915 	bl	8000608 <__aeabi_dmul>
 80083de:	4b2e      	ldr	r3, [pc, #184]	; (8008498 <_dtoa_r+0x648>)
 80083e0:	ec41 0b19 	vmov	d9, r0, r1
 80083e4:	2200      	movs	r2, #0
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f8 f90d 	bl	8000608 <__aeabi_dmul>
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	e7c5      	b.n	8008380 <_dtoa_r+0x530>
 80083f4:	ec51 0b17 	vmov	r0, r1, d7
 80083f8:	f7f8 f906 	bl	8000608 <__aeabi_dmul>
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	9d00      	ldr	r5, [sp, #0]
 8008400:	930f      	str	r3, [sp, #60]	; 0x3c
 8008402:	ec41 0b19 	vmov	d9, r0, r1
 8008406:	4649      	mov	r1, r9
 8008408:	4640      	mov	r0, r8
 800840a:	f7f8 fbad 	bl	8000b68 <__aeabi_d2iz>
 800840e:	4606      	mov	r6, r0
 8008410:	f7f8 f890 	bl	8000534 <__aeabi_i2d>
 8008414:	3630      	adds	r6, #48	; 0x30
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	f7f7 ff3b 	bl	8000298 <__aeabi_dsub>
 8008422:	f805 6b01 	strb.w	r6, [r5], #1
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	429d      	cmp	r5, r3
 800842a:	4680      	mov	r8, r0
 800842c:	4689      	mov	r9, r1
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	d124      	bne.n	800847e <_dtoa_r+0x62e>
 8008434:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <_dtoa_r+0x654>)
 8008436:	ec51 0b19 	vmov	r0, r1, d9
 800843a:	f7f7 ff2f 	bl	800029c <__adddf3>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	f7f8 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d173      	bne.n	8008536 <_dtoa_r+0x6e6>
 800844e:	ec53 2b19 	vmov	r2, r3, d9
 8008452:	4914      	ldr	r1, [pc, #80]	; (80084a4 <_dtoa_r+0x654>)
 8008454:	2000      	movs	r0, #0
 8008456:	f7f7 ff1f 	bl	8000298 <__aeabi_dsub>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4640      	mov	r0, r8
 8008460:	4649      	mov	r1, r9
 8008462:	f7f8 fb43 	bl	8000aec <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f af2f 	beq.w	80082ca <_dtoa_r+0x47a>
 800846c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800846e:	1e6b      	subs	r3, r5, #1
 8008470:	930f      	str	r3, [sp, #60]	; 0x3c
 8008472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008476:	2b30      	cmp	r3, #48	; 0x30
 8008478:	d0f8      	beq.n	800846c <_dtoa_r+0x61c>
 800847a:	46bb      	mov	fp, r7
 800847c:	e04a      	b.n	8008514 <_dtoa_r+0x6c4>
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <_dtoa_r+0x648>)
 8008480:	f7f8 f8c2 	bl	8000608 <__aeabi_dmul>
 8008484:	4680      	mov	r8, r0
 8008486:	4689      	mov	r9, r1
 8008488:	e7bd      	b.n	8008406 <_dtoa_r+0x5b6>
 800848a:	bf00      	nop
 800848c:	0800b610 	.word	0x0800b610
 8008490:	0800b5e8 	.word	0x0800b5e8
 8008494:	3ff00000 	.word	0x3ff00000
 8008498:	40240000 	.word	0x40240000
 800849c:	401c0000 	.word	0x401c0000
 80084a0:	40140000 	.word	0x40140000
 80084a4:	3fe00000 	.word	0x3fe00000
 80084a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084ac:	9d00      	ldr	r5, [sp, #0]
 80084ae:	4642      	mov	r2, r8
 80084b0:	464b      	mov	r3, r9
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f8 f9d1 	bl	800085c <__aeabi_ddiv>
 80084ba:	f7f8 fb55 	bl	8000b68 <__aeabi_d2iz>
 80084be:	9001      	str	r0, [sp, #4]
 80084c0:	f7f8 f838 	bl	8000534 <__aeabi_i2d>
 80084c4:	4642      	mov	r2, r8
 80084c6:	464b      	mov	r3, r9
 80084c8:	f7f8 f89e 	bl	8000608 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f7 fee0 	bl	8000298 <__aeabi_dsub>
 80084d8:	9e01      	ldr	r6, [sp, #4]
 80084da:	9f04      	ldr	r7, [sp, #16]
 80084dc:	3630      	adds	r6, #48	; 0x30
 80084de:	f805 6b01 	strb.w	r6, [r5], #1
 80084e2:	9e00      	ldr	r6, [sp, #0]
 80084e4:	1bae      	subs	r6, r5, r6
 80084e6:	42b7      	cmp	r7, r6
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	d134      	bne.n	8008558 <_dtoa_r+0x708>
 80084ee:	f7f7 fed5 	bl	800029c <__adddf3>
 80084f2:	4642      	mov	r2, r8
 80084f4:	464b      	mov	r3, r9
 80084f6:	4606      	mov	r6, r0
 80084f8:	460f      	mov	r7, r1
 80084fa:	f7f8 fb15 	bl	8000b28 <__aeabi_dcmpgt>
 80084fe:	b9c8      	cbnz	r0, 8008534 <_dtoa_r+0x6e4>
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f8 fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 800850c:	b110      	cbz	r0, 8008514 <_dtoa_r+0x6c4>
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	07db      	lsls	r3, r3, #31
 8008512:	d40f      	bmi.n	8008534 <_dtoa_r+0x6e4>
 8008514:	4651      	mov	r1, sl
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fbcc 	bl	8008cb4 <_Bfree>
 800851c:	2300      	movs	r3, #0
 800851e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008520:	702b      	strb	r3, [r5, #0]
 8008522:	f10b 0301 	add.w	r3, fp, #1
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f ace2 	beq.w	8007ef4 <_dtoa_r+0xa4>
 8008530:	601d      	str	r5, [r3, #0]
 8008532:	e4df      	b.n	8007ef4 <_dtoa_r+0xa4>
 8008534:	465f      	mov	r7, fp
 8008536:	462b      	mov	r3, r5
 8008538:	461d      	mov	r5, r3
 800853a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853e:	2a39      	cmp	r2, #57	; 0x39
 8008540:	d106      	bne.n	8008550 <_dtoa_r+0x700>
 8008542:	9a00      	ldr	r2, [sp, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d1f7      	bne.n	8008538 <_dtoa_r+0x6e8>
 8008548:	9900      	ldr	r1, [sp, #0]
 800854a:	2230      	movs	r2, #48	; 0x30
 800854c:	3701      	adds	r7, #1
 800854e:	700a      	strb	r2, [r1, #0]
 8008550:	781a      	ldrb	r2, [r3, #0]
 8008552:	3201      	adds	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e790      	b.n	800847a <_dtoa_r+0x62a>
 8008558:	4ba3      	ldr	r3, [pc, #652]	; (80087e8 <_dtoa_r+0x998>)
 800855a:	2200      	movs	r2, #0
 800855c:	f7f8 f854 	bl	8000608 <__aeabi_dmul>
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	f7f8 fab6 	bl	8000ad8 <__aeabi_dcmpeq>
 800856c:	2800      	cmp	r0, #0
 800856e:	d09e      	beq.n	80084ae <_dtoa_r+0x65e>
 8008570:	e7d0      	b.n	8008514 <_dtoa_r+0x6c4>
 8008572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008574:	2a00      	cmp	r2, #0
 8008576:	f000 80ca 	beq.w	800870e <_dtoa_r+0x8be>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	2a01      	cmp	r2, #1
 800857e:	f300 80ad 	bgt.w	80086dc <_dtoa_r+0x88c>
 8008582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008584:	2a00      	cmp	r2, #0
 8008586:	f000 80a5 	beq.w	80086d4 <_dtoa_r+0x884>
 800858a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800858e:	9e08      	ldr	r6, [sp, #32]
 8008590:	9d05      	ldr	r5, [sp, #20]
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	441a      	add	r2, r3
 8008596:	9205      	str	r2, [sp, #20]
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	2101      	movs	r1, #1
 800859c:	441a      	add	r2, r3
 800859e:	4620      	mov	r0, r4
 80085a0:	9206      	str	r2, [sp, #24]
 80085a2:	f000 fc3d 	bl	8008e20 <__i2b>
 80085a6:	4607      	mov	r7, r0
 80085a8:	b165      	cbz	r5, 80085c4 <_dtoa_r+0x774>
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd09      	ble.n	80085c4 <_dtoa_r+0x774>
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	9a05      	ldr	r2, [sp, #20]
 80085b4:	bfa8      	it	ge
 80085b6:	462b      	movge	r3, r5
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	9205      	str	r2, [sp, #20]
 80085bc:	9a06      	ldr	r2, [sp, #24]
 80085be:	1aed      	subs	r5, r5, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	9306      	str	r3, [sp, #24]
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	b1f3      	cbz	r3, 8008606 <_dtoa_r+0x7b6>
 80085c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80a3 	beq.w	8008716 <_dtoa_r+0x8c6>
 80085d0:	2e00      	cmp	r6, #0
 80085d2:	dd10      	ble.n	80085f6 <_dtoa_r+0x7a6>
 80085d4:	4639      	mov	r1, r7
 80085d6:	4632      	mov	r2, r6
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fce1 	bl	8008fa0 <__pow5mult>
 80085de:	4652      	mov	r2, sl
 80085e0:	4601      	mov	r1, r0
 80085e2:	4607      	mov	r7, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fc31 	bl	8008e4c <__multiply>
 80085ea:	4651      	mov	r1, sl
 80085ec:	4680      	mov	r8, r0
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fb60 	bl	8008cb4 <_Bfree>
 80085f4:	46c2      	mov	sl, r8
 80085f6:	9b08      	ldr	r3, [sp, #32]
 80085f8:	1b9a      	subs	r2, r3, r6
 80085fa:	d004      	beq.n	8008606 <_dtoa_r+0x7b6>
 80085fc:	4651      	mov	r1, sl
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 fcce 	bl	8008fa0 <__pow5mult>
 8008604:	4682      	mov	sl, r0
 8008606:	2101      	movs	r1, #1
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fc09 	bl	8008e20 <__i2b>
 800860e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008610:	2b00      	cmp	r3, #0
 8008612:	4606      	mov	r6, r0
 8008614:	f340 8081 	ble.w	800871a <_dtoa_r+0x8ca>
 8008618:	461a      	mov	r2, r3
 800861a:	4601      	mov	r1, r0
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fcbf 	bl	8008fa0 <__pow5mult>
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b01      	cmp	r3, #1
 8008626:	4606      	mov	r6, r0
 8008628:	dd7a      	ble.n	8008720 <_dtoa_r+0x8d0>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	6933      	ldr	r3, [r6, #16]
 8008630:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008634:	6918      	ldr	r0, [r3, #16]
 8008636:	f000 fba5 	bl	8008d84 <__hi0bits>
 800863a:	f1c0 0020 	rsb	r0, r0, #32
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	4418      	add	r0, r3
 8008642:	f010 001f 	ands.w	r0, r0, #31
 8008646:	f000 8094 	beq.w	8008772 <_dtoa_r+0x922>
 800864a:	f1c0 0320 	rsb	r3, r0, #32
 800864e:	2b04      	cmp	r3, #4
 8008650:	f340 8085 	ble.w	800875e <_dtoa_r+0x90e>
 8008654:	9b05      	ldr	r3, [sp, #20]
 8008656:	f1c0 001c 	rsb	r0, r0, #28
 800865a:	4403      	add	r3, r0
 800865c:	9305      	str	r3, [sp, #20]
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	4403      	add	r3, r0
 8008662:	4405      	add	r5, r0
 8008664:	9306      	str	r3, [sp, #24]
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd05      	ble.n	8008678 <_dtoa_r+0x828>
 800866c:	4651      	mov	r1, sl
 800866e:	461a      	mov	r2, r3
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fcef 	bl	8009054 <__lshift>
 8008676:	4682      	mov	sl, r0
 8008678:	9b06      	ldr	r3, [sp, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dd05      	ble.n	800868a <_dtoa_r+0x83a>
 800867e:	4631      	mov	r1, r6
 8008680:	461a      	mov	r2, r3
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fce6 	bl	8009054 <__lshift>
 8008688:	4606      	mov	r6, r0
 800868a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800868c:	2b00      	cmp	r3, #0
 800868e:	d072      	beq.n	8008776 <_dtoa_r+0x926>
 8008690:	4631      	mov	r1, r6
 8008692:	4650      	mov	r0, sl
 8008694:	f000 fd4a 	bl	800912c <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	da6c      	bge.n	8008776 <_dtoa_r+0x926>
 800869c:	2300      	movs	r3, #0
 800869e:	4651      	mov	r1, sl
 80086a0:	220a      	movs	r2, #10
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 fb28 	bl	8008cf8 <__multadd>
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086ae:	4682      	mov	sl, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 81b0 	beq.w	8008a16 <_dtoa_r+0xbc6>
 80086b6:	2300      	movs	r3, #0
 80086b8:	4639      	mov	r1, r7
 80086ba:	220a      	movs	r2, #10
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fb1b 	bl	8008cf8 <__multadd>
 80086c2:	9b01      	ldr	r3, [sp, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	4607      	mov	r7, r0
 80086c8:	f300 8096 	bgt.w	80087f8 <_dtoa_r+0x9a8>
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	dc59      	bgt.n	8008786 <_dtoa_r+0x936>
 80086d2:	e091      	b.n	80087f8 <_dtoa_r+0x9a8>
 80086d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086da:	e758      	b.n	800858e <_dtoa_r+0x73e>
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	1e5e      	subs	r6, r3, #1
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	42b3      	cmp	r3, r6
 80086e4:	bfbf      	itttt	lt
 80086e6:	9b08      	ldrlt	r3, [sp, #32]
 80086e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80086ea:	9608      	strlt	r6, [sp, #32]
 80086ec:	1af3      	sublt	r3, r6, r3
 80086ee:	bfb4      	ite	lt
 80086f0:	18d2      	addlt	r2, r2, r3
 80086f2:	1b9e      	subge	r6, r3, r6
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	bfbc      	itt	lt
 80086f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80086fa:	2600      	movlt	r6, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfb7      	itett	lt
 8008700:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008704:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008708:	1a9d      	sublt	r5, r3, r2
 800870a:	2300      	movlt	r3, #0
 800870c:	e741      	b.n	8008592 <_dtoa_r+0x742>
 800870e:	9e08      	ldr	r6, [sp, #32]
 8008710:	9d05      	ldr	r5, [sp, #20]
 8008712:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008714:	e748      	b.n	80085a8 <_dtoa_r+0x758>
 8008716:	9a08      	ldr	r2, [sp, #32]
 8008718:	e770      	b.n	80085fc <_dtoa_r+0x7ac>
 800871a:	9b07      	ldr	r3, [sp, #28]
 800871c:	2b01      	cmp	r3, #1
 800871e:	dc19      	bgt.n	8008754 <_dtoa_r+0x904>
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	b9bb      	cbnz	r3, 8008754 <_dtoa_r+0x904>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800872a:	b99b      	cbnz	r3, 8008754 <_dtoa_r+0x904>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008732:	0d1b      	lsrs	r3, r3, #20
 8008734:	051b      	lsls	r3, r3, #20
 8008736:	b183      	cbz	r3, 800875a <_dtoa_r+0x90a>
 8008738:	9b05      	ldr	r3, [sp, #20]
 800873a:	3301      	adds	r3, #1
 800873c:	9305      	str	r3, [sp, #20]
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	3301      	adds	r3, #1
 8008742:	9306      	str	r3, [sp, #24]
 8008744:	f04f 0801 	mov.w	r8, #1
 8008748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	f47f af6f 	bne.w	800862e <_dtoa_r+0x7de>
 8008750:	2001      	movs	r0, #1
 8008752:	e774      	b.n	800863e <_dtoa_r+0x7ee>
 8008754:	f04f 0800 	mov.w	r8, #0
 8008758:	e7f6      	b.n	8008748 <_dtoa_r+0x8f8>
 800875a:	4698      	mov	r8, r3
 800875c:	e7f4      	b.n	8008748 <_dtoa_r+0x8f8>
 800875e:	d082      	beq.n	8008666 <_dtoa_r+0x816>
 8008760:	9a05      	ldr	r2, [sp, #20]
 8008762:	331c      	adds	r3, #28
 8008764:	441a      	add	r2, r3
 8008766:	9205      	str	r2, [sp, #20]
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	441a      	add	r2, r3
 800876c:	441d      	add	r5, r3
 800876e:	9206      	str	r2, [sp, #24]
 8008770:	e779      	b.n	8008666 <_dtoa_r+0x816>
 8008772:	4603      	mov	r3, r0
 8008774:	e7f4      	b.n	8008760 <_dtoa_r+0x910>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc37      	bgt.n	80087ec <_dtoa_r+0x99c>
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	2b02      	cmp	r3, #2
 8008780:	dd34      	ble.n	80087ec <_dtoa_r+0x99c>
 8008782:	9b04      	ldr	r3, [sp, #16]
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	b963      	cbnz	r3, 80087a4 <_dtoa_r+0x954>
 800878a:	4631      	mov	r1, r6
 800878c:	2205      	movs	r2, #5
 800878e:	4620      	mov	r0, r4
 8008790:	f000 fab2 	bl	8008cf8 <__multadd>
 8008794:	4601      	mov	r1, r0
 8008796:	4606      	mov	r6, r0
 8008798:	4650      	mov	r0, sl
 800879a:	f000 fcc7 	bl	800912c <__mcmp>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f73f adbb 	bgt.w	800831a <_dtoa_r+0x4ca>
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	9d00      	ldr	r5, [sp, #0]
 80087a8:	ea6f 0b03 	mvn.w	fp, r3
 80087ac:	f04f 0800 	mov.w	r8, #0
 80087b0:	4631      	mov	r1, r6
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fa7e 	bl	8008cb4 <_Bfree>
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	f43f aeab 	beq.w	8008514 <_dtoa_r+0x6c4>
 80087be:	f1b8 0f00 	cmp.w	r8, #0
 80087c2:	d005      	beq.n	80087d0 <_dtoa_r+0x980>
 80087c4:	45b8      	cmp	r8, r7
 80087c6:	d003      	beq.n	80087d0 <_dtoa_r+0x980>
 80087c8:	4641      	mov	r1, r8
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fa72 	bl	8008cb4 <_Bfree>
 80087d0:	4639      	mov	r1, r7
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fa6e 	bl	8008cb4 <_Bfree>
 80087d8:	e69c      	b.n	8008514 <_dtoa_r+0x6c4>
 80087da:	2600      	movs	r6, #0
 80087dc:	4637      	mov	r7, r6
 80087de:	e7e1      	b.n	80087a4 <_dtoa_r+0x954>
 80087e0:	46bb      	mov	fp, r7
 80087e2:	4637      	mov	r7, r6
 80087e4:	e599      	b.n	800831a <_dtoa_r+0x4ca>
 80087e6:	bf00      	nop
 80087e8:	40240000 	.word	0x40240000
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80c8 	beq.w	8008984 <_dtoa_r+0xb34>
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	dd05      	ble.n	8008808 <_dtoa_r+0x9b8>
 80087fc:	4639      	mov	r1, r7
 80087fe:	462a      	mov	r2, r5
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fc27 	bl	8009054 <__lshift>
 8008806:	4607      	mov	r7, r0
 8008808:	f1b8 0f00 	cmp.w	r8, #0
 800880c:	d05b      	beq.n	80088c6 <_dtoa_r+0xa76>
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fa0f 	bl	8008c34 <_Balloc>
 8008816:	4605      	mov	r5, r0
 8008818:	b928      	cbnz	r0, 8008826 <_dtoa_r+0x9d6>
 800881a:	4b83      	ldr	r3, [pc, #524]	; (8008a28 <_dtoa_r+0xbd8>)
 800881c:	4602      	mov	r2, r0
 800881e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008822:	f7ff bb2e 	b.w	8007e82 <_dtoa_r+0x32>
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	3202      	adds	r2, #2
 800882a:	0092      	lsls	r2, r2, #2
 800882c:	f107 010c 	add.w	r1, r7, #12
 8008830:	300c      	adds	r0, #12
 8008832:	f7ff fa74 	bl	8007d1e <memcpy>
 8008836:	2201      	movs	r2, #1
 8008838:	4629      	mov	r1, r5
 800883a:	4620      	mov	r0, r4
 800883c:	f000 fc0a 	bl	8009054 <__lshift>
 8008840:	9b00      	ldr	r3, [sp, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800884a:	4413      	add	r3, r2
 800884c:	9308      	str	r3, [sp, #32]
 800884e:	9b02      	ldr	r3, [sp, #8]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	46b8      	mov	r8, r7
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	4607      	mov	r7, r0
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	4631      	mov	r1, r6
 800885e:	3b01      	subs	r3, #1
 8008860:	4650      	mov	r0, sl
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	f7ff fa69 	bl	8007d3a <quorem>
 8008868:	4641      	mov	r1, r8
 800886a:	9002      	str	r0, [sp, #8]
 800886c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008870:	4650      	mov	r0, sl
 8008872:	f000 fc5b 	bl	800912c <__mcmp>
 8008876:	463a      	mov	r2, r7
 8008878:	9005      	str	r0, [sp, #20]
 800887a:	4631      	mov	r1, r6
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fc71 	bl	8009164 <__mdiff>
 8008882:	68c2      	ldr	r2, [r0, #12]
 8008884:	4605      	mov	r5, r0
 8008886:	bb02      	cbnz	r2, 80088ca <_dtoa_r+0xa7a>
 8008888:	4601      	mov	r1, r0
 800888a:	4650      	mov	r0, sl
 800888c:	f000 fc4e 	bl	800912c <__mcmp>
 8008890:	4602      	mov	r2, r0
 8008892:	4629      	mov	r1, r5
 8008894:	4620      	mov	r0, r4
 8008896:	9209      	str	r2, [sp, #36]	; 0x24
 8008898:	f000 fa0c 	bl	8008cb4 <_Bfree>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a0:	9d04      	ldr	r5, [sp, #16]
 80088a2:	ea43 0102 	orr.w	r1, r3, r2
 80088a6:	9b06      	ldr	r3, [sp, #24]
 80088a8:	4319      	orrs	r1, r3
 80088aa:	d110      	bne.n	80088ce <_dtoa_r+0xa7e>
 80088ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088b0:	d029      	beq.n	8008906 <_dtoa_r+0xab6>
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd02      	ble.n	80088be <_dtoa_r+0xa6e>
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	f883 9000 	strb.w	r9, [r3]
 80088c4:	e774      	b.n	80087b0 <_dtoa_r+0x960>
 80088c6:	4638      	mov	r0, r7
 80088c8:	e7ba      	b.n	8008840 <_dtoa_r+0x9f0>
 80088ca:	2201      	movs	r2, #1
 80088cc:	e7e1      	b.n	8008892 <_dtoa_r+0xa42>
 80088ce:	9b05      	ldr	r3, [sp, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db04      	blt.n	80088de <_dtoa_r+0xa8e>
 80088d4:	9907      	ldr	r1, [sp, #28]
 80088d6:	430b      	orrs	r3, r1
 80088d8:	9906      	ldr	r1, [sp, #24]
 80088da:	430b      	orrs	r3, r1
 80088dc:	d120      	bne.n	8008920 <_dtoa_r+0xad0>
 80088de:	2a00      	cmp	r2, #0
 80088e0:	dded      	ble.n	80088be <_dtoa_r+0xa6e>
 80088e2:	4651      	mov	r1, sl
 80088e4:	2201      	movs	r2, #1
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fbb4 	bl	8009054 <__lshift>
 80088ec:	4631      	mov	r1, r6
 80088ee:	4682      	mov	sl, r0
 80088f0:	f000 fc1c 	bl	800912c <__mcmp>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dc03      	bgt.n	8008900 <_dtoa_r+0xab0>
 80088f8:	d1e1      	bne.n	80088be <_dtoa_r+0xa6e>
 80088fa:	f019 0f01 	tst.w	r9, #1
 80088fe:	d0de      	beq.n	80088be <_dtoa_r+0xa6e>
 8008900:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008904:	d1d8      	bne.n	80088b8 <_dtoa_r+0xa68>
 8008906:	9a01      	ldr	r2, [sp, #4]
 8008908:	2339      	movs	r3, #57	; 0x39
 800890a:	7013      	strb	r3, [r2, #0]
 800890c:	462b      	mov	r3, r5
 800890e:	461d      	mov	r5, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008916:	2a39      	cmp	r2, #57	; 0x39
 8008918:	d06c      	beq.n	80089f4 <_dtoa_r+0xba4>
 800891a:	3201      	adds	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	e747      	b.n	80087b0 <_dtoa_r+0x960>
 8008920:	2a00      	cmp	r2, #0
 8008922:	dd07      	ble.n	8008934 <_dtoa_r+0xae4>
 8008924:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008928:	d0ed      	beq.n	8008906 <_dtoa_r+0xab6>
 800892a:	9a01      	ldr	r2, [sp, #4]
 800892c:	f109 0301 	add.w	r3, r9, #1
 8008930:	7013      	strb	r3, [r2, #0]
 8008932:	e73d      	b.n	80087b0 <_dtoa_r+0x960>
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	9a08      	ldr	r2, [sp, #32]
 8008938:	f803 9c01 	strb.w	r9, [r3, #-1]
 800893c:	4293      	cmp	r3, r2
 800893e:	d043      	beq.n	80089c8 <_dtoa_r+0xb78>
 8008940:	4651      	mov	r1, sl
 8008942:	2300      	movs	r3, #0
 8008944:	220a      	movs	r2, #10
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f9d6 	bl	8008cf8 <__multadd>
 800894c:	45b8      	cmp	r8, r7
 800894e:	4682      	mov	sl, r0
 8008950:	f04f 0300 	mov.w	r3, #0
 8008954:	f04f 020a 	mov.w	r2, #10
 8008958:	4641      	mov	r1, r8
 800895a:	4620      	mov	r0, r4
 800895c:	d107      	bne.n	800896e <_dtoa_r+0xb1e>
 800895e:	f000 f9cb 	bl	8008cf8 <__multadd>
 8008962:	4680      	mov	r8, r0
 8008964:	4607      	mov	r7, r0
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	3301      	adds	r3, #1
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	e775      	b.n	800885a <_dtoa_r+0xa0a>
 800896e:	f000 f9c3 	bl	8008cf8 <__multadd>
 8008972:	4639      	mov	r1, r7
 8008974:	4680      	mov	r8, r0
 8008976:	2300      	movs	r3, #0
 8008978:	220a      	movs	r2, #10
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f9bc 	bl	8008cf8 <__multadd>
 8008980:	4607      	mov	r7, r0
 8008982:	e7f0      	b.n	8008966 <_dtoa_r+0xb16>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	9d00      	ldr	r5, [sp, #0]
 800898a:	4631      	mov	r1, r6
 800898c:	4650      	mov	r0, sl
 800898e:	f7ff f9d4 	bl	8007d3a <quorem>
 8008992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	f805 9b01 	strb.w	r9, [r5], #1
 800899c:	1aea      	subs	r2, r5, r3
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	4293      	cmp	r3, r2
 80089a2:	dd07      	ble.n	80089b4 <_dtoa_r+0xb64>
 80089a4:	4651      	mov	r1, sl
 80089a6:	2300      	movs	r3, #0
 80089a8:	220a      	movs	r2, #10
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 f9a4 	bl	8008cf8 <__multadd>
 80089b0:	4682      	mov	sl, r0
 80089b2:	e7ea      	b.n	800898a <_dtoa_r+0xb3a>
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bfc8      	it	gt
 80089ba:	461d      	movgt	r5, r3
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	bfd8      	it	le
 80089c0:	2501      	movle	r5, #1
 80089c2:	441d      	add	r5, r3
 80089c4:	f04f 0800 	mov.w	r8, #0
 80089c8:	4651      	mov	r1, sl
 80089ca:	2201      	movs	r2, #1
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fb41 	bl	8009054 <__lshift>
 80089d2:	4631      	mov	r1, r6
 80089d4:	4682      	mov	sl, r0
 80089d6:	f000 fba9 	bl	800912c <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	dc96      	bgt.n	800890c <_dtoa_r+0xabc>
 80089de:	d102      	bne.n	80089e6 <_dtoa_r+0xb96>
 80089e0:	f019 0f01 	tst.w	r9, #1
 80089e4:	d192      	bne.n	800890c <_dtoa_r+0xabc>
 80089e6:	462b      	mov	r3, r5
 80089e8:	461d      	mov	r5, r3
 80089ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ee:	2a30      	cmp	r2, #48	; 0x30
 80089f0:	d0fa      	beq.n	80089e8 <_dtoa_r+0xb98>
 80089f2:	e6dd      	b.n	80087b0 <_dtoa_r+0x960>
 80089f4:	9a00      	ldr	r2, [sp, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d189      	bne.n	800890e <_dtoa_r+0xabe>
 80089fa:	f10b 0b01 	add.w	fp, fp, #1
 80089fe:	2331      	movs	r3, #49	; 0x31
 8008a00:	e796      	b.n	8008930 <_dtoa_r+0xae0>
 8008a02:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <_dtoa_r+0xbdc>)
 8008a04:	f7ff ba99 	b.w	8007f3a <_dtoa_r+0xea>
 8008a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f47f aa6d 	bne.w	8007eea <_dtoa_r+0x9a>
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <_dtoa_r+0xbe0>)
 8008a12:	f7ff ba92 	b.w	8007f3a <_dtoa_r+0xea>
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dcb5      	bgt.n	8008988 <_dtoa_r+0xb38>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	f73f aeb1 	bgt.w	8008786 <_dtoa_r+0x936>
 8008a24:	e7b0      	b.n	8008988 <_dtoa_r+0xb38>
 8008a26:	bf00      	nop
 8008a28:	0800b57c 	.word	0x0800b57c
 8008a2c:	0800b4dc 	.word	0x0800b4dc
 8008a30:	0800b500 	.word	0x0800b500

08008a34 <_free_r>:
 8008a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d044      	beq.n	8008ac4 <_free_r+0x90>
 8008a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a3e:	9001      	str	r0, [sp, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f1a1 0404 	sub.w	r4, r1, #4
 8008a46:	bfb8      	it	lt
 8008a48:	18e4      	addlt	r4, r4, r3
 8008a4a:	f000 f8e7 	bl	8008c1c <__malloc_lock>
 8008a4e:	4a1e      	ldr	r2, [pc, #120]	; (8008ac8 <_free_r+0x94>)
 8008a50:	9801      	ldr	r0, [sp, #4]
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	b933      	cbnz	r3, 8008a64 <_free_r+0x30>
 8008a56:	6063      	str	r3, [r4, #4]
 8008a58:	6014      	str	r4, [r2, #0]
 8008a5a:	b003      	add	sp, #12
 8008a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a60:	f000 b8e2 	b.w	8008c28 <__malloc_unlock>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d908      	bls.n	8008a7a <_free_r+0x46>
 8008a68:	6825      	ldr	r5, [r4, #0]
 8008a6a:	1961      	adds	r1, r4, r5
 8008a6c:	428b      	cmp	r3, r1
 8008a6e:	bf01      	itttt	eq
 8008a70:	6819      	ldreq	r1, [r3, #0]
 8008a72:	685b      	ldreq	r3, [r3, #4]
 8008a74:	1949      	addeq	r1, r1, r5
 8008a76:	6021      	streq	r1, [r4, #0]
 8008a78:	e7ed      	b.n	8008a56 <_free_r+0x22>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b10b      	cbz	r3, 8008a84 <_free_r+0x50>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d9fa      	bls.n	8008a7a <_free_r+0x46>
 8008a84:	6811      	ldr	r1, [r2, #0]
 8008a86:	1855      	adds	r5, r2, r1
 8008a88:	42a5      	cmp	r5, r4
 8008a8a:	d10b      	bne.n	8008aa4 <_free_r+0x70>
 8008a8c:	6824      	ldr	r4, [r4, #0]
 8008a8e:	4421      	add	r1, r4
 8008a90:	1854      	adds	r4, r2, r1
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	d1e0      	bne.n	8008a5a <_free_r+0x26>
 8008a98:	681c      	ldr	r4, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	6053      	str	r3, [r2, #4]
 8008a9e:	440c      	add	r4, r1
 8008aa0:	6014      	str	r4, [r2, #0]
 8008aa2:	e7da      	b.n	8008a5a <_free_r+0x26>
 8008aa4:	d902      	bls.n	8008aac <_free_r+0x78>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	e7d6      	b.n	8008a5a <_free_r+0x26>
 8008aac:	6825      	ldr	r5, [r4, #0]
 8008aae:	1961      	adds	r1, r4, r5
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	bf04      	itt	eq
 8008ab4:	6819      	ldreq	r1, [r3, #0]
 8008ab6:	685b      	ldreq	r3, [r3, #4]
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	bf04      	itt	eq
 8008abc:	1949      	addeq	r1, r1, r5
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	6054      	str	r4, [r2, #4]
 8008ac2:	e7ca      	b.n	8008a5a <_free_r+0x26>
 8008ac4:	b003      	add	sp, #12
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	2000492c 	.word	0x2000492c

08008acc <malloc>:
 8008acc:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <malloc+0xc>)
 8008ace:	4601      	mov	r1, r0
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	f000 b823 	b.w	8008b1c <_malloc_r>
 8008ad6:	bf00      	nop
 8008ad8:	20000070 	.word	0x20000070

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0e      	ldr	r6, [pc, #56]	; (8008b18 <sbrk_aligned+0x3c>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 fe40 	bl	800976c <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fe3b 	bl	800976c <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d00a      	beq.n	8008b10 <sbrk_aligned+0x34>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d007      	beq.n	8008b14 <sbrk_aligned+0x38>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 fe30 	bl	800976c <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d101      	bne.n	8008b14 <sbrk_aligned+0x38>
 8008b10:	f04f 34ff 	mov.w	r4, #4294967295
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	20004930 	.word	0x20004930

08008b1c <_malloc_r>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	1ccd      	adds	r5, r1, #3
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	4607      	mov	r7, r0
 8008b32:	db01      	blt.n	8008b38 <_malloc_r+0x1c>
 8008b34:	42a9      	cmp	r1, r5
 8008b36:	d905      	bls.n	8008b44 <_malloc_r+0x28>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c18 <_malloc_r+0xfc>
 8008b48:	f000 f868 	bl	8008c1c <__malloc_lock>
 8008b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b50:	461c      	mov	r4, r3
 8008b52:	bb5c      	cbnz	r4, 8008bac <_malloc_r+0x90>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7ff ffc0 	bl	8008adc <sbrk_aligned>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	4604      	mov	r4, r0
 8008b60:	d155      	bne.n	8008c0e <_malloc_r+0xf2>
 8008b62:	f8d8 4000 	ldr.w	r4, [r8]
 8008b66:	4626      	mov	r6, r4
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	d145      	bne.n	8008bf8 <_malloc_r+0xdc>
 8008b6c:	2c00      	cmp	r4, #0
 8008b6e:	d048      	beq.n	8008c02 <_malloc_r+0xe6>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	4631      	mov	r1, r6
 8008b74:	4638      	mov	r0, r7
 8008b76:	eb04 0903 	add.w	r9, r4, r3
 8008b7a:	f000 fdf7 	bl	800976c <_sbrk_r>
 8008b7e:	4581      	cmp	r9, r0
 8008b80:	d13f      	bne.n	8008c02 <_malloc_r+0xe6>
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	1a6d      	subs	r5, r5, r1
 8008b86:	4629      	mov	r1, r5
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ffa7 	bl	8008adc <sbrk_aligned>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d037      	beq.n	8008c02 <_malloc_r+0xe6>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	442b      	add	r3, r5
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	f8d8 3000 	ldr.w	r3, [r8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d038      	beq.n	8008c12 <_malloc_r+0xf6>
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	42a2      	cmp	r2, r4
 8008ba4:	d12b      	bne.n	8008bfe <_malloc_r+0xe2>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
 8008baa:	e00f      	b.n	8008bcc <_malloc_r+0xb0>
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	1b52      	subs	r2, r2, r5
 8008bb0:	d41f      	bmi.n	8008bf2 <_malloc_r+0xd6>
 8008bb2:	2a0b      	cmp	r2, #11
 8008bb4:	d917      	bls.n	8008be6 <_malloc_r+0xca>
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	6025      	str	r5, [r4, #0]
 8008bbc:	bf18      	it	ne
 8008bbe:	6059      	strne	r1, [r3, #4]
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	bf08      	it	eq
 8008bc4:	f8c8 1000 	streq.w	r1, [r8]
 8008bc8:	5162      	str	r2, [r4, r5]
 8008bca:	604b      	str	r3, [r1, #4]
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f104 060b 	add.w	r6, r4, #11
 8008bd2:	f000 f829 	bl	8008c28 <__malloc_unlock>
 8008bd6:	f026 0607 	bic.w	r6, r6, #7
 8008bda:	1d23      	adds	r3, r4, #4
 8008bdc:	1af2      	subs	r2, r6, r3
 8008bde:	d0ae      	beq.n	8008b3e <_malloc_r+0x22>
 8008be0:	1b9b      	subs	r3, r3, r6
 8008be2:	50a3      	str	r3, [r4, r2]
 8008be4:	e7ab      	b.n	8008b3e <_malloc_r+0x22>
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	6862      	ldr	r2, [r4, #4]
 8008bea:	d1dd      	bne.n	8008ba8 <_malloc_r+0x8c>
 8008bec:	f8c8 2000 	str.w	r2, [r8]
 8008bf0:	e7ec      	b.n	8008bcc <_malloc_r+0xb0>
 8008bf2:	4623      	mov	r3, r4
 8008bf4:	6864      	ldr	r4, [r4, #4]
 8008bf6:	e7ac      	b.n	8008b52 <_malloc_r+0x36>
 8008bf8:	4634      	mov	r4, r6
 8008bfa:	6876      	ldr	r6, [r6, #4]
 8008bfc:	e7b4      	b.n	8008b68 <_malloc_r+0x4c>
 8008bfe:	4613      	mov	r3, r2
 8008c00:	e7cc      	b.n	8008b9c <_malloc_r+0x80>
 8008c02:	230c      	movs	r3, #12
 8008c04:	603b      	str	r3, [r7, #0]
 8008c06:	4638      	mov	r0, r7
 8008c08:	f000 f80e 	bl	8008c28 <__malloc_unlock>
 8008c0c:	e797      	b.n	8008b3e <_malloc_r+0x22>
 8008c0e:	6025      	str	r5, [r4, #0]
 8008c10:	e7dc      	b.n	8008bcc <_malloc_r+0xb0>
 8008c12:	605b      	str	r3, [r3, #4]
 8008c14:	deff      	udf	#255	; 0xff
 8008c16:	bf00      	nop
 8008c18:	2000492c 	.word	0x2000492c

08008c1c <__malloc_lock>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__malloc_lock+0x8>)
 8008c1e:	f7ff b87c 	b.w	8007d1a <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	20004928 	.word	0x20004928

08008c28 <__malloc_unlock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_unlock+0x8>)
 8008c2a:	f7ff b877 	b.w	8007d1c <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20004928 	.word	0x20004928

08008c34 <_Balloc>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	69c6      	ldr	r6, [r0, #28]
 8008c38:	4604      	mov	r4, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	b976      	cbnz	r6, 8008c5c <_Balloc+0x28>
 8008c3e:	2010      	movs	r0, #16
 8008c40:	f7ff ff44 	bl	8008acc <malloc>
 8008c44:	4602      	mov	r2, r0
 8008c46:	61e0      	str	r0, [r4, #28]
 8008c48:	b920      	cbnz	r0, 8008c54 <_Balloc+0x20>
 8008c4a:	4b18      	ldr	r3, [pc, #96]	; (8008cac <_Balloc+0x78>)
 8008c4c:	4818      	ldr	r0, [pc, #96]	; (8008cb0 <_Balloc+0x7c>)
 8008c4e:	216b      	movs	r1, #107	; 0x6b
 8008c50:	f000 fd9c 	bl	800978c <__assert_func>
 8008c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c58:	6006      	str	r6, [r0, #0]
 8008c5a:	60c6      	str	r6, [r0, #12]
 8008c5c:	69e6      	ldr	r6, [r4, #28]
 8008c5e:	68f3      	ldr	r3, [r6, #12]
 8008c60:	b183      	cbz	r3, 8008c84 <_Balloc+0x50>
 8008c62:	69e3      	ldr	r3, [r4, #28]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c6a:	b9b8      	cbnz	r0, 8008c9c <_Balloc+0x68>
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c72:	1d72      	adds	r2, r6, #5
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fda6 	bl	80097c8 <_calloc_r>
 8008c7c:	b160      	cbz	r0, 8008c98 <_Balloc+0x64>
 8008c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c82:	e00e      	b.n	8008ca2 <_Balloc+0x6e>
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	2104      	movs	r1, #4
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fd9d 	bl	80097c8 <_calloc_r>
 8008c8e:	69e3      	ldr	r3, [r4, #28]
 8008c90:	60f0      	str	r0, [r6, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e4      	bne.n	8008c62 <_Balloc+0x2e>
 8008c98:	2000      	movs	r0, #0
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	6802      	ldr	r2, [r0, #0]
 8008c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ca8:	e7f7      	b.n	8008c9a <_Balloc+0x66>
 8008caa:	bf00      	nop
 8008cac:	0800b50d 	.word	0x0800b50d
 8008cb0:	0800b58d 	.word	0x0800b58d

08008cb4 <_Bfree>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	69c6      	ldr	r6, [r0, #28]
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	b976      	cbnz	r6, 8008cdc <_Bfree+0x28>
 8008cbe:	2010      	movs	r0, #16
 8008cc0:	f7ff ff04 	bl	8008acc <malloc>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	61e8      	str	r0, [r5, #28]
 8008cc8:	b920      	cbnz	r0, 8008cd4 <_Bfree+0x20>
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <_Bfree+0x3c>)
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <_Bfree+0x40>)
 8008cce:	218f      	movs	r1, #143	; 0x8f
 8008cd0:	f000 fd5c 	bl	800978c <__assert_func>
 8008cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cd8:	6006      	str	r6, [r0, #0]
 8008cda:	60c6      	str	r6, [r0, #12]
 8008cdc:	b13c      	cbz	r4, 8008cee <_Bfree+0x3a>
 8008cde:	69eb      	ldr	r3, [r5, #28]
 8008ce0:	6862      	ldr	r2, [r4, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ce8:	6021      	str	r1, [r4, #0]
 8008cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	0800b50d 	.word	0x0800b50d
 8008cf4:	0800b58d 	.word	0x0800b58d

08008cf8 <__multadd>:
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	690d      	ldr	r5, [r1, #16]
 8008cfe:	4607      	mov	r7, r0
 8008d00:	460c      	mov	r4, r1
 8008d02:	461e      	mov	r6, r3
 8008d04:	f101 0c14 	add.w	ip, r1, #20
 8008d08:	2000      	movs	r0, #0
 8008d0a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d0e:	b299      	uxth	r1, r3
 8008d10:	fb02 6101 	mla	r1, r2, r1, r6
 8008d14:	0c1e      	lsrs	r6, r3, #16
 8008d16:	0c0b      	lsrs	r3, r1, #16
 8008d18:	fb02 3306 	mla	r3, r2, r6, r3
 8008d1c:	b289      	uxth	r1, r1
 8008d1e:	3001      	adds	r0, #1
 8008d20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d24:	4285      	cmp	r5, r0
 8008d26:	f84c 1b04 	str.w	r1, [ip], #4
 8008d2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d2e:	dcec      	bgt.n	8008d0a <__multadd+0x12>
 8008d30:	b30e      	cbz	r6, 8008d76 <__multadd+0x7e>
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dc19      	bgt.n	8008d6c <__multadd+0x74>
 8008d38:	6861      	ldr	r1, [r4, #4]
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	3101      	adds	r1, #1
 8008d3e:	f7ff ff79 	bl	8008c34 <_Balloc>
 8008d42:	4680      	mov	r8, r0
 8008d44:	b928      	cbnz	r0, 8008d52 <__multadd+0x5a>
 8008d46:	4602      	mov	r2, r0
 8008d48:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <__multadd+0x84>)
 8008d4a:	480d      	ldr	r0, [pc, #52]	; (8008d80 <__multadd+0x88>)
 8008d4c:	21ba      	movs	r1, #186	; 0xba
 8008d4e:	f000 fd1d 	bl	800978c <__assert_func>
 8008d52:	6922      	ldr	r2, [r4, #16]
 8008d54:	3202      	adds	r2, #2
 8008d56:	f104 010c 	add.w	r1, r4, #12
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	300c      	adds	r0, #12
 8008d5e:	f7fe ffde 	bl	8007d1e <memcpy>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff ffa5 	bl	8008cb4 <_Bfree>
 8008d6a:	4644      	mov	r4, r8
 8008d6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d70:	3501      	adds	r5, #1
 8008d72:	615e      	str	r6, [r3, #20]
 8008d74:	6125      	str	r5, [r4, #16]
 8008d76:	4620      	mov	r0, r4
 8008d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7c:	0800b57c 	.word	0x0800b57c
 8008d80:	0800b58d 	.word	0x0800b58d

08008d84 <__hi0bits>:
 8008d84:	0c03      	lsrs	r3, r0, #16
 8008d86:	041b      	lsls	r3, r3, #16
 8008d88:	b9d3      	cbnz	r3, 8008dc0 <__hi0bits+0x3c>
 8008d8a:	0400      	lsls	r0, r0, #16
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d92:	bf04      	itt	eq
 8008d94:	0200      	lsleq	r0, r0, #8
 8008d96:	3308      	addeq	r3, #8
 8008d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d9c:	bf04      	itt	eq
 8008d9e:	0100      	lsleq	r0, r0, #4
 8008da0:	3304      	addeq	r3, #4
 8008da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008da6:	bf04      	itt	eq
 8008da8:	0080      	lsleq	r0, r0, #2
 8008daa:	3302      	addeq	r3, #2
 8008dac:	2800      	cmp	r0, #0
 8008dae:	db05      	blt.n	8008dbc <__hi0bits+0x38>
 8008db0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008db4:	f103 0301 	add.w	r3, r3, #1
 8008db8:	bf08      	it	eq
 8008dba:	2320      	moveq	r3, #32
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	4770      	bx	lr
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e7e4      	b.n	8008d8e <__hi0bits+0xa>

08008dc4 <__lo0bits>:
 8008dc4:	6803      	ldr	r3, [r0, #0]
 8008dc6:	f013 0207 	ands.w	r2, r3, #7
 8008dca:	d00c      	beq.n	8008de6 <__lo0bits+0x22>
 8008dcc:	07d9      	lsls	r1, r3, #31
 8008dce:	d422      	bmi.n	8008e16 <__lo0bits+0x52>
 8008dd0:	079a      	lsls	r2, r3, #30
 8008dd2:	bf49      	itett	mi
 8008dd4:	085b      	lsrmi	r3, r3, #1
 8008dd6:	089b      	lsrpl	r3, r3, #2
 8008dd8:	6003      	strmi	r3, [r0, #0]
 8008dda:	2201      	movmi	r2, #1
 8008ddc:	bf5c      	itt	pl
 8008dde:	6003      	strpl	r3, [r0, #0]
 8008de0:	2202      	movpl	r2, #2
 8008de2:	4610      	mov	r0, r2
 8008de4:	4770      	bx	lr
 8008de6:	b299      	uxth	r1, r3
 8008de8:	b909      	cbnz	r1, 8008dee <__lo0bits+0x2a>
 8008dea:	0c1b      	lsrs	r3, r3, #16
 8008dec:	2210      	movs	r2, #16
 8008dee:	b2d9      	uxtb	r1, r3
 8008df0:	b909      	cbnz	r1, 8008df6 <__lo0bits+0x32>
 8008df2:	3208      	adds	r2, #8
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	0719      	lsls	r1, r3, #28
 8008df8:	bf04      	itt	eq
 8008dfa:	091b      	lsreq	r3, r3, #4
 8008dfc:	3204      	addeq	r2, #4
 8008dfe:	0799      	lsls	r1, r3, #30
 8008e00:	bf04      	itt	eq
 8008e02:	089b      	lsreq	r3, r3, #2
 8008e04:	3202      	addeq	r2, #2
 8008e06:	07d9      	lsls	r1, r3, #31
 8008e08:	d403      	bmi.n	8008e12 <__lo0bits+0x4e>
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	f102 0201 	add.w	r2, r2, #1
 8008e10:	d003      	beq.n	8008e1a <__lo0bits+0x56>
 8008e12:	6003      	str	r3, [r0, #0]
 8008e14:	e7e5      	b.n	8008de2 <__lo0bits+0x1e>
 8008e16:	2200      	movs	r2, #0
 8008e18:	e7e3      	b.n	8008de2 <__lo0bits+0x1e>
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	e7e1      	b.n	8008de2 <__lo0bits+0x1e>
	...

08008e20 <__i2b>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	2101      	movs	r1, #1
 8008e26:	f7ff ff05 	bl	8008c34 <_Balloc>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	b928      	cbnz	r0, 8008e3a <__i2b+0x1a>
 8008e2e:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <__i2b+0x24>)
 8008e30:	4805      	ldr	r0, [pc, #20]	; (8008e48 <__i2b+0x28>)
 8008e32:	f240 1145 	movw	r1, #325	; 0x145
 8008e36:	f000 fca9 	bl	800978c <__assert_func>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	6144      	str	r4, [r0, #20]
 8008e3e:	6103      	str	r3, [r0, #16]
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	bf00      	nop
 8008e44:	0800b57c 	.word	0x0800b57c
 8008e48:	0800b58d 	.word	0x0800b58d

08008e4c <__multiply>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	4691      	mov	r9, r2
 8008e52:	690a      	ldr	r2, [r1, #16]
 8008e54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	bfb8      	it	lt
 8008e5c:	460b      	movlt	r3, r1
 8008e5e:	460c      	mov	r4, r1
 8008e60:	bfbc      	itt	lt
 8008e62:	464c      	movlt	r4, r9
 8008e64:	4699      	movlt	r9, r3
 8008e66:	6927      	ldr	r7, [r4, #16]
 8008e68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	6861      	ldr	r1, [r4, #4]
 8008e70:	eb07 060a 	add.w	r6, r7, sl
 8008e74:	42b3      	cmp	r3, r6
 8008e76:	b085      	sub	sp, #20
 8008e78:	bfb8      	it	lt
 8008e7a:	3101      	addlt	r1, #1
 8008e7c:	f7ff feda 	bl	8008c34 <_Balloc>
 8008e80:	b930      	cbnz	r0, 8008e90 <__multiply+0x44>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b44      	ldr	r3, [pc, #272]	; (8008f98 <__multiply+0x14c>)
 8008e86:	4845      	ldr	r0, [pc, #276]	; (8008f9c <__multiply+0x150>)
 8008e88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008e8c:	f000 fc7e 	bl	800978c <__assert_func>
 8008e90:	f100 0514 	add.w	r5, r0, #20
 8008e94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e98:	462b      	mov	r3, r5
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4543      	cmp	r3, r8
 8008e9e:	d321      	bcc.n	8008ee4 <__multiply+0x98>
 8008ea0:	f104 0314 	add.w	r3, r4, #20
 8008ea4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ea8:	f109 0314 	add.w	r3, r9, #20
 8008eac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008eb0:	9202      	str	r2, [sp, #8]
 8008eb2:	1b3a      	subs	r2, r7, r4
 8008eb4:	3a15      	subs	r2, #21
 8008eb6:	f022 0203 	bic.w	r2, r2, #3
 8008eba:	3204      	adds	r2, #4
 8008ebc:	f104 0115 	add.w	r1, r4, #21
 8008ec0:	428f      	cmp	r7, r1
 8008ec2:	bf38      	it	cc
 8008ec4:	2204      	movcc	r2, #4
 8008ec6:	9201      	str	r2, [sp, #4]
 8008ec8:	9a02      	ldr	r2, [sp, #8]
 8008eca:	9303      	str	r3, [sp, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d80c      	bhi.n	8008eea <__multiply+0x9e>
 8008ed0:	2e00      	cmp	r6, #0
 8008ed2:	dd03      	ble.n	8008edc <__multiply+0x90>
 8008ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d05b      	beq.n	8008f94 <__multiply+0x148>
 8008edc:	6106      	str	r6, [r0, #16]
 8008ede:	b005      	add	sp, #20
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	f843 2b04 	str.w	r2, [r3], #4
 8008ee8:	e7d8      	b.n	8008e9c <__multiply+0x50>
 8008eea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008eee:	f1ba 0f00 	cmp.w	sl, #0
 8008ef2:	d024      	beq.n	8008f3e <__multiply+0xf2>
 8008ef4:	f104 0e14 	add.w	lr, r4, #20
 8008ef8:	46a9      	mov	r9, r5
 8008efa:	f04f 0c00 	mov.w	ip, #0
 8008efe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f02:	f8d9 1000 	ldr.w	r1, [r9]
 8008f06:	fa1f fb82 	uxth.w	fp, r2
 8008f0a:	b289      	uxth	r1, r1
 8008f0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f14:	f8d9 2000 	ldr.w	r2, [r9]
 8008f18:	4461      	add	r1, ip
 8008f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f26:	b289      	uxth	r1, r1
 8008f28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f2c:	4577      	cmp	r7, lr
 8008f2e:	f849 1b04 	str.w	r1, [r9], #4
 8008f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f36:	d8e2      	bhi.n	8008efe <__multiply+0xb2>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	f845 c002 	str.w	ip, [r5, r2]
 8008f3e:	9a03      	ldr	r2, [sp, #12]
 8008f40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f44:	3304      	adds	r3, #4
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	d021      	beq.n	8008f90 <__multiply+0x144>
 8008f4c:	6829      	ldr	r1, [r5, #0]
 8008f4e:	f104 0c14 	add.w	ip, r4, #20
 8008f52:	46ae      	mov	lr, r5
 8008f54:	f04f 0a00 	mov.w	sl, #0
 8008f58:	f8bc b000 	ldrh.w	fp, [ip]
 8008f5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f60:	fb09 220b 	mla	r2, r9, fp, r2
 8008f64:	4452      	add	r2, sl
 8008f66:	b289      	uxth	r1, r1
 8008f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f6c:	f84e 1b04 	str.w	r1, [lr], #4
 8008f70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f78:	f8be 1000 	ldrh.w	r1, [lr]
 8008f7c:	fb09 110a 	mla	r1, r9, sl, r1
 8008f80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f84:	4567      	cmp	r7, ip
 8008f86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f8a:	d8e5      	bhi.n	8008f58 <__multiply+0x10c>
 8008f8c:	9a01      	ldr	r2, [sp, #4]
 8008f8e:	50a9      	str	r1, [r5, r2]
 8008f90:	3504      	adds	r5, #4
 8008f92:	e799      	b.n	8008ec8 <__multiply+0x7c>
 8008f94:	3e01      	subs	r6, #1
 8008f96:	e79b      	b.n	8008ed0 <__multiply+0x84>
 8008f98:	0800b57c 	.word	0x0800b57c
 8008f9c:	0800b58d 	.word	0x0800b58d

08008fa0 <__pow5mult>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	f012 0203 	ands.w	r2, r2, #3
 8008faa:	4606      	mov	r6, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	d007      	beq.n	8008fc0 <__pow5mult+0x20>
 8008fb0:	4c25      	ldr	r4, [pc, #148]	; (8009048 <__pow5mult+0xa8>)
 8008fb2:	3a01      	subs	r2, #1
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fba:	f7ff fe9d 	bl	8008cf8 <__multadd>
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	10ad      	asrs	r5, r5, #2
 8008fc2:	d03d      	beq.n	8009040 <__pow5mult+0xa0>
 8008fc4:	69f4      	ldr	r4, [r6, #28]
 8008fc6:	b97c      	cbnz	r4, 8008fe8 <__pow5mult+0x48>
 8008fc8:	2010      	movs	r0, #16
 8008fca:	f7ff fd7f 	bl	8008acc <malloc>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	61f0      	str	r0, [r6, #28]
 8008fd2:	b928      	cbnz	r0, 8008fe0 <__pow5mult+0x40>
 8008fd4:	4b1d      	ldr	r3, [pc, #116]	; (800904c <__pow5mult+0xac>)
 8008fd6:	481e      	ldr	r0, [pc, #120]	; (8009050 <__pow5mult+0xb0>)
 8008fd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008fdc:	f000 fbd6 	bl	800978c <__assert_func>
 8008fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fe4:	6004      	str	r4, [r0, #0]
 8008fe6:	60c4      	str	r4, [r0, #12]
 8008fe8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ff0:	b94c      	cbnz	r4, 8009006 <__pow5mult+0x66>
 8008ff2:	f240 2171 	movw	r1, #625	; 0x271
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ff12 	bl	8008e20 <__i2b>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009002:	4604      	mov	r4, r0
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	f04f 0900 	mov.w	r9, #0
 800900a:	07eb      	lsls	r3, r5, #31
 800900c:	d50a      	bpl.n	8009024 <__pow5mult+0x84>
 800900e:	4639      	mov	r1, r7
 8009010:	4622      	mov	r2, r4
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ff1a 	bl	8008e4c <__multiply>
 8009018:	4639      	mov	r1, r7
 800901a:	4680      	mov	r8, r0
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff fe49 	bl	8008cb4 <_Bfree>
 8009022:	4647      	mov	r7, r8
 8009024:	106d      	asrs	r5, r5, #1
 8009026:	d00b      	beq.n	8009040 <__pow5mult+0xa0>
 8009028:	6820      	ldr	r0, [r4, #0]
 800902a:	b938      	cbnz	r0, 800903c <__pow5mult+0x9c>
 800902c:	4622      	mov	r2, r4
 800902e:	4621      	mov	r1, r4
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ff0b 	bl	8008e4c <__multiply>
 8009036:	6020      	str	r0, [r4, #0]
 8009038:	f8c0 9000 	str.w	r9, [r0]
 800903c:	4604      	mov	r4, r0
 800903e:	e7e4      	b.n	800900a <__pow5mult+0x6a>
 8009040:	4638      	mov	r0, r7
 8009042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009046:	bf00      	nop
 8009048:	0800b6d8 	.word	0x0800b6d8
 800904c:	0800b50d 	.word	0x0800b50d
 8009050:	0800b58d 	.word	0x0800b58d

08009054 <__lshift>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	6849      	ldr	r1, [r1, #4]
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	4607      	mov	r7, r0
 8009066:	4691      	mov	r9, r2
 8009068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800906c:	f108 0601 	add.w	r6, r8, #1
 8009070:	42b3      	cmp	r3, r6
 8009072:	db0b      	blt.n	800908c <__lshift+0x38>
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff fddd 	bl	8008c34 <_Balloc>
 800907a:	4605      	mov	r5, r0
 800907c:	b948      	cbnz	r0, 8009092 <__lshift+0x3e>
 800907e:	4602      	mov	r2, r0
 8009080:	4b28      	ldr	r3, [pc, #160]	; (8009124 <__lshift+0xd0>)
 8009082:	4829      	ldr	r0, [pc, #164]	; (8009128 <__lshift+0xd4>)
 8009084:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009088:	f000 fb80 	bl	800978c <__assert_func>
 800908c:	3101      	adds	r1, #1
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	e7ee      	b.n	8009070 <__lshift+0x1c>
 8009092:	2300      	movs	r3, #0
 8009094:	f100 0114 	add.w	r1, r0, #20
 8009098:	f100 0210 	add.w	r2, r0, #16
 800909c:	4618      	mov	r0, r3
 800909e:	4553      	cmp	r3, sl
 80090a0:	db33      	blt.n	800910a <__lshift+0xb6>
 80090a2:	6920      	ldr	r0, [r4, #16]
 80090a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090a8:	f104 0314 	add.w	r3, r4, #20
 80090ac:	f019 091f 	ands.w	r9, r9, #31
 80090b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090b8:	d02b      	beq.n	8009112 <__lshift+0xbe>
 80090ba:	f1c9 0e20 	rsb	lr, r9, #32
 80090be:	468a      	mov	sl, r1
 80090c0:	2200      	movs	r2, #0
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	fa00 f009 	lsl.w	r0, r0, r9
 80090c8:	4310      	orrs	r0, r2
 80090ca:	f84a 0b04 	str.w	r0, [sl], #4
 80090ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d2:	459c      	cmp	ip, r3
 80090d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80090d8:	d8f3      	bhi.n	80090c2 <__lshift+0x6e>
 80090da:	ebac 0304 	sub.w	r3, ip, r4
 80090de:	3b15      	subs	r3, #21
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	3304      	adds	r3, #4
 80090e6:	f104 0015 	add.w	r0, r4, #21
 80090ea:	4584      	cmp	ip, r0
 80090ec:	bf38      	it	cc
 80090ee:	2304      	movcc	r3, #4
 80090f0:	50ca      	str	r2, [r1, r3]
 80090f2:	b10a      	cbz	r2, 80090f8 <__lshift+0xa4>
 80090f4:	f108 0602 	add.w	r6, r8, #2
 80090f8:	3e01      	subs	r6, #1
 80090fa:	4638      	mov	r0, r7
 80090fc:	612e      	str	r6, [r5, #16]
 80090fe:	4621      	mov	r1, r4
 8009100:	f7ff fdd8 	bl	8008cb4 <_Bfree>
 8009104:	4628      	mov	r0, r5
 8009106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910a:	f842 0f04 	str.w	r0, [r2, #4]!
 800910e:	3301      	adds	r3, #1
 8009110:	e7c5      	b.n	800909e <__lshift+0x4a>
 8009112:	3904      	subs	r1, #4
 8009114:	f853 2b04 	ldr.w	r2, [r3], #4
 8009118:	f841 2f04 	str.w	r2, [r1, #4]!
 800911c:	459c      	cmp	ip, r3
 800911e:	d8f9      	bhi.n	8009114 <__lshift+0xc0>
 8009120:	e7ea      	b.n	80090f8 <__lshift+0xa4>
 8009122:	bf00      	nop
 8009124:	0800b57c 	.word	0x0800b57c
 8009128:	0800b58d 	.word	0x0800b58d

0800912c <__mcmp>:
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	6902      	ldr	r2, [r0, #16]
 8009130:	690c      	ldr	r4, [r1, #16]
 8009132:	1b12      	subs	r2, r2, r4
 8009134:	d10e      	bne.n	8009154 <__mcmp+0x28>
 8009136:	f100 0314 	add.w	r3, r0, #20
 800913a:	3114      	adds	r1, #20
 800913c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800914c:	42a5      	cmp	r5, r4
 800914e:	d003      	beq.n	8009158 <__mcmp+0x2c>
 8009150:	d305      	bcc.n	800915e <__mcmp+0x32>
 8009152:	2201      	movs	r2, #1
 8009154:	4610      	mov	r0, r2
 8009156:	bd30      	pop	{r4, r5, pc}
 8009158:	4283      	cmp	r3, r0
 800915a:	d3f3      	bcc.n	8009144 <__mcmp+0x18>
 800915c:	e7fa      	b.n	8009154 <__mcmp+0x28>
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	e7f7      	b.n	8009154 <__mcmp+0x28>

08009164 <__mdiff>:
 8009164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	460c      	mov	r4, r1
 800916a:	4606      	mov	r6, r0
 800916c:	4611      	mov	r1, r2
 800916e:	4620      	mov	r0, r4
 8009170:	4690      	mov	r8, r2
 8009172:	f7ff ffdb 	bl	800912c <__mcmp>
 8009176:	1e05      	subs	r5, r0, #0
 8009178:	d110      	bne.n	800919c <__mdiff+0x38>
 800917a:	4629      	mov	r1, r5
 800917c:	4630      	mov	r0, r6
 800917e:	f7ff fd59 	bl	8008c34 <_Balloc>
 8009182:	b930      	cbnz	r0, 8009192 <__mdiff+0x2e>
 8009184:	4b3a      	ldr	r3, [pc, #232]	; (8009270 <__mdiff+0x10c>)
 8009186:	4602      	mov	r2, r0
 8009188:	f240 2137 	movw	r1, #567	; 0x237
 800918c:	4839      	ldr	r0, [pc, #228]	; (8009274 <__mdiff+0x110>)
 800918e:	f000 fafd 	bl	800978c <__assert_func>
 8009192:	2301      	movs	r3, #1
 8009194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	bfa4      	itt	ge
 800919e:	4643      	movge	r3, r8
 80091a0:	46a0      	movge	r8, r4
 80091a2:	4630      	mov	r0, r6
 80091a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091a8:	bfa6      	itte	ge
 80091aa:	461c      	movge	r4, r3
 80091ac:	2500      	movge	r5, #0
 80091ae:	2501      	movlt	r5, #1
 80091b0:	f7ff fd40 	bl	8008c34 <_Balloc>
 80091b4:	b920      	cbnz	r0, 80091c0 <__mdiff+0x5c>
 80091b6:	4b2e      	ldr	r3, [pc, #184]	; (8009270 <__mdiff+0x10c>)
 80091b8:	4602      	mov	r2, r0
 80091ba:	f240 2145 	movw	r1, #581	; 0x245
 80091be:	e7e5      	b.n	800918c <__mdiff+0x28>
 80091c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091c4:	6926      	ldr	r6, [r4, #16]
 80091c6:	60c5      	str	r5, [r0, #12]
 80091c8:	f104 0914 	add.w	r9, r4, #20
 80091cc:	f108 0514 	add.w	r5, r8, #20
 80091d0:	f100 0e14 	add.w	lr, r0, #20
 80091d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091dc:	f108 0210 	add.w	r2, r8, #16
 80091e0:	46f2      	mov	sl, lr
 80091e2:	2100      	movs	r1, #0
 80091e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80091e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091ec:	fa11 f88b 	uxtah	r8, r1, fp
 80091f0:	b299      	uxth	r1, r3
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	eba8 0801 	sub.w	r8, r8, r1
 80091f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009200:	fa1f f888 	uxth.w	r8, r8
 8009204:	1419      	asrs	r1, r3, #16
 8009206:	454e      	cmp	r6, r9
 8009208:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800920c:	f84a 3b04 	str.w	r3, [sl], #4
 8009210:	d8e8      	bhi.n	80091e4 <__mdiff+0x80>
 8009212:	1b33      	subs	r3, r6, r4
 8009214:	3b15      	subs	r3, #21
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	3304      	adds	r3, #4
 800921c:	3415      	adds	r4, #21
 800921e:	42a6      	cmp	r6, r4
 8009220:	bf38      	it	cc
 8009222:	2304      	movcc	r3, #4
 8009224:	441d      	add	r5, r3
 8009226:	4473      	add	r3, lr
 8009228:	469e      	mov	lr, r3
 800922a:	462e      	mov	r6, r5
 800922c:	4566      	cmp	r6, ip
 800922e:	d30e      	bcc.n	800924e <__mdiff+0xea>
 8009230:	f10c 0203 	add.w	r2, ip, #3
 8009234:	1b52      	subs	r2, r2, r5
 8009236:	f022 0203 	bic.w	r2, r2, #3
 800923a:	3d03      	subs	r5, #3
 800923c:	45ac      	cmp	ip, r5
 800923e:	bf38      	it	cc
 8009240:	2200      	movcc	r2, #0
 8009242:	4413      	add	r3, r2
 8009244:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009248:	b17a      	cbz	r2, 800926a <__mdiff+0x106>
 800924a:	6107      	str	r7, [r0, #16]
 800924c:	e7a4      	b.n	8009198 <__mdiff+0x34>
 800924e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009252:	fa11 f288 	uxtah	r2, r1, r8
 8009256:	1414      	asrs	r4, r2, #16
 8009258:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800925c:	b292      	uxth	r2, r2
 800925e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009262:	f84e 2b04 	str.w	r2, [lr], #4
 8009266:	1421      	asrs	r1, r4, #16
 8009268:	e7e0      	b.n	800922c <__mdiff+0xc8>
 800926a:	3f01      	subs	r7, #1
 800926c:	e7ea      	b.n	8009244 <__mdiff+0xe0>
 800926e:	bf00      	nop
 8009270:	0800b57c 	.word	0x0800b57c
 8009274:	0800b58d 	.word	0x0800b58d

08009278 <__d2b>:
 8009278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800927c:	460f      	mov	r7, r1
 800927e:	2101      	movs	r1, #1
 8009280:	ec59 8b10 	vmov	r8, r9, d0
 8009284:	4616      	mov	r6, r2
 8009286:	f7ff fcd5 	bl	8008c34 <_Balloc>
 800928a:	4604      	mov	r4, r0
 800928c:	b930      	cbnz	r0, 800929c <__d2b+0x24>
 800928e:	4602      	mov	r2, r0
 8009290:	4b24      	ldr	r3, [pc, #144]	; (8009324 <__d2b+0xac>)
 8009292:	4825      	ldr	r0, [pc, #148]	; (8009328 <__d2b+0xb0>)
 8009294:	f240 310f 	movw	r1, #783	; 0x30f
 8009298:	f000 fa78 	bl	800978c <__assert_func>
 800929c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a4:	bb2d      	cbnz	r5, 80092f2 <__d2b+0x7a>
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	f1b8 0300 	subs.w	r3, r8, #0
 80092ac:	d026      	beq.n	80092fc <__d2b+0x84>
 80092ae:	4668      	mov	r0, sp
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	f7ff fd87 	bl	8008dc4 <__lo0bits>
 80092b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092ba:	b1e8      	cbz	r0, 80092f8 <__d2b+0x80>
 80092bc:	f1c0 0320 	rsb	r3, r0, #32
 80092c0:	fa02 f303 	lsl.w	r3, r2, r3
 80092c4:	430b      	orrs	r3, r1
 80092c6:	40c2      	lsrs	r2, r0
 80092c8:	6163      	str	r3, [r4, #20]
 80092ca:	9201      	str	r2, [sp, #4]
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	61a3      	str	r3, [r4, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bf14      	ite	ne
 80092d4:	2202      	movne	r2, #2
 80092d6:	2201      	moveq	r2, #1
 80092d8:	6122      	str	r2, [r4, #16]
 80092da:	b1bd      	cbz	r5, 800930c <__d2b+0x94>
 80092dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092e0:	4405      	add	r5, r0
 80092e2:	603d      	str	r5, [r7, #0]
 80092e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092e8:	6030      	str	r0, [r6, #0]
 80092ea:	4620      	mov	r0, r4
 80092ec:	b003      	add	sp, #12
 80092ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092f6:	e7d6      	b.n	80092a6 <__d2b+0x2e>
 80092f8:	6161      	str	r1, [r4, #20]
 80092fa:	e7e7      	b.n	80092cc <__d2b+0x54>
 80092fc:	a801      	add	r0, sp, #4
 80092fe:	f7ff fd61 	bl	8008dc4 <__lo0bits>
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	6163      	str	r3, [r4, #20]
 8009306:	3020      	adds	r0, #32
 8009308:	2201      	movs	r2, #1
 800930a:	e7e5      	b.n	80092d8 <__d2b+0x60>
 800930c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009314:	6038      	str	r0, [r7, #0]
 8009316:	6918      	ldr	r0, [r3, #16]
 8009318:	f7ff fd34 	bl	8008d84 <__hi0bits>
 800931c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009320:	e7e2      	b.n	80092e8 <__d2b+0x70>
 8009322:	bf00      	nop
 8009324:	0800b57c 	.word	0x0800b57c
 8009328:	0800b58d 	.word	0x0800b58d

0800932c <__ssputs_r>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	688e      	ldr	r6, [r1, #8]
 8009332:	461f      	mov	r7, r3
 8009334:	42be      	cmp	r6, r7
 8009336:	680b      	ldr	r3, [r1, #0]
 8009338:	4682      	mov	sl, r0
 800933a:	460c      	mov	r4, r1
 800933c:	4690      	mov	r8, r2
 800933e:	d82c      	bhi.n	800939a <__ssputs_r+0x6e>
 8009340:	898a      	ldrh	r2, [r1, #12]
 8009342:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009346:	d026      	beq.n	8009396 <__ssputs_r+0x6a>
 8009348:	6965      	ldr	r5, [r4, #20]
 800934a:	6909      	ldr	r1, [r1, #16]
 800934c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009350:	eba3 0901 	sub.w	r9, r3, r1
 8009354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009358:	1c7b      	adds	r3, r7, #1
 800935a:	444b      	add	r3, r9
 800935c:	106d      	asrs	r5, r5, #1
 800935e:	429d      	cmp	r5, r3
 8009360:	bf38      	it	cc
 8009362:	461d      	movcc	r5, r3
 8009364:	0553      	lsls	r3, r2, #21
 8009366:	d527      	bpl.n	80093b8 <__ssputs_r+0x8c>
 8009368:	4629      	mov	r1, r5
 800936a:	f7ff fbd7 	bl	8008b1c <_malloc_r>
 800936e:	4606      	mov	r6, r0
 8009370:	b360      	cbz	r0, 80093cc <__ssputs_r+0xa0>
 8009372:	6921      	ldr	r1, [r4, #16]
 8009374:	464a      	mov	r2, r9
 8009376:	f7fe fcd2 	bl	8007d1e <memcpy>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	6126      	str	r6, [r4, #16]
 8009388:	6165      	str	r5, [r4, #20]
 800938a:	444e      	add	r6, r9
 800938c:	eba5 0509 	sub.w	r5, r5, r9
 8009390:	6026      	str	r6, [r4, #0]
 8009392:	60a5      	str	r5, [r4, #8]
 8009394:	463e      	mov	r6, r7
 8009396:	42be      	cmp	r6, r7
 8009398:	d900      	bls.n	800939c <__ssputs_r+0x70>
 800939a:	463e      	mov	r6, r7
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	4632      	mov	r2, r6
 80093a0:	4641      	mov	r1, r8
 80093a2:	f000 f9c9 	bl	8009738 <memmove>
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	4433      	add	r3, r6
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	2000      	movs	r0, #0
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	462a      	mov	r2, r5
 80093ba:	f000 fa2d 	bl	8009818 <_realloc_r>
 80093be:	4606      	mov	r6, r0
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d1e0      	bne.n	8009386 <__ssputs_r+0x5a>
 80093c4:	6921      	ldr	r1, [r4, #16]
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7ff fb34 	bl	8008a34 <_free_r>
 80093cc:	230c      	movs	r3, #12
 80093ce:	f8ca 3000 	str.w	r3, [sl]
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	e7e9      	b.n	80093b4 <__ssputs_r+0x88>

080093e0 <_svfiprintf_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4698      	mov	r8, r3
 80093e6:	898b      	ldrh	r3, [r1, #12]
 80093e8:	061b      	lsls	r3, r3, #24
 80093ea:	b09d      	sub	sp, #116	; 0x74
 80093ec:	4607      	mov	r7, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	d50e      	bpl.n	8009412 <_svfiprintf_r+0x32>
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	b963      	cbnz	r3, 8009412 <_svfiprintf_r+0x32>
 80093f8:	2140      	movs	r1, #64	; 0x40
 80093fa:	f7ff fb8f 	bl	8008b1c <_malloc_r>
 80093fe:	6028      	str	r0, [r5, #0]
 8009400:	6128      	str	r0, [r5, #16]
 8009402:	b920      	cbnz	r0, 800940e <_svfiprintf_r+0x2e>
 8009404:	230c      	movs	r3, #12
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	e0d0      	b.n	80095b0 <_svfiprintf_r+0x1d0>
 800940e:	2340      	movs	r3, #64	; 0x40
 8009410:	616b      	str	r3, [r5, #20]
 8009412:	2300      	movs	r3, #0
 8009414:	9309      	str	r3, [sp, #36]	; 0x24
 8009416:	2320      	movs	r3, #32
 8009418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800941c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009420:	2330      	movs	r3, #48	; 0x30
 8009422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095c8 <_svfiprintf_r+0x1e8>
 8009426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800942a:	f04f 0901 	mov.w	r9, #1
 800942e:	4623      	mov	r3, r4
 8009430:	469a      	mov	sl, r3
 8009432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009436:	b10a      	cbz	r2, 800943c <_svfiprintf_r+0x5c>
 8009438:	2a25      	cmp	r2, #37	; 0x25
 800943a:	d1f9      	bne.n	8009430 <_svfiprintf_r+0x50>
 800943c:	ebba 0b04 	subs.w	fp, sl, r4
 8009440:	d00b      	beq.n	800945a <_svfiprintf_r+0x7a>
 8009442:	465b      	mov	r3, fp
 8009444:	4622      	mov	r2, r4
 8009446:	4629      	mov	r1, r5
 8009448:	4638      	mov	r0, r7
 800944a:	f7ff ff6f 	bl	800932c <__ssputs_r>
 800944e:	3001      	adds	r0, #1
 8009450:	f000 80a9 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009456:	445a      	add	r2, fp
 8009458:	9209      	str	r2, [sp, #36]	; 0x24
 800945a:	f89a 3000 	ldrb.w	r3, [sl]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80a1 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009464:	2300      	movs	r3, #0
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800946e:	f10a 0a01 	add.w	sl, sl, #1
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	9307      	str	r3, [sp, #28]
 8009476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800947a:	931a      	str	r3, [sp, #104]	; 0x68
 800947c:	4654      	mov	r4, sl
 800947e:	2205      	movs	r2, #5
 8009480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009484:	4850      	ldr	r0, [pc, #320]	; (80095c8 <_svfiprintf_r+0x1e8>)
 8009486:	f7f6 feab 	bl	80001e0 <memchr>
 800948a:	9a04      	ldr	r2, [sp, #16]
 800948c:	b9d8      	cbnz	r0, 80094c6 <_svfiprintf_r+0xe6>
 800948e:	06d0      	lsls	r0, r2, #27
 8009490:	bf44      	itt	mi
 8009492:	2320      	movmi	r3, #32
 8009494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009498:	0711      	lsls	r1, r2, #28
 800949a:	bf44      	itt	mi
 800949c:	232b      	movmi	r3, #43	; 0x2b
 800949e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094a2:	f89a 3000 	ldrb.w	r3, [sl]
 80094a6:	2b2a      	cmp	r3, #42	; 0x2a
 80094a8:	d015      	beq.n	80094d6 <_svfiprintf_r+0xf6>
 80094aa:	9a07      	ldr	r2, [sp, #28]
 80094ac:	4654      	mov	r4, sl
 80094ae:	2000      	movs	r0, #0
 80094b0:	f04f 0c0a 	mov.w	ip, #10
 80094b4:	4621      	mov	r1, r4
 80094b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ba:	3b30      	subs	r3, #48	; 0x30
 80094bc:	2b09      	cmp	r3, #9
 80094be:	d94d      	bls.n	800955c <_svfiprintf_r+0x17c>
 80094c0:	b1b0      	cbz	r0, 80094f0 <_svfiprintf_r+0x110>
 80094c2:	9207      	str	r2, [sp, #28]
 80094c4:	e014      	b.n	80094f0 <_svfiprintf_r+0x110>
 80094c6:	eba0 0308 	sub.w	r3, r0, r8
 80094ca:	fa09 f303 	lsl.w	r3, r9, r3
 80094ce:	4313      	orrs	r3, r2
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	46a2      	mov	sl, r4
 80094d4:	e7d2      	b.n	800947c <_svfiprintf_r+0x9c>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	1d19      	adds	r1, r3, #4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	9103      	str	r1, [sp, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfbb      	ittet	lt
 80094e2:	425b      	neglt	r3, r3
 80094e4:	f042 0202 	orrlt.w	r2, r2, #2
 80094e8:	9307      	strge	r3, [sp, #28]
 80094ea:	9307      	strlt	r3, [sp, #28]
 80094ec:	bfb8      	it	lt
 80094ee:	9204      	strlt	r2, [sp, #16]
 80094f0:	7823      	ldrb	r3, [r4, #0]
 80094f2:	2b2e      	cmp	r3, #46	; 0x2e
 80094f4:	d10c      	bne.n	8009510 <_svfiprintf_r+0x130>
 80094f6:	7863      	ldrb	r3, [r4, #1]
 80094f8:	2b2a      	cmp	r3, #42	; 0x2a
 80094fa:	d134      	bne.n	8009566 <_svfiprintf_r+0x186>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	1d1a      	adds	r2, r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	9203      	str	r2, [sp, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfb8      	it	lt
 8009508:	f04f 33ff 	movlt.w	r3, #4294967295
 800950c:	3402      	adds	r4, #2
 800950e:	9305      	str	r3, [sp, #20]
 8009510:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80095d8 <_svfiprintf_r+0x1f8>
 8009514:	7821      	ldrb	r1, [r4, #0]
 8009516:	2203      	movs	r2, #3
 8009518:	4650      	mov	r0, sl
 800951a:	f7f6 fe61 	bl	80001e0 <memchr>
 800951e:	b138      	cbz	r0, 8009530 <_svfiprintf_r+0x150>
 8009520:	9b04      	ldr	r3, [sp, #16]
 8009522:	eba0 000a 	sub.w	r0, r0, sl
 8009526:	2240      	movs	r2, #64	; 0x40
 8009528:	4082      	lsls	r2, r0
 800952a:	4313      	orrs	r3, r2
 800952c:	3401      	adds	r4, #1
 800952e:	9304      	str	r3, [sp, #16]
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	4825      	ldr	r0, [pc, #148]	; (80095cc <_svfiprintf_r+0x1ec>)
 8009536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800953a:	2206      	movs	r2, #6
 800953c:	f7f6 fe50 	bl	80001e0 <memchr>
 8009540:	2800      	cmp	r0, #0
 8009542:	d038      	beq.n	80095b6 <_svfiprintf_r+0x1d6>
 8009544:	4b22      	ldr	r3, [pc, #136]	; (80095d0 <_svfiprintf_r+0x1f0>)
 8009546:	bb1b      	cbnz	r3, 8009590 <_svfiprintf_r+0x1b0>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	3307      	adds	r3, #7
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	3308      	adds	r3, #8
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009556:	4433      	add	r3, r6
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	e768      	b.n	800942e <_svfiprintf_r+0x4e>
 800955c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009560:	460c      	mov	r4, r1
 8009562:	2001      	movs	r0, #1
 8009564:	e7a6      	b.n	80094b4 <_svfiprintf_r+0xd4>
 8009566:	2300      	movs	r3, #0
 8009568:	3401      	adds	r4, #1
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	4619      	mov	r1, r3
 800956e:	f04f 0c0a 	mov.w	ip, #10
 8009572:	4620      	mov	r0, r4
 8009574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009578:	3a30      	subs	r2, #48	; 0x30
 800957a:	2a09      	cmp	r2, #9
 800957c:	d903      	bls.n	8009586 <_svfiprintf_r+0x1a6>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0c6      	beq.n	8009510 <_svfiprintf_r+0x130>
 8009582:	9105      	str	r1, [sp, #20]
 8009584:	e7c4      	b.n	8009510 <_svfiprintf_r+0x130>
 8009586:	fb0c 2101 	mla	r1, ip, r1, r2
 800958a:	4604      	mov	r4, r0
 800958c:	2301      	movs	r3, #1
 800958e:	e7f0      	b.n	8009572 <_svfiprintf_r+0x192>
 8009590:	ab03      	add	r3, sp, #12
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	462a      	mov	r2, r5
 8009596:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <_svfiprintf_r+0x1f4>)
 8009598:	a904      	add	r1, sp, #16
 800959a:	4638      	mov	r0, r7
 800959c:	f7fd fdfe 	bl	800719c <_printf_float>
 80095a0:	1c42      	adds	r2, r0, #1
 80095a2:	4606      	mov	r6, r0
 80095a4:	d1d6      	bne.n	8009554 <_svfiprintf_r+0x174>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	065b      	lsls	r3, r3, #25
 80095aa:	f53f af2d 	bmi.w	8009408 <_svfiprintf_r+0x28>
 80095ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b0:	b01d      	add	sp, #116	; 0x74
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	ab03      	add	r3, sp, #12
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	462a      	mov	r2, r5
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <_svfiprintf_r+0x1f4>)
 80095be:	a904      	add	r1, sp, #16
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7fe f88f 	bl	80076e4 <_printf_i>
 80095c6:	e7eb      	b.n	80095a0 <_svfiprintf_r+0x1c0>
 80095c8:	0800b6e4 	.word	0x0800b6e4
 80095cc:	0800b6ee 	.word	0x0800b6ee
 80095d0:	0800719d 	.word	0x0800719d
 80095d4:	0800932d 	.word	0x0800932d
 80095d8:	0800b6ea 	.word	0x0800b6ea

080095dc <__sflush_r>:
 80095dc:	898a      	ldrh	r2, [r1, #12]
 80095de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	4605      	mov	r5, r0
 80095e4:	0710      	lsls	r0, r2, #28
 80095e6:	460c      	mov	r4, r1
 80095e8:	d458      	bmi.n	800969c <__sflush_r+0xc0>
 80095ea:	684b      	ldr	r3, [r1, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc05      	bgt.n	80095fc <__sflush_r+0x20>
 80095f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dc02      	bgt.n	80095fc <__sflush_r+0x20>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d0f9      	beq.n	80095f6 <__sflush_r+0x1a>
 8009602:	2300      	movs	r3, #0
 8009604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009608:	682f      	ldr	r7, [r5, #0]
 800960a:	6a21      	ldr	r1, [r4, #32]
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	d032      	beq.n	8009676 <__sflush_r+0x9a>
 8009610:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	075a      	lsls	r2, r3, #29
 8009616:	d505      	bpl.n	8009624 <__sflush_r+0x48>
 8009618:	6863      	ldr	r3, [r4, #4]
 800961a:	1ac0      	subs	r0, r0, r3
 800961c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800961e:	b10b      	cbz	r3, 8009624 <__sflush_r+0x48>
 8009620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009622:	1ac0      	subs	r0, r0, r3
 8009624:	2300      	movs	r3, #0
 8009626:	4602      	mov	r2, r0
 8009628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800962a:	6a21      	ldr	r1, [r4, #32]
 800962c:	4628      	mov	r0, r5
 800962e:	47b0      	blx	r6
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	d106      	bne.n	8009644 <__sflush_r+0x68>
 8009636:	6829      	ldr	r1, [r5, #0]
 8009638:	291d      	cmp	r1, #29
 800963a:	d82b      	bhi.n	8009694 <__sflush_r+0xb8>
 800963c:	4a29      	ldr	r2, [pc, #164]	; (80096e4 <__sflush_r+0x108>)
 800963e:	410a      	asrs	r2, r1
 8009640:	07d6      	lsls	r6, r2, #31
 8009642:	d427      	bmi.n	8009694 <__sflush_r+0xb8>
 8009644:	2200      	movs	r2, #0
 8009646:	6062      	str	r2, [r4, #4]
 8009648:	04d9      	lsls	r1, r3, #19
 800964a:	6922      	ldr	r2, [r4, #16]
 800964c:	6022      	str	r2, [r4, #0]
 800964e:	d504      	bpl.n	800965a <__sflush_r+0x7e>
 8009650:	1c42      	adds	r2, r0, #1
 8009652:	d101      	bne.n	8009658 <__sflush_r+0x7c>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b903      	cbnz	r3, 800965a <__sflush_r+0x7e>
 8009658:	6560      	str	r0, [r4, #84]	; 0x54
 800965a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965c:	602f      	str	r7, [r5, #0]
 800965e:	2900      	cmp	r1, #0
 8009660:	d0c9      	beq.n	80095f6 <__sflush_r+0x1a>
 8009662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009666:	4299      	cmp	r1, r3
 8009668:	d002      	beq.n	8009670 <__sflush_r+0x94>
 800966a:	4628      	mov	r0, r5
 800966c:	f7ff f9e2 	bl	8008a34 <_free_r>
 8009670:	2000      	movs	r0, #0
 8009672:	6360      	str	r0, [r4, #52]	; 0x34
 8009674:	e7c0      	b.n	80095f8 <__sflush_r+0x1c>
 8009676:	2301      	movs	r3, #1
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	1c41      	adds	r1, r0, #1
 800967e:	d1c8      	bne.n	8009612 <__sflush_r+0x36>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c5      	beq.n	8009612 <__sflush_r+0x36>
 8009686:	2b1d      	cmp	r3, #29
 8009688:	d001      	beq.n	800968e <__sflush_r+0xb2>
 800968a:	2b16      	cmp	r3, #22
 800968c:	d101      	bne.n	8009692 <__sflush_r+0xb6>
 800968e:	602f      	str	r7, [r5, #0]
 8009690:	e7b1      	b.n	80095f6 <__sflush_r+0x1a>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7ad      	b.n	80095f8 <__sflush_r+0x1c>
 800969c:	690f      	ldr	r7, [r1, #16]
 800969e:	2f00      	cmp	r7, #0
 80096a0:	d0a9      	beq.n	80095f6 <__sflush_r+0x1a>
 80096a2:	0793      	lsls	r3, r2, #30
 80096a4:	680e      	ldr	r6, [r1, #0]
 80096a6:	bf08      	it	eq
 80096a8:	694b      	ldreq	r3, [r1, #20]
 80096aa:	600f      	str	r7, [r1, #0]
 80096ac:	bf18      	it	ne
 80096ae:	2300      	movne	r3, #0
 80096b0:	eba6 0807 	sub.w	r8, r6, r7
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	dd9c      	ble.n	80095f6 <__sflush_r+0x1a>
 80096bc:	6a21      	ldr	r1, [r4, #32]
 80096be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c0:	4643      	mov	r3, r8
 80096c2:	463a      	mov	r2, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b0      	blx	r6
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dc06      	bgt.n	80096da <__sflush_r+0xfe>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e78e      	b.n	80095f8 <__sflush_r+0x1c>
 80096da:	4407      	add	r7, r0
 80096dc:	eba8 0800 	sub.w	r8, r8, r0
 80096e0:	e7e9      	b.n	80096b6 <__sflush_r+0xda>
 80096e2:	bf00      	nop
 80096e4:	dfbffffe 	.word	0xdfbffffe

080096e8 <_fflush_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	690b      	ldr	r3, [r1, #16]
 80096ec:	4605      	mov	r5, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	b913      	cbnz	r3, 80096f8 <_fflush_r+0x10>
 80096f2:	2500      	movs	r5, #0
 80096f4:	4628      	mov	r0, r5
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	b118      	cbz	r0, 8009702 <_fflush_r+0x1a>
 80096fa:	6a03      	ldr	r3, [r0, #32]
 80096fc:	b90b      	cbnz	r3, 8009702 <_fflush_r+0x1a>
 80096fe:	f7fe f99f 	bl	8007a40 <__sinit>
 8009702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f3      	beq.n	80096f2 <_fflush_r+0xa>
 800970a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800970c:	07d0      	lsls	r0, r2, #31
 800970e:	d404      	bmi.n	800971a <_fflush_r+0x32>
 8009710:	0599      	lsls	r1, r3, #22
 8009712:	d402      	bmi.n	800971a <_fflush_r+0x32>
 8009714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009716:	f7fe fb00 	bl	8007d1a <__retarget_lock_acquire_recursive>
 800971a:	4628      	mov	r0, r5
 800971c:	4621      	mov	r1, r4
 800971e:	f7ff ff5d 	bl	80095dc <__sflush_r>
 8009722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009724:	07da      	lsls	r2, r3, #31
 8009726:	4605      	mov	r5, r0
 8009728:	d4e4      	bmi.n	80096f4 <_fflush_r+0xc>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	059b      	lsls	r3, r3, #22
 800972e:	d4e1      	bmi.n	80096f4 <_fflush_r+0xc>
 8009730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009732:	f7fe faf3 	bl	8007d1c <__retarget_lock_release_recursive>
 8009736:	e7dd      	b.n	80096f4 <_fflush_r+0xc>

08009738 <memmove>:
 8009738:	4288      	cmp	r0, r1
 800973a:	b510      	push	{r4, lr}
 800973c:	eb01 0402 	add.w	r4, r1, r2
 8009740:	d902      	bls.n	8009748 <memmove+0x10>
 8009742:	4284      	cmp	r4, r0
 8009744:	4623      	mov	r3, r4
 8009746:	d807      	bhi.n	8009758 <memmove+0x20>
 8009748:	1e43      	subs	r3, r0, #1
 800974a:	42a1      	cmp	r1, r4
 800974c:	d008      	beq.n	8009760 <memmove+0x28>
 800974e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009756:	e7f8      	b.n	800974a <memmove+0x12>
 8009758:	4402      	add	r2, r0
 800975a:	4601      	mov	r1, r0
 800975c:	428a      	cmp	r2, r1
 800975e:	d100      	bne.n	8009762 <memmove+0x2a>
 8009760:	bd10      	pop	{r4, pc}
 8009762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800976a:	e7f7      	b.n	800975c <memmove+0x24>

0800976c <_sbrk_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d06      	ldr	r5, [pc, #24]	; (8009788 <_sbrk_r+0x1c>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7f9 f9be 	bl	8002af8 <_sbrk>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_sbrk_r+0x1a>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_sbrk_r+0x1a>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	20004924 	.word	0x20004924

0800978c <__assert_func>:
 800978c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800978e:	4614      	mov	r4, r2
 8009790:	461a      	mov	r2, r3
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <__assert_func+0x2c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4605      	mov	r5, r0
 8009798:	68d8      	ldr	r0, [r3, #12]
 800979a:	b14c      	cbz	r4, 80097b0 <__assert_func+0x24>
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <__assert_func+0x30>)
 800979e:	9100      	str	r1, [sp, #0]
 80097a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097a4:	4906      	ldr	r1, [pc, #24]	; (80097c0 <__assert_func+0x34>)
 80097a6:	462b      	mov	r3, r5
 80097a8:	f000 f872 	bl	8009890 <fiprintf>
 80097ac:	f000 f882 	bl	80098b4 <abort>
 80097b0:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <__assert_func+0x38>)
 80097b2:	461c      	mov	r4, r3
 80097b4:	e7f3      	b.n	800979e <__assert_func+0x12>
 80097b6:	bf00      	nop
 80097b8:	20000070 	.word	0x20000070
 80097bc:	0800b6ff 	.word	0x0800b6ff
 80097c0:	0800b70c 	.word	0x0800b70c
 80097c4:	0800b73a 	.word	0x0800b73a

080097c8 <_calloc_r>:
 80097c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ca:	fba1 2402 	umull	r2, r4, r1, r2
 80097ce:	b94c      	cbnz	r4, 80097e4 <_calloc_r+0x1c>
 80097d0:	4611      	mov	r1, r2
 80097d2:	9201      	str	r2, [sp, #4]
 80097d4:	f7ff f9a2 	bl	8008b1c <_malloc_r>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	4605      	mov	r5, r0
 80097dc:	b930      	cbnz	r0, 80097ec <_calloc_r+0x24>
 80097de:	4628      	mov	r0, r5
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	220c      	movs	r2, #12
 80097e6:	6002      	str	r2, [r0, #0]
 80097e8:	2500      	movs	r5, #0
 80097ea:	e7f8      	b.n	80097de <_calloc_r+0x16>
 80097ec:	4621      	mov	r1, r4
 80097ee:	f7fe f9c0 	bl	8007b72 <memset>
 80097f2:	e7f4      	b.n	80097de <_calloc_r+0x16>

080097f4 <__ascii_mbtowc>:
 80097f4:	b082      	sub	sp, #8
 80097f6:	b901      	cbnz	r1, 80097fa <__ascii_mbtowc+0x6>
 80097f8:	a901      	add	r1, sp, #4
 80097fa:	b142      	cbz	r2, 800980e <__ascii_mbtowc+0x1a>
 80097fc:	b14b      	cbz	r3, 8009812 <__ascii_mbtowc+0x1e>
 80097fe:	7813      	ldrb	r3, [r2, #0]
 8009800:	600b      	str	r3, [r1, #0]
 8009802:	7812      	ldrb	r2, [r2, #0]
 8009804:	1e10      	subs	r0, r2, #0
 8009806:	bf18      	it	ne
 8009808:	2001      	movne	r0, #1
 800980a:	b002      	add	sp, #8
 800980c:	4770      	bx	lr
 800980e:	4610      	mov	r0, r2
 8009810:	e7fb      	b.n	800980a <__ascii_mbtowc+0x16>
 8009812:	f06f 0001 	mvn.w	r0, #1
 8009816:	e7f8      	b.n	800980a <__ascii_mbtowc+0x16>

08009818 <_realloc_r>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	4680      	mov	r8, r0
 800981e:	4614      	mov	r4, r2
 8009820:	460e      	mov	r6, r1
 8009822:	b921      	cbnz	r1, 800982e <_realloc_r+0x16>
 8009824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	4611      	mov	r1, r2
 800982a:	f7ff b977 	b.w	8008b1c <_malloc_r>
 800982e:	b92a      	cbnz	r2, 800983c <_realloc_r+0x24>
 8009830:	f7ff f900 	bl	8008a34 <_free_r>
 8009834:	4625      	mov	r5, r4
 8009836:	4628      	mov	r0, r5
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983c:	f000 f841 	bl	80098c2 <_malloc_usable_size_r>
 8009840:	4284      	cmp	r4, r0
 8009842:	4607      	mov	r7, r0
 8009844:	d802      	bhi.n	800984c <_realloc_r+0x34>
 8009846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800984a:	d812      	bhi.n	8009872 <_realloc_r+0x5a>
 800984c:	4621      	mov	r1, r4
 800984e:	4640      	mov	r0, r8
 8009850:	f7ff f964 	bl	8008b1c <_malloc_r>
 8009854:	4605      	mov	r5, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d0ed      	beq.n	8009836 <_realloc_r+0x1e>
 800985a:	42bc      	cmp	r4, r7
 800985c:	4622      	mov	r2, r4
 800985e:	4631      	mov	r1, r6
 8009860:	bf28      	it	cs
 8009862:	463a      	movcs	r2, r7
 8009864:	f7fe fa5b 	bl	8007d1e <memcpy>
 8009868:	4631      	mov	r1, r6
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff f8e2 	bl	8008a34 <_free_r>
 8009870:	e7e1      	b.n	8009836 <_realloc_r+0x1e>
 8009872:	4635      	mov	r5, r6
 8009874:	e7df      	b.n	8009836 <_realloc_r+0x1e>

08009876 <__ascii_wctomb>:
 8009876:	b149      	cbz	r1, 800988c <__ascii_wctomb+0x16>
 8009878:	2aff      	cmp	r2, #255	; 0xff
 800987a:	bf85      	ittet	hi
 800987c:	238a      	movhi	r3, #138	; 0x8a
 800987e:	6003      	strhi	r3, [r0, #0]
 8009880:	700a      	strbls	r2, [r1, #0]
 8009882:	f04f 30ff 	movhi.w	r0, #4294967295
 8009886:	bf98      	it	ls
 8009888:	2001      	movls	r0, #1
 800988a:	4770      	bx	lr
 800988c:	4608      	mov	r0, r1
 800988e:	4770      	bx	lr

08009890 <fiprintf>:
 8009890:	b40e      	push	{r1, r2, r3}
 8009892:	b503      	push	{r0, r1, lr}
 8009894:	4601      	mov	r1, r0
 8009896:	ab03      	add	r3, sp, #12
 8009898:	4805      	ldr	r0, [pc, #20]	; (80098b0 <fiprintf+0x20>)
 800989a:	f853 2b04 	ldr.w	r2, [r3], #4
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	f000 f83f 	bl	8009924 <_vfiprintf_r>
 80098a6:	b002      	add	sp, #8
 80098a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098ac:	b003      	add	sp, #12
 80098ae:	4770      	bx	lr
 80098b0:	20000070 	.word	0x20000070

080098b4 <abort>:
 80098b4:	b508      	push	{r3, lr}
 80098b6:	2006      	movs	r0, #6
 80098b8:	f000 fa0c 	bl	8009cd4 <raise>
 80098bc:	2001      	movs	r0, #1
 80098be:	f7f9 f8a3 	bl	8002a08 <_exit>

080098c2 <_malloc_usable_size_r>:
 80098c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c6:	1f18      	subs	r0, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfbc      	itt	lt
 80098cc:	580b      	ldrlt	r3, [r1, r0]
 80098ce:	18c0      	addlt	r0, r0, r3
 80098d0:	4770      	bx	lr

080098d2 <__sfputc_r>:
 80098d2:	6893      	ldr	r3, [r2, #8]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	b410      	push	{r4}
 80098da:	6093      	str	r3, [r2, #8]
 80098dc:	da08      	bge.n	80098f0 <__sfputc_r+0x1e>
 80098de:	6994      	ldr	r4, [r2, #24]
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	db01      	blt.n	80098e8 <__sfputc_r+0x16>
 80098e4:	290a      	cmp	r1, #10
 80098e6:	d103      	bne.n	80098f0 <__sfputc_r+0x1e>
 80098e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ec:	f000 b934 	b.w	8009b58 <__swbuf_r>
 80098f0:	6813      	ldr	r3, [r2, #0]
 80098f2:	1c58      	adds	r0, r3, #1
 80098f4:	6010      	str	r0, [r2, #0]
 80098f6:	7019      	strb	r1, [r3, #0]
 80098f8:	4608      	mov	r0, r1
 80098fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <__sfputs_r>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	4614      	mov	r4, r2
 8009908:	18d5      	adds	r5, r2, r3
 800990a:	42ac      	cmp	r4, r5
 800990c:	d101      	bne.n	8009912 <__sfputs_r+0x12>
 800990e:	2000      	movs	r0, #0
 8009910:	e007      	b.n	8009922 <__sfputs_r+0x22>
 8009912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009916:	463a      	mov	r2, r7
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff ffda 	bl	80098d2 <__sfputc_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d1f3      	bne.n	800990a <__sfputs_r+0xa>
 8009922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009924 <_vfiprintf_r>:
 8009924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009928:	460d      	mov	r5, r1
 800992a:	b09d      	sub	sp, #116	; 0x74
 800992c:	4614      	mov	r4, r2
 800992e:	4698      	mov	r8, r3
 8009930:	4606      	mov	r6, r0
 8009932:	b118      	cbz	r0, 800993c <_vfiprintf_r+0x18>
 8009934:	6a03      	ldr	r3, [r0, #32]
 8009936:	b90b      	cbnz	r3, 800993c <_vfiprintf_r+0x18>
 8009938:	f7fe f882 	bl	8007a40 <__sinit>
 800993c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993e:	07d9      	lsls	r1, r3, #31
 8009940:	d405      	bmi.n	800994e <_vfiprintf_r+0x2a>
 8009942:	89ab      	ldrh	r3, [r5, #12]
 8009944:	059a      	lsls	r2, r3, #22
 8009946:	d402      	bmi.n	800994e <_vfiprintf_r+0x2a>
 8009948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994a:	f7fe f9e6 	bl	8007d1a <__retarget_lock_acquire_recursive>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	d501      	bpl.n	8009958 <_vfiprintf_r+0x34>
 8009954:	692b      	ldr	r3, [r5, #16]
 8009956:	b99b      	cbnz	r3, 8009980 <_vfiprintf_r+0x5c>
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f000 f93a 	bl	8009bd4 <__swsetup_r>
 8009960:	b170      	cbz	r0, 8009980 <_vfiprintf_r+0x5c>
 8009962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009964:	07dc      	lsls	r4, r3, #31
 8009966:	d504      	bpl.n	8009972 <_vfiprintf_r+0x4e>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	b01d      	add	sp, #116	; 0x74
 800996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	0598      	lsls	r0, r3, #22
 8009976:	d4f7      	bmi.n	8009968 <_vfiprintf_r+0x44>
 8009978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997a:	f7fe f9cf 	bl	8007d1c <__retarget_lock_release_recursive>
 800997e:	e7f3      	b.n	8009968 <_vfiprintf_r+0x44>
 8009980:	2300      	movs	r3, #0
 8009982:	9309      	str	r3, [sp, #36]	; 0x24
 8009984:	2320      	movs	r3, #32
 8009986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998a:	f8cd 800c 	str.w	r8, [sp, #12]
 800998e:	2330      	movs	r3, #48	; 0x30
 8009990:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009b44 <_vfiprintf_r+0x220>
 8009994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009998:	f04f 0901 	mov.w	r9, #1
 800999c:	4623      	mov	r3, r4
 800999e:	469a      	mov	sl, r3
 80099a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a4:	b10a      	cbz	r2, 80099aa <_vfiprintf_r+0x86>
 80099a6:	2a25      	cmp	r2, #37	; 0x25
 80099a8:	d1f9      	bne.n	800999e <_vfiprintf_r+0x7a>
 80099aa:	ebba 0b04 	subs.w	fp, sl, r4
 80099ae:	d00b      	beq.n	80099c8 <_vfiprintf_r+0xa4>
 80099b0:	465b      	mov	r3, fp
 80099b2:	4622      	mov	r2, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7ff ffa2 	bl	8009900 <__sfputs_r>
 80099bc:	3001      	adds	r0, #1
 80099be:	f000 80a9 	beq.w	8009b14 <_vfiprintf_r+0x1f0>
 80099c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c4:	445a      	add	r2, fp
 80099c6:	9209      	str	r2, [sp, #36]	; 0x24
 80099c8:	f89a 3000 	ldrb.w	r3, [sl]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80a1 	beq.w	8009b14 <_vfiprintf_r+0x1f0>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099dc:	f10a 0a01 	add.w	sl, sl, #1
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	9307      	str	r3, [sp, #28]
 80099e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e8:	931a      	str	r3, [sp, #104]	; 0x68
 80099ea:	4654      	mov	r4, sl
 80099ec:	2205      	movs	r2, #5
 80099ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f2:	4854      	ldr	r0, [pc, #336]	; (8009b44 <_vfiprintf_r+0x220>)
 80099f4:	f7f6 fbf4 	bl	80001e0 <memchr>
 80099f8:	9a04      	ldr	r2, [sp, #16]
 80099fa:	b9d8      	cbnz	r0, 8009a34 <_vfiprintf_r+0x110>
 80099fc:	06d1      	lsls	r1, r2, #27
 80099fe:	bf44      	itt	mi
 8009a00:	2320      	movmi	r3, #32
 8009a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a06:	0713      	lsls	r3, r2, #28
 8009a08:	bf44      	itt	mi
 8009a0a:	232b      	movmi	r3, #43	; 0x2b
 8009a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a10:	f89a 3000 	ldrb.w	r3, [sl]
 8009a14:	2b2a      	cmp	r3, #42	; 0x2a
 8009a16:	d015      	beq.n	8009a44 <_vfiprintf_r+0x120>
 8009a18:	9a07      	ldr	r2, [sp, #28]
 8009a1a:	4654      	mov	r4, sl
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	4621      	mov	r1, r4
 8009a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a28:	3b30      	subs	r3, #48	; 0x30
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d94d      	bls.n	8009aca <_vfiprintf_r+0x1a6>
 8009a2e:	b1b0      	cbz	r0, 8009a5e <_vfiprintf_r+0x13a>
 8009a30:	9207      	str	r2, [sp, #28]
 8009a32:	e014      	b.n	8009a5e <_vfiprintf_r+0x13a>
 8009a34:	eba0 0308 	sub.w	r3, r0, r8
 8009a38:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	46a2      	mov	sl, r4
 8009a42:	e7d2      	b.n	80099ea <_vfiprintf_r+0xc6>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	1d19      	adds	r1, r3, #4
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9103      	str	r1, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfbb      	ittet	lt
 8009a50:	425b      	neglt	r3, r3
 8009a52:	f042 0202 	orrlt.w	r2, r2, #2
 8009a56:	9307      	strge	r3, [sp, #28]
 8009a58:	9307      	strlt	r3, [sp, #28]
 8009a5a:	bfb8      	it	lt
 8009a5c:	9204      	strlt	r2, [sp, #16]
 8009a5e:	7823      	ldrb	r3, [r4, #0]
 8009a60:	2b2e      	cmp	r3, #46	; 0x2e
 8009a62:	d10c      	bne.n	8009a7e <_vfiprintf_r+0x15a>
 8009a64:	7863      	ldrb	r3, [r4, #1]
 8009a66:	2b2a      	cmp	r3, #42	; 0x2a
 8009a68:	d134      	bne.n	8009ad4 <_vfiprintf_r+0x1b0>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	1d1a      	adds	r2, r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9203      	str	r2, [sp, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfb8      	it	lt
 8009a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7a:	3402      	adds	r4, #2
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009b54 <_vfiprintf_r+0x230>
 8009a82:	7821      	ldrb	r1, [r4, #0]
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	f7f6 fbaa 	bl	80001e0 <memchr>
 8009a8c:	b138      	cbz	r0, 8009a9e <_vfiprintf_r+0x17a>
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	eba0 000a 	sub.w	r0, r0, sl
 8009a94:	2240      	movs	r2, #64	; 0x40
 8009a96:	4082      	lsls	r2, r0
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	4829      	ldr	r0, [pc, #164]	; (8009b48 <_vfiprintf_r+0x224>)
 8009aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa8:	2206      	movs	r2, #6
 8009aaa:	f7f6 fb99 	bl	80001e0 <memchr>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d03f      	beq.n	8009b32 <_vfiprintf_r+0x20e>
 8009ab2:	4b26      	ldr	r3, [pc, #152]	; (8009b4c <_vfiprintf_r+0x228>)
 8009ab4:	bb1b      	cbnz	r3, 8009afe <_vfiprintf_r+0x1da>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	3307      	adds	r3, #7
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	3308      	adds	r3, #8
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac4:	443b      	add	r3, r7
 8009ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac8:	e768      	b.n	800999c <_vfiprintf_r+0x78>
 8009aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	e7a6      	b.n	8009a22 <_vfiprintf_r+0xfe>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	4619      	mov	r1, r3
 8009adc:	f04f 0c0a 	mov.w	ip, #10
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae6:	3a30      	subs	r2, #48	; 0x30
 8009ae8:	2a09      	cmp	r2, #9
 8009aea:	d903      	bls.n	8009af4 <_vfiprintf_r+0x1d0>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c6      	beq.n	8009a7e <_vfiprintf_r+0x15a>
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	e7c4      	b.n	8009a7e <_vfiprintf_r+0x15a>
 8009af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af8:	4604      	mov	r4, r0
 8009afa:	2301      	movs	r3, #1
 8009afc:	e7f0      	b.n	8009ae0 <_vfiprintf_r+0x1bc>
 8009afe:	ab03      	add	r3, sp, #12
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	462a      	mov	r2, r5
 8009b04:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <_vfiprintf_r+0x22c>)
 8009b06:	a904      	add	r1, sp, #16
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7fd fb47 	bl	800719c <_printf_float>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	1c78      	adds	r0, r7, #1
 8009b12:	d1d6      	bne.n	8009ac2 <_vfiprintf_r+0x19e>
 8009b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b16:	07d9      	lsls	r1, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_vfiprintf_r+0x202>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_vfiprintf_r+0x202>
 8009b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b22:	f7fe f8fb 	bl	8007d1c <__retarget_lock_release_recursive>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	f53f af1d 	bmi.w	8009968 <_vfiprintf_r+0x44>
 8009b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b30:	e71c      	b.n	800996c <_vfiprintf_r+0x48>
 8009b32:	ab03      	add	r3, sp, #12
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	462a      	mov	r2, r5
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <_vfiprintf_r+0x22c>)
 8009b3a:	a904      	add	r1, sp, #16
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7fd fdd1 	bl	80076e4 <_printf_i>
 8009b42:	e7e4      	b.n	8009b0e <_vfiprintf_r+0x1ea>
 8009b44:	0800b6e4 	.word	0x0800b6e4
 8009b48:	0800b6ee 	.word	0x0800b6ee
 8009b4c:	0800719d 	.word	0x0800719d
 8009b50:	08009901 	.word	0x08009901
 8009b54:	0800b6ea 	.word	0x0800b6ea

08009b58 <__swbuf_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	4605      	mov	r5, r0
 8009b60:	b118      	cbz	r0, 8009b6a <__swbuf_r+0x12>
 8009b62:	6a03      	ldr	r3, [r0, #32]
 8009b64:	b90b      	cbnz	r3, 8009b6a <__swbuf_r+0x12>
 8009b66:	f7fd ff6b 	bl	8007a40 <__sinit>
 8009b6a:	69a3      	ldr	r3, [r4, #24]
 8009b6c:	60a3      	str	r3, [r4, #8]
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	071a      	lsls	r2, r3, #28
 8009b72:	d525      	bpl.n	8009bc0 <__swbuf_r+0x68>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	b31b      	cbz	r3, 8009bc0 <__swbuf_r+0x68>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	6922      	ldr	r2, [r4, #16]
 8009b7c:	1a98      	subs	r0, r3, r2
 8009b7e:	6963      	ldr	r3, [r4, #20]
 8009b80:	b2f6      	uxtb	r6, r6
 8009b82:	4283      	cmp	r3, r0
 8009b84:	4637      	mov	r7, r6
 8009b86:	dc04      	bgt.n	8009b92 <__swbuf_r+0x3a>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7ff fdac 	bl	80096e8 <_fflush_r>
 8009b90:	b9e0      	cbnz	r0, 8009bcc <__swbuf_r+0x74>
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	60a3      	str	r3, [r4, #8]
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	6022      	str	r2, [r4, #0]
 8009b9e:	701e      	strb	r6, [r3, #0]
 8009ba0:	6962      	ldr	r2, [r4, #20]
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d004      	beq.n	8009bb2 <__swbuf_r+0x5a>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	07db      	lsls	r3, r3, #31
 8009bac:	d506      	bpl.n	8009bbc <__swbuf_r+0x64>
 8009bae:	2e0a      	cmp	r6, #10
 8009bb0:	d104      	bne.n	8009bbc <__swbuf_r+0x64>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7ff fd97 	bl	80096e8 <_fflush_r>
 8009bba:	b938      	cbnz	r0, 8009bcc <__swbuf_r+0x74>
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 f806 	bl	8009bd4 <__swsetup_r>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d0d5      	beq.n	8009b78 <__swbuf_r+0x20>
 8009bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8009bd0:	e7f4      	b.n	8009bbc <__swbuf_r+0x64>
	...

08009bd4 <__swsetup_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4b2a      	ldr	r3, [pc, #168]	; (8009c80 <__swsetup_r+0xac>)
 8009bd8:	4605      	mov	r5, r0
 8009bda:	6818      	ldr	r0, [r3, #0]
 8009bdc:	460c      	mov	r4, r1
 8009bde:	b118      	cbz	r0, 8009be8 <__swsetup_r+0x14>
 8009be0:	6a03      	ldr	r3, [r0, #32]
 8009be2:	b90b      	cbnz	r3, 8009be8 <__swsetup_r+0x14>
 8009be4:	f7fd ff2c 	bl	8007a40 <__sinit>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bee:	0718      	lsls	r0, r3, #28
 8009bf0:	d422      	bmi.n	8009c38 <__swsetup_r+0x64>
 8009bf2:	06d9      	lsls	r1, r3, #27
 8009bf4:	d407      	bmi.n	8009c06 <__swsetup_r+0x32>
 8009bf6:	2309      	movs	r3, #9
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	e034      	b.n	8009c70 <__swsetup_r+0x9c>
 8009c06:	0758      	lsls	r0, r3, #29
 8009c08:	d512      	bpl.n	8009c30 <__swsetup_r+0x5c>
 8009c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0c:	b141      	cbz	r1, 8009c20 <__swsetup_r+0x4c>
 8009c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c12:	4299      	cmp	r1, r3
 8009c14:	d002      	beq.n	8009c1c <__swsetup_r+0x48>
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7fe ff0c 	bl	8008a34 <_free_r>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6363      	str	r3, [r4, #52]	; 0x34
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0308 	orr.w	r3, r3, #8
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	b94b      	cbnz	r3, 8009c50 <__swsetup_r+0x7c>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c46:	d003      	beq.n	8009c50 <__swsetup_r+0x7c>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 f884 	bl	8009d58 <__smakebuf_r>
 8009c50:	89a0      	ldrh	r0, [r4, #12]
 8009c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c56:	f010 0301 	ands.w	r3, r0, #1
 8009c5a:	d00a      	beq.n	8009c72 <__swsetup_r+0x9e>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60a3      	str	r3, [r4, #8]
 8009c60:	6963      	ldr	r3, [r4, #20]
 8009c62:	425b      	negs	r3, r3
 8009c64:	61a3      	str	r3, [r4, #24]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	b943      	cbnz	r3, 8009c7c <__swsetup_r+0xa8>
 8009c6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c6e:	d1c4      	bne.n	8009bfa <__swsetup_r+0x26>
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	0781      	lsls	r1, r0, #30
 8009c74:	bf58      	it	pl
 8009c76:	6963      	ldrpl	r3, [r4, #20]
 8009c78:	60a3      	str	r3, [r4, #8]
 8009c7a:	e7f4      	b.n	8009c66 <__swsetup_r+0x92>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7f7      	b.n	8009c70 <__swsetup_r+0x9c>
 8009c80:	20000070 	.word	0x20000070

08009c84 <_raise_r>:
 8009c84:	291f      	cmp	r1, #31
 8009c86:	b538      	push	{r3, r4, r5, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	d904      	bls.n	8009c98 <_raise_r+0x14>
 8009c8e:	2316      	movs	r3, #22
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c9a:	b112      	cbz	r2, 8009ca2 <_raise_r+0x1e>
 8009c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca0:	b94b      	cbnz	r3, 8009cb6 <_raise_r+0x32>
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 f830 	bl	8009d08 <_getpid_r>
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4601      	mov	r1, r0
 8009cac:	4620      	mov	r0, r4
 8009cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb2:	f000 b817 	b.w	8009ce4 <_kill_r>
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d00a      	beq.n	8009cd0 <_raise_r+0x4c>
 8009cba:	1c59      	adds	r1, r3, #1
 8009cbc:	d103      	bne.n	8009cc6 <_raise_r+0x42>
 8009cbe:	2316      	movs	r3, #22
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7e7      	b.n	8009c96 <_raise_r+0x12>
 8009cc6:	2400      	movs	r4, #0
 8009cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ccc:	4628      	mov	r0, r5
 8009cce:	4798      	blx	r3
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7e0      	b.n	8009c96 <_raise_r+0x12>

08009cd4 <raise>:
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <raise+0xc>)
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f7ff bfd3 	b.w	8009c84 <_raise_r>
 8009cde:	bf00      	nop
 8009ce0:	20000070 	.word	0x20000070

08009ce4 <_kill_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_kill_r+0x20>)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4604      	mov	r4, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	f7f8 fe79 	bl	80029e8 <_kill>
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	d102      	bne.n	8009d00 <_kill_r+0x1c>
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	b103      	cbz	r3, 8009d00 <_kill_r+0x1c>
 8009cfe:	6023      	str	r3, [r4, #0]
 8009d00:	bd38      	pop	{r3, r4, r5, pc}
 8009d02:	bf00      	nop
 8009d04:	20004924 	.word	0x20004924

08009d08 <_getpid_r>:
 8009d08:	f7f8 be66 	b.w	80029d8 <_getpid>

08009d0c <__swhatbuf_r>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d14:	2900      	cmp	r1, #0
 8009d16:	b096      	sub	sp, #88	; 0x58
 8009d18:	4615      	mov	r5, r2
 8009d1a:	461e      	mov	r6, r3
 8009d1c:	da0d      	bge.n	8009d3a <__swhatbuf_r+0x2e>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d24:	f04f 0100 	mov.w	r1, #0
 8009d28:	bf0c      	ite	eq
 8009d2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d2e:	2340      	movne	r3, #64	; 0x40
 8009d30:	2000      	movs	r0, #0
 8009d32:	6031      	str	r1, [r6, #0]
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	b016      	add	sp, #88	; 0x58
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	466a      	mov	r2, sp
 8009d3c:	f000 f848 	bl	8009dd0 <_fstat_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	dbec      	blt.n	8009d1e <__swhatbuf_r+0x12>
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d4e:	4259      	negs	r1, r3
 8009d50:	4159      	adcs	r1, r3
 8009d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d56:	e7eb      	b.n	8009d30 <__swhatbuf_r+0x24>

08009d58 <__smakebuf_r>:
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d5c:	079d      	lsls	r5, r3, #30
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d507      	bpl.n	8009d74 <__smakebuf_r+0x1c>
 8009d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6163      	str	r3, [r4, #20]
 8009d70:	b002      	add	sp, #8
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	ab01      	add	r3, sp, #4
 8009d76:	466a      	mov	r2, sp
 8009d78:	f7ff ffc8 	bl	8009d0c <__swhatbuf_r>
 8009d7c:	9900      	ldr	r1, [sp, #0]
 8009d7e:	4605      	mov	r5, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7fe fecb 	bl	8008b1c <_malloc_r>
 8009d86:	b948      	cbnz	r0, 8009d9c <__smakebuf_r+0x44>
 8009d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8c:	059a      	lsls	r2, r3, #22
 8009d8e:	d4ef      	bmi.n	8009d70 <__smakebuf_r+0x18>
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	e7e3      	b.n	8009d64 <__smakebuf_r+0xc>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	6020      	str	r0, [r4, #0]
 8009da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	6163      	str	r3, [r4, #20]
 8009daa:	9b01      	ldr	r3, [sp, #4]
 8009dac:	6120      	str	r0, [r4, #16]
 8009dae:	b15b      	cbz	r3, 8009dc8 <__smakebuf_r+0x70>
 8009db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 f81d 	bl	8009df4 <_isatty_r>
 8009dba:	b128      	cbz	r0, 8009dc8 <__smakebuf_r+0x70>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	431d      	orrs	r5, r3
 8009dcc:	81a5      	strh	r5, [r4, #12]
 8009dce:	e7cf      	b.n	8009d70 <__smakebuf_r+0x18>

08009dd0 <_fstat_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_fstat_r+0x20>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	4611      	mov	r1, r2
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	f7f8 fe62 	bl	8002aa6 <_fstat>
 8009de2:	1c43      	adds	r3, r0, #1
 8009de4:	d102      	bne.n	8009dec <_fstat_r+0x1c>
 8009de6:	682b      	ldr	r3, [r5, #0]
 8009de8:	b103      	cbz	r3, 8009dec <_fstat_r+0x1c>
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	bd38      	pop	{r3, r4, r5, pc}
 8009dee:	bf00      	nop
 8009df0:	20004924 	.word	0x20004924

08009df4 <_isatty_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d06      	ldr	r5, [pc, #24]	; (8009e10 <_isatty_r+0x1c>)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	602b      	str	r3, [r5, #0]
 8009e00:	f7f8 fe61 	bl	8002ac6 <_isatty>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d102      	bne.n	8009e0e <_isatty_r+0x1a>
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	b103      	cbz	r3, 8009e0e <_isatty_r+0x1a>
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	20004924 	.word	0x20004924

08009e14 <pow>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	ed2d 8b02 	vpush	{d8}
 8009e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8009e1e:	eef0 8a60 	vmov.f32	s17, s1
 8009e22:	ec55 4b11 	vmov	r4, r5, d1
 8009e26:	f000 f873 	bl	8009f10 <__ieee754_pow>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	462b      	mov	r3, r5
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	ec57 6b10 	vmov	r6, r7, d0
 8009e36:	f7f6 fe81 	bl	8000b3c <__aeabi_dcmpun>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d13b      	bne.n	8009eb6 <pow+0xa2>
 8009e3e:	ec51 0b18 	vmov	r0, r1, d8
 8009e42:	2200      	movs	r2, #0
 8009e44:	2300      	movs	r3, #0
 8009e46:	f7f6 fe47 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e4a:	b1b8      	cbz	r0, 8009e7c <pow+0x68>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4620      	mov	r0, r4
 8009e52:	4629      	mov	r1, r5
 8009e54:	f7f6 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d146      	bne.n	8009eea <pow+0xd6>
 8009e5c:	ec45 4b10 	vmov	d0, r4, r5
 8009e60:	f000 f848 	bl	8009ef4 <finite>
 8009e64:	b338      	cbz	r0, 8009eb6 <pow+0xa2>
 8009e66:	2200      	movs	r2, #0
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	f7f6 fe3d 	bl	8000aec <__aeabi_dcmplt>
 8009e72:	b300      	cbz	r0, 8009eb6 <pow+0xa2>
 8009e74:	f7fd ff26 	bl	8007cc4 <__errno>
 8009e78:	2322      	movs	r3, #34	; 0x22
 8009e7a:	e01b      	b.n	8009eb4 <pow+0xa0>
 8009e7c:	ec47 6b10 	vmov	d0, r6, r7
 8009e80:	f000 f838 	bl	8009ef4 <finite>
 8009e84:	b9e0      	cbnz	r0, 8009ec0 <pow+0xac>
 8009e86:	eeb0 0a48 	vmov.f32	s0, s16
 8009e8a:	eef0 0a68 	vmov.f32	s1, s17
 8009e8e:	f000 f831 	bl	8009ef4 <finite>
 8009e92:	b1a8      	cbz	r0, 8009ec0 <pow+0xac>
 8009e94:	ec45 4b10 	vmov	d0, r4, r5
 8009e98:	f000 f82c 	bl	8009ef4 <finite>
 8009e9c:	b180      	cbz	r0, 8009ec0 <pow+0xac>
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	463b      	mov	r3, r7
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fe49 	bl	8000b3c <__aeabi_dcmpun>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0e2      	beq.n	8009e74 <pow+0x60>
 8009eae:	f7fd ff09 	bl	8007cc4 <__errno>
 8009eb2:	2321      	movs	r3, #33	; 0x21
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	ecbd 8b02 	vpop	{d8}
 8009eba:	ec47 6b10 	vmov	d0, r6, r7
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f7f6 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d0f2      	beq.n	8009eb6 <pow+0xa2>
 8009ed0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ed4:	eef0 0a68 	vmov.f32	s1, s17
 8009ed8:	f000 f80c 	bl	8009ef4 <finite>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0ea      	beq.n	8009eb6 <pow+0xa2>
 8009ee0:	ec45 4b10 	vmov	d0, r4, r5
 8009ee4:	f000 f806 	bl	8009ef4 <finite>
 8009ee8:	e7c3      	b.n	8009e72 <pow+0x5e>
 8009eea:	4f01      	ldr	r7, [pc, #4]	; (8009ef0 <pow+0xdc>)
 8009eec:	2600      	movs	r6, #0
 8009eee:	e7e2      	b.n	8009eb6 <pow+0xa2>
 8009ef0:	3ff00000 	.word	0x3ff00000

08009ef4 <finite>:
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	ed8d 0b00 	vstr	d0, [sp]
 8009efa:	9801      	ldr	r0, [sp, #4]
 8009efc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009f00:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f04:	0fc0      	lsrs	r0, r0, #31
 8009f06:	b002      	add	sp, #8
 8009f08:	4770      	bx	lr
 8009f0a:	0000      	movs	r0, r0
 8009f0c:	0000      	movs	r0, r0
	...

08009f10 <__ieee754_pow>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	ed2d 8b06 	vpush	{d8-d10}
 8009f18:	b089      	sub	sp, #36	; 0x24
 8009f1a:	ed8d 1b00 	vstr	d1, [sp]
 8009f1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009f22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009f26:	ea58 0102 	orrs.w	r1, r8, r2
 8009f2a:	ec57 6b10 	vmov	r6, r7, d0
 8009f2e:	d115      	bne.n	8009f5c <__ieee754_pow+0x4c>
 8009f30:	19b3      	adds	r3, r6, r6
 8009f32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009f36:	4152      	adcs	r2, r2
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	4b89      	ldr	r3, [pc, #548]	; (800a160 <__ieee754_pow+0x250>)
 8009f3c:	4193      	sbcs	r3, r2
 8009f3e:	f080 84d1 	bcs.w	800a8e4 <__ieee754_pow+0x9d4>
 8009f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 f9a7 	bl	800029c <__adddf3>
 8009f4e:	ec41 0b10 	vmov	d0, r0, r1
 8009f52:	b009      	add	sp, #36	; 0x24
 8009f54:	ecbd 8b06 	vpop	{d8-d10}
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	4b81      	ldr	r3, [pc, #516]	; (800a164 <__ieee754_pow+0x254>)
 8009f5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009f62:	429c      	cmp	r4, r3
 8009f64:	ee10 aa10 	vmov	sl, s0
 8009f68:	463d      	mov	r5, r7
 8009f6a:	dc06      	bgt.n	8009f7a <__ieee754_pow+0x6a>
 8009f6c:	d101      	bne.n	8009f72 <__ieee754_pow+0x62>
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d1e7      	bne.n	8009f42 <__ieee754_pow+0x32>
 8009f72:	4598      	cmp	r8, r3
 8009f74:	dc01      	bgt.n	8009f7a <__ieee754_pow+0x6a>
 8009f76:	d10f      	bne.n	8009f98 <__ieee754_pow+0x88>
 8009f78:	b172      	cbz	r2, 8009f98 <__ieee754_pow+0x88>
 8009f7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009f7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009f82:	ea55 050a 	orrs.w	r5, r5, sl
 8009f86:	d1dc      	bne.n	8009f42 <__ieee754_pow+0x32>
 8009f88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f8c:	18db      	adds	r3, r3, r3
 8009f8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009f92:	4152      	adcs	r2, r2
 8009f94:	429d      	cmp	r5, r3
 8009f96:	e7d0      	b.n	8009f3a <__ieee754_pow+0x2a>
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	da3b      	bge.n	800a014 <__ieee754_pow+0x104>
 8009f9c:	4b72      	ldr	r3, [pc, #456]	; (800a168 <__ieee754_pow+0x258>)
 8009f9e:	4598      	cmp	r8, r3
 8009fa0:	dc51      	bgt.n	800a046 <__ieee754_pow+0x136>
 8009fa2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009fa6:	4598      	cmp	r8, r3
 8009fa8:	f340 84ab 	ble.w	800a902 <__ieee754_pow+0x9f2>
 8009fac:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fb4:	2b14      	cmp	r3, #20
 8009fb6:	dd0f      	ble.n	8009fd8 <__ieee754_pow+0xc8>
 8009fb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009fbc:	fa22 f103 	lsr.w	r1, r2, r3
 8009fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	f040 849c 	bne.w	800a902 <__ieee754_pow+0x9f2>
 8009fca:	f001 0101 	and.w	r1, r1, #1
 8009fce:	f1c1 0302 	rsb	r3, r1, #2
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	b182      	cbz	r2, 8009ff8 <__ieee754_pow+0xe8>
 8009fd6:	e05f      	b.n	800a098 <__ieee754_pow+0x188>
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d15b      	bne.n	800a094 <__ieee754_pow+0x184>
 8009fdc:	f1c3 0314 	rsb	r3, r3, #20
 8009fe0:	fa48 f103 	asr.w	r1, r8, r3
 8009fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe8:	4543      	cmp	r3, r8
 8009fea:	f040 8487 	bne.w	800a8fc <__ieee754_pow+0x9ec>
 8009fee:	f001 0101 	and.w	r1, r1, #1
 8009ff2:	f1c1 0302 	rsb	r3, r1, #2
 8009ff6:	9304      	str	r3, [sp, #16]
 8009ff8:	4b5c      	ldr	r3, [pc, #368]	; (800a16c <__ieee754_pow+0x25c>)
 8009ffa:	4598      	cmp	r8, r3
 8009ffc:	d132      	bne.n	800a064 <__ieee754_pow+0x154>
 8009ffe:	f1b9 0f00 	cmp.w	r9, #0
 800a002:	f280 8477 	bge.w	800a8f4 <__ieee754_pow+0x9e4>
 800a006:	4959      	ldr	r1, [pc, #356]	; (800a16c <__ieee754_pow+0x25c>)
 800a008:	4632      	mov	r2, r6
 800a00a:	463b      	mov	r3, r7
 800a00c:	2000      	movs	r0, #0
 800a00e:	f7f6 fc25 	bl	800085c <__aeabi_ddiv>
 800a012:	e79c      	b.n	8009f4e <__ieee754_pow+0x3e>
 800a014:	2300      	movs	r3, #0
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d13d      	bne.n	800a098 <__ieee754_pow+0x188>
 800a01c:	4b51      	ldr	r3, [pc, #324]	; (800a164 <__ieee754_pow+0x254>)
 800a01e:	4598      	cmp	r8, r3
 800a020:	d1ea      	bne.n	8009ff8 <__ieee754_pow+0xe8>
 800a022:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a026:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a02a:	ea53 030a 	orrs.w	r3, r3, sl
 800a02e:	f000 8459 	beq.w	800a8e4 <__ieee754_pow+0x9d4>
 800a032:	4b4f      	ldr	r3, [pc, #316]	; (800a170 <__ieee754_pow+0x260>)
 800a034:	429c      	cmp	r4, r3
 800a036:	dd08      	ble.n	800a04a <__ieee754_pow+0x13a>
 800a038:	f1b9 0f00 	cmp.w	r9, #0
 800a03c:	f2c0 8456 	blt.w	800a8ec <__ieee754_pow+0x9dc>
 800a040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a044:	e783      	b.n	8009f4e <__ieee754_pow+0x3e>
 800a046:	2302      	movs	r3, #2
 800a048:	e7e5      	b.n	800a016 <__ieee754_pow+0x106>
 800a04a:	f1b9 0f00 	cmp.w	r9, #0
 800a04e:	f04f 0000 	mov.w	r0, #0
 800a052:	f04f 0100 	mov.w	r1, #0
 800a056:	f6bf af7a 	bge.w	8009f4e <__ieee754_pow+0x3e>
 800a05a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a05e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a062:	e774      	b.n	8009f4e <__ieee754_pow+0x3e>
 800a064:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a068:	d106      	bne.n	800a078 <__ieee754_pow+0x168>
 800a06a:	4632      	mov	r2, r6
 800a06c:	463b      	mov	r3, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fac9 	bl	8000608 <__aeabi_dmul>
 800a076:	e76a      	b.n	8009f4e <__ieee754_pow+0x3e>
 800a078:	4b3e      	ldr	r3, [pc, #248]	; (800a174 <__ieee754_pow+0x264>)
 800a07a:	4599      	cmp	r9, r3
 800a07c:	d10c      	bne.n	800a098 <__ieee754_pow+0x188>
 800a07e:	2d00      	cmp	r5, #0
 800a080:	db0a      	blt.n	800a098 <__ieee754_pow+0x188>
 800a082:	ec47 6b10 	vmov	d0, r6, r7
 800a086:	b009      	add	sp, #36	; 0x24
 800a088:	ecbd 8b06 	vpop	{d8-d10}
 800a08c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	f000 bd20 	b.w	800aad4 <__ieee754_sqrt>
 800a094:	2300      	movs	r3, #0
 800a096:	9304      	str	r3, [sp, #16]
 800a098:	ec47 6b10 	vmov	d0, r6, r7
 800a09c:	f000 fc62 	bl	800a964 <fabs>
 800a0a0:	ec51 0b10 	vmov	r0, r1, d0
 800a0a4:	f1ba 0f00 	cmp.w	sl, #0
 800a0a8:	d129      	bne.n	800a0fe <__ieee754_pow+0x1ee>
 800a0aa:	b124      	cbz	r4, 800a0b6 <__ieee754_pow+0x1a6>
 800a0ac:	4b2f      	ldr	r3, [pc, #188]	; (800a16c <__ieee754_pow+0x25c>)
 800a0ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d123      	bne.n	800a0fe <__ieee754_pow+0x1ee>
 800a0b6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ba:	da05      	bge.n	800a0c8 <__ieee754_pow+0x1b8>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	492a      	ldr	r1, [pc, #168]	; (800a16c <__ieee754_pow+0x25c>)
 800a0c4:	f7f6 fbca 	bl	800085c <__aeabi_ddiv>
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	f6bf af40 	bge.w	8009f4e <__ieee754_pow+0x3e>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a0d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a0d8:	431c      	orrs	r4, r3
 800a0da:	d108      	bne.n	800a0ee <__ieee754_pow+0x1de>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f7f6 f8d8 	bl	8000298 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e78f      	b.n	800a00e <__ieee754_pow+0xfe>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	f47f af2c 	bne.w	8009f4e <__ieee754_pow+0x3e>
 800a0f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	e727      	b.n	8009f4e <__ieee754_pow+0x3e>
 800a0fe:	0feb      	lsrs	r3, r5, #31
 800a100:	3b01      	subs	r3, #1
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9a06      	ldr	r2, [sp, #24]
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	4313      	orrs	r3, r2
 800a10a:	d102      	bne.n	800a112 <__ieee754_pow+0x202>
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	e7e6      	b.n	800a0e0 <__ieee754_pow+0x1d0>
 800a112:	4b19      	ldr	r3, [pc, #100]	; (800a178 <__ieee754_pow+0x268>)
 800a114:	4598      	cmp	r8, r3
 800a116:	f340 80fb 	ble.w	800a310 <__ieee754_pow+0x400>
 800a11a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a11e:	4598      	cmp	r8, r3
 800a120:	4b13      	ldr	r3, [pc, #76]	; (800a170 <__ieee754_pow+0x260>)
 800a122:	dd0c      	ble.n	800a13e <__ieee754_pow+0x22e>
 800a124:	429c      	cmp	r4, r3
 800a126:	dc0f      	bgt.n	800a148 <__ieee754_pow+0x238>
 800a128:	f1b9 0f00 	cmp.w	r9, #0
 800a12c:	da0f      	bge.n	800a14e <__ieee754_pow+0x23e>
 800a12e:	2000      	movs	r0, #0
 800a130:	b009      	add	sp, #36	; 0x24
 800a132:	ecbd 8b06 	vpop	{d8-d10}
 800a136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13a:	f000 bcc2 	b.w	800aac2 <__math_oflow>
 800a13e:	429c      	cmp	r4, r3
 800a140:	dbf2      	blt.n	800a128 <__ieee754_pow+0x218>
 800a142:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <__ieee754_pow+0x25c>)
 800a144:	429c      	cmp	r4, r3
 800a146:	dd19      	ble.n	800a17c <__ieee754_pow+0x26c>
 800a148:	f1b9 0f00 	cmp.w	r9, #0
 800a14c:	dcef      	bgt.n	800a12e <__ieee754_pow+0x21e>
 800a14e:	2000      	movs	r0, #0
 800a150:	b009      	add	sp, #36	; 0x24
 800a152:	ecbd 8b06 	vpop	{d8-d10}
 800a156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	f000 bca9 	b.w	800aab0 <__math_uflow>
 800a15e:	bf00      	nop
 800a160:	fff00000 	.word	0xfff00000
 800a164:	7ff00000 	.word	0x7ff00000
 800a168:	433fffff 	.word	0x433fffff
 800a16c:	3ff00000 	.word	0x3ff00000
 800a170:	3fefffff 	.word	0x3fefffff
 800a174:	3fe00000 	.word	0x3fe00000
 800a178:	41e00000 	.word	0x41e00000
 800a17c:	4b60      	ldr	r3, [pc, #384]	; (800a300 <__ieee754_pow+0x3f0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	f7f6 f88a 	bl	8000298 <__aeabi_dsub>
 800a184:	a354      	add	r3, pc, #336	; (adr r3, 800a2d8 <__ieee754_pow+0x3c8>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	4604      	mov	r4, r0
 800a18c:	460d      	mov	r5, r1
 800a18e:	f7f6 fa3b 	bl	8000608 <__aeabi_dmul>
 800a192:	a353      	add	r3, pc, #332	; (adr r3, 800a2e0 <__ieee754_pow+0x3d0>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 fa32 	bl	8000608 <__aeabi_dmul>
 800a1a4:	4b57      	ldr	r3, [pc, #348]	; (800a304 <__ieee754_pow+0x3f4>)
 800a1a6:	4682      	mov	sl, r0
 800a1a8:	468b      	mov	fp, r1
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 fa2a 	bl	8000608 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	a14b      	add	r1, pc, #300	; (adr r1, 800a2e8 <__ieee754_pow+0x3d8>)
 800a1ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1be:	f7f6 f86b 	bl	8000298 <__aeabi_dsub>
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	f7f6 fa1f 	bl	8000608 <__aeabi_dmul>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	494d      	ldr	r1, [pc, #308]	; (800a308 <__ieee754_pow+0x3f8>)
 800a1d2:	f7f6 f861 	bl	8000298 <__aeabi_dsub>
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4680      	mov	r8, r0
 800a1da:	4689      	mov	r9, r1
 800a1dc:	462b      	mov	r3, r5
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 fa11 	bl	8000608 <__aeabi_dmul>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f6 fa0b 	bl	8000608 <__aeabi_dmul>
 800a1f2:	a33f      	add	r3, pc, #252	; (adr r3, 800a2f0 <__ieee754_pow+0x3e0>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f7f6 fa06 	bl	8000608 <__aeabi_dmul>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4650      	mov	r0, sl
 800a202:	4659      	mov	r1, fp
 800a204:	f7f6 f848 	bl	8000298 <__aeabi_dsub>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4680      	mov	r8, r0
 800a20e:	4689      	mov	r9, r1
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 f842 	bl	800029c <__adddf3>
 800a218:	2000      	movs	r0, #0
 800a21a:	4632      	mov	r2, r6
 800a21c:	463b      	mov	r3, r7
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	f7f6 f839 	bl	8000298 <__aeabi_dsub>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	f7f6 f833 	bl	8000298 <__aeabi_dsub>
 800a232:	9b04      	ldr	r3, [sp, #16]
 800a234:	9a06      	ldr	r2, [sp, #24]
 800a236:	3b01      	subs	r3, #1
 800a238:	4313      	orrs	r3, r2
 800a23a:	4682      	mov	sl, r0
 800a23c:	468b      	mov	fp, r1
 800a23e:	f040 81e7 	bne.w	800a610 <__ieee754_pow+0x700>
 800a242:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a2f8 <__ieee754_pow+0x3e8>
 800a246:	eeb0 8a47 	vmov.f32	s16, s14
 800a24a:	eef0 8a67 	vmov.f32	s17, s15
 800a24e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a252:	2600      	movs	r6, #0
 800a254:	4632      	mov	r2, r6
 800a256:	463b      	mov	r3, r7
 800a258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a25c:	f7f6 f81c 	bl	8000298 <__aeabi_dsub>
 800a260:	4622      	mov	r2, r4
 800a262:	462b      	mov	r3, r5
 800a264:	f7f6 f9d0 	bl	8000608 <__aeabi_dmul>
 800a268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a26c:	4680      	mov	r8, r0
 800a26e:	4689      	mov	r9, r1
 800a270:	4650      	mov	r0, sl
 800a272:	4659      	mov	r1, fp
 800a274:	f7f6 f9c8 	bl	8000608 <__aeabi_dmul>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f6 f80c 	bl	800029c <__adddf3>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	4680      	mov	r8, r0
 800a28a:	4689      	mov	r9, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f9ba 	bl	8000608 <__aeabi_dmul>
 800a294:	460b      	mov	r3, r1
 800a296:	4604      	mov	r4, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	4602      	mov	r2, r0
 800a29c:	4649      	mov	r1, r9
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7f5 fffc 	bl	800029c <__adddf3>
 800a2a4:	4b19      	ldr	r3, [pc, #100]	; (800a30c <__ieee754_pow+0x3fc>)
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	ec45 4b19 	vmov	d9, r4, r5
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	468b      	mov	fp, r1
 800a2b2:	f340 82f0 	ble.w	800a896 <__ieee754_pow+0x986>
 800a2b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a2ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a2be:	4303      	orrs	r3, r0
 800a2c0:	f000 81e4 	beq.w	800a68c <__ieee754_pow+0x77c>
 800a2c4:	ec51 0b18 	vmov	r0, r1, d8
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f7f6 fc0e 	bl	8000aec <__aeabi_dcmplt>
 800a2d0:	3800      	subs	r0, #0
 800a2d2:	bf18      	it	ne
 800a2d4:	2001      	movne	r0, #1
 800a2d6:	e72b      	b.n	800a130 <__ieee754_pow+0x220>
 800a2d8:	60000000 	.word	0x60000000
 800a2dc:	3ff71547 	.word	0x3ff71547
 800a2e0:	f85ddf44 	.word	0xf85ddf44
 800a2e4:	3e54ae0b 	.word	0x3e54ae0b
 800a2e8:	55555555 	.word	0x55555555
 800a2ec:	3fd55555 	.word	0x3fd55555
 800a2f0:	652b82fe 	.word	0x652b82fe
 800a2f4:	3ff71547 	.word	0x3ff71547
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	bff00000 	.word	0xbff00000
 800a300:	3ff00000 	.word	0x3ff00000
 800a304:	3fd00000 	.word	0x3fd00000
 800a308:	3fe00000 	.word	0x3fe00000
 800a30c:	408fffff 	.word	0x408fffff
 800a310:	4bd5      	ldr	r3, [pc, #852]	; (800a668 <__ieee754_pow+0x758>)
 800a312:	402b      	ands	r3, r5
 800a314:	2200      	movs	r2, #0
 800a316:	b92b      	cbnz	r3, 800a324 <__ieee754_pow+0x414>
 800a318:	4bd4      	ldr	r3, [pc, #848]	; (800a66c <__ieee754_pow+0x75c>)
 800a31a:	f7f6 f975 	bl	8000608 <__aeabi_dmul>
 800a31e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a322:	460c      	mov	r4, r1
 800a324:	1523      	asrs	r3, r4, #20
 800a326:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a32a:	4413      	add	r3, r2
 800a32c:	9305      	str	r3, [sp, #20]
 800a32e:	4bd0      	ldr	r3, [pc, #832]	; (800a670 <__ieee754_pow+0x760>)
 800a330:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a334:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a338:	429c      	cmp	r4, r3
 800a33a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a33e:	dd08      	ble.n	800a352 <__ieee754_pow+0x442>
 800a340:	4bcc      	ldr	r3, [pc, #816]	; (800a674 <__ieee754_pow+0x764>)
 800a342:	429c      	cmp	r4, r3
 800a344:	f340 8162 	ble.w	800a60c <__ieee754_pow+0x6fc>
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	3301      	adds	r3, #1
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a352:	2400      	movs	r4, #0
 800a354:	00e3      	lsls	r3, r4, #3
 800a356:	9307      	str	r3, [sp, #28]
 800a358:	4bc7      	ldr	r3, [pc, #796]	; (800a678 <__ieee754_pow+0x768>)
 800a35a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a35e:	ed93 7b00 	vldr	d7, [r3]
 800a362:	4629      	mov	r1, r5
 800a364:	ec53 2b17 	vmov	r2, r3, d7
 800a368:	eeb0 9a47 	vmov.f32	s18, s14
 800a36c:	eef0 9a67 	vmov.f32	s19, s15
 800a370:	4682      	mov	sl, r0
 800a372:	f7f5 ff91 	bl	8000298 <__aeabi_dsub>
 800a376:	4652      	mov	r2, sl
 800a378:	4606      	mov	r6, r0
 800a37a:	460f      	mov	r7, r1
 800a37c:	462b      	mov	r3, r5
 800a37e:	ec51 0b19 	vmov	r0, r1, d9
 800a382:	f7f5 ff8b 	bl	800029c <__adddf3>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	2000      	movs	r0, #0
 800a38c:	49bb      	ldr	r1, [pc, #748]	; (800a67c <__ieee754_pow+0x76c>)
 800a38e:	f7f6 fa65 	bl	800085c <__aeabi_ddiv>
 800a392:	ec41 0b1a 	vmov	d10, r0, r1
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4630      	mov	r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3ae:	46ab      	mov	fp, r5
 800a3b0:	106d      	asrs	r5, r5, #1
 800a3b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a3b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a3ba:	ec41 0b18 	vmov	d8, r0, r1
 800a3be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	461d      	mov	r5, r3
 800a3cc:	f7f6 f91c 	bl	8000608 <__aeabi_dmul>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f5 ff5e 	bl	8000298 <__aeabi_dsub>
 800a3dc:	ec53 2b19 	vmov	r2, r3, d9
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 ff56 	bl	8000298 <__aeabi_dsub>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	4659      	mov	r1, fp
 800a3f4:	f7f5 ff50 	bl	8000298 <__aeabi_dsub>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	f7f6 f904 	bl	8000608 <__aeabi_dmul>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4630      	mov	r0, r6
 800a406:	4639      	mov	r1, r7
 800a408:	f7f5 ff46 	bl	8000298 <__aeabi_dsub>
 800a40c:	ec53 2b1a 	vmov	r2, r3, d10
 800a410:	f7f6 f8fa 	bl	8000608 <__aeabi_dmul>
 800a414:	ec53 2b18 	vmov	r2, r3, d8
 800a418:	ec41 0b19 	vmov	d9, r0, r1
 800a41c:	ec51 0b18 	vmov	r0, r1, d8
 800a420:	f7f6 f8f2 	bl	8000608 <__aeabi_dmul>
 800a424:	a37c      	add	r3, pc, #496	; (adr r3, 800a618 <__ieee754_pow+0x708>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	4604      	mov	r4, r0
 800a42c:	460d      	mov	r5, r1
 800a42e:	f7f6 f8eb 	bl	8000608 <__aeabi_dmul>
 800a432:	a37b      	add	r3, pc, #492	; (adr r3, 800a620 <__ieee754_pow+0x710>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f5 ff30 	bl	800029c <__adddf3>
 800a43c:	4622      	mov	r2, r4
 800a43e:	462b      	mov	r3, r5
 800a440:	f7f6 f8e2 	bl	8000608 <__aeabi_dmul>
 800a444:	a378      	add	r3, pc, #480	; (adr r3, 800a628 <__ieee754_pow+0x718>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 ff27 	bl	800029c <__adddf3>
 800a44e:	4622      	mov	r2, r4
 800a450:	462b      	mov	r3, r5
 800a452:	f7f6 f8d9 	bl	8000608 <__aeabi_dmul>
 800a456:	a376      	add	r3, pc, #472	; (adr r3, 800a630 <__ieee754_pow+0x720>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f7f5 ff1e 	bl	800029c <__adddf3>
 800a460:	4622      	mov	r2, r4
 800a462:	462b      	mov	r3, r5
 800a464:	f7f6 f8d0 	bl	8000608 <__aeabi_dmul>
 800a468:	a373      	add	r3, pc, #460	; (adr r3, 800a638 <__ieee754_pow+0x728>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f7f5 ff15 	bl	800029c <__adddf3>
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	f7f6 f8c7 	bl	8000608 <__aeabi_dmul>
 800a47a:	a371      	add	r3, pc, #452	; (adr r3, 800a640 <__ieee754_pow+0x730>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f5 ff0c 	bl	800029c <__adddf3>
 800a484:	4622      	mov	r2, r4
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	462b      	mov	r3, r5
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f6 f8ba 	bl	8000608 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 f8b4 	bl	8000608 <__aeabi_dmul>
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ac:	f7f5 fef6 	bl	800029c <__adddf3>
 800a4b0:	ec53 2b19 	vmov	r2, r3, d9
 800a4b4:	f7f6 f8a8 	bl	8000608 <__aeabi_dmul>
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	f7f5 feee 	bl	800029c <__adddf3>
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	468b      	mov	fp, r1
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	4b6b      	ldr	r3, [pc, #428]	; (800a680 <__ieee754_pow+0x770>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	f7f5 fee0 	bl	800029c <__adddf3>
 800a4dc:	4652      	mov	r2, sl
 800a4de:	465b      	mov	r3, fp
 800a4e0:	f7f5 fedc 	bl	800029c <__adddf3>
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	f7f6 f889 	bl	8000608 <__aeabi_dmul>
 800a4f6:	4b62      	ldr	r3, [pc, #392]	; (800a680 <__ieee754_pow+0x770>)
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	4689      	mov	r9, r1
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f5 fec9 	bl	8000298 <__aeabi_dsub>
 800a506:	4632      	mov	r2, r6
 800a508:	463b      	mov	r3, r7
 800a50a:	f7f5 fec5 	bl	8000298 <__aeabi_dsub>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4650      	mov	r0, sl
 800a514:	4659      	mov	r1, fp
 800a516:	f7f5 febf 	bl	8000298 <__aeabi_dsub>
 800a51a:	ec53 2b18 	vmov	r2, r3, d8
 800a51e:	f7f6 f873 	bl	8000608 <__aeabi_dmul>
 800a522:	4622      	mov	r2, r4
 800a524:	4606      	mov	r6, r0
 800a526:	460f      	mov	r7, r1
 800a528:	462b      	mov	r3, r5
 800a52a:	ec51 0b19 	vmov	r0, r1, d9
 800a52e:	f7f6 f86b 	bl	8000608 <__aeabi_dmul>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4630      	mov	r0, r6
 800a538:	4639      	mov	r1, r7
 800a53a:	f7f5 feaf 	bl	800029c <__adddf3>
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	f7f5 fea7 	bl	800029c <__adddf3>
 800a54e:	a33e      	add	r3, pc, #248	; (adr r3, 800a648 <__ieee754_pow+0x738>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	2000      	movs	r0, #0
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	f7f6 f855 	bl	8000608 <__aeabi_dmul>
 800a55e:	4642      	mov	r2, r8
 800a560:	ec41 0b18 	vmov	d8, r0, r1
 800a564:	464b      	mov	r3, r9
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe95 	bl	8000298 <__aeabi_dsub>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	f7f5 fe8f 	bl	8000298 <__aeabi_dsub>
 800a57a:	a335      	add	r3, pc, #212	; (adr r3, 800a650 <__ieee754_pow+0x740>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f6 f842 	bl	8000608 <__aeabi_dmul>
 800a584:	a334      	add	r3, pc, #208	; (adr r3, 800a658 <__ieee754_pow+0x748>)
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	4606      	mov	r6, r0
 800a58c:	460f      	mov	r7, r1
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f6 f839 	bl	8000608 <__aeabi_dmul>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	f7f5 fe7d 	bl	800029c <__adddf3>
 800a5a2:	9a07      	ldr	r2, [sp, #28]
 800a5a4:	4b37      	ldr	r3, [pc, #220]	; (800a684 <__ieee754_pow+0x774>)
 800a5a6:	4413      	add	r3, r2
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fe76 	bl	800029c <__adddf3>
 800a5b0:	4682      	mov	sl, r0
 800a5b2:	9805      	ldr	r0, [sp, #20]
 800a5b4:	468b      	mov	fp, r1
 800a5b6:	f7f5 ffbd 	bl	8000534 <__aeabi_i2d>
 800a5ba:	9a07      	ldr	r2, [sp, #28]
 800a5bc:	4b32      	ldr	r3, [pc, #200]	; (800a688 <__ieee754_pow+0x778>)
 800a5be:	4413      	add	r3, r2
 800a5c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	4652      	mov	r2, sl
 800a5ca:	465b      	mov	r3, fp
 800a5cc:	ec51 0b18 	vmov	r0, r1, d8
 800a5d0:	f7f5 fe64 	bl	800029c <__adddf3>
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	f7f5 fe60 	bl	800029c <__adddf3>
 800a5dc:	4632      	mov	r2, r6
 800a5de:	463b      	mov	r3, r7
 800a5e0:	f7f5 fe5c 	bl	800029c <__adddf3>
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	4632      	mov	r2, r6
 800a5e8:	463b      	mov	r3, r7
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	f7f5 fe53 	bl	8000298 <__aeabi_dsub>
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	f7f5 fe4f 	bl	8000298 <__aeabi_dsub>
 800a5fa:	ec53 2b18 	vmov	r2, r3, d8
 800a5fe:	f7f5 fe4b 	bl	8000298 <__aeabi_dsub>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	e610      	b.n	800a22e <__ieee754_pow+0x31e>
 800a60c:	2401      	movs	r4, #1
 800a60e:	e6a1      	b.n	800a354 <__ieee754_pow+0x444>
 800a610:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a660 <__ieee754_pow+0x750>
 800a614:	e617      	b.n	800a246 <__ieee754_pow+0x336>
 800a616:	bf00      	nop
 800a618:	4a454eef 	.word	0x4a454eef
 800a61c:	3fca7e28 	.word	0x3fca7e28
 800a620:	93c9db65 	.word	0x93c9db65
 800a624:	3fcd864a 	.word	0x3fcd864a
 800a628:	a91d4101 	.word	0xa91d4101
 800a62c:	3fd17460 	.word	0x3fd17460
 800a630:	518f264d 	.word	0x518f264d
 800a634:	3fd55555 	.word	0x3fd55555
 800a638:	db6fabff 	.word	0xdb6fabff
 800a63c:	3fdb6db6 	.word	0x3fdb6db6
 800a640:	33333303 	.word	0x33333303
 800a644:	3fe33333 	.word	0x3fe33333
 800a648:	e0000000 	.word	0xe0000000
 800a64c:	3feec709 	.word	0x3feec709
 800a650:	dc3a03fd 	.word	0xdc3a03fd
 800a654:	3feec709 	.word	0x3feec709
 800a658:	145b01f5 	.word	0x145b01f5
 800a65c:	be3e2fe0 	.word	0xbe3e2fe0
 800a660:	00000000 	.word	0x00000000
 800a664:	3ff00000 	.word	0x3ff00000
 800a668:	7ff00000 	.word	0x7ff00000
 800a66c:	43400000 	.word	0x43400000
 800a670:	0003988e 	.word	0x0003988e
 800a674:	000bb679 	.word	0x000bb679
 800a678:	0800b840 	.word	0x0800b840
 800a67c:	3ff00000 	.word	0x3ff00000
 800a680:	40080000 	.word	0x40080000
 800a684:	0800b860 	.word	0x0800b860
 800a688:	0800b850 	.word	0x0800b850
 800a68c:	a3b3      	add	r3, pc, #716	; (adr r3, 800a95c <__ieee754_pow+0xa4c>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	f7f5 fe01 	bl	800029c <__adddf3>
 800a69a:	4622      	mov	r2, r4
 800a69c:	ec41 0b1a 	vmov	d10, r0, r1
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	ec51 0b1a 	vmov	r0, r1, d10
 800a6b2:	f7f6 fa39 	bl	8000b28 <__aeabi_dcmpgt>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f47f ae04 	bne.w	800a2c4 <__ieee754_pow+0x3b4>
 800a6bc:	4aa2      	ldr	r2, [pc, #648]	; (800a948 <__ieee754_pow+0xa38>)
 800a6be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	f340 8107 	ble.w	800a8d6 <__ieee754_pow+0x9c6>
 800a6c8:	151b      	asrs	r3, r3, #20
 800a6ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a6ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a6d2:	fa4a fa03 	asr.w	sl, sl, r3
 800a6d6:	44da      	add	sl, fp
 800a6d8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a6dc:	489b      	ldr	r0, [pc, #620]	; (800a94c <__ieee754_pow+0xa3c>)
 800a6de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a6e2:	4108      	asrs	r0, r1
 800a6e4:	ea00 030a 	and.w	r3, r0, sl
 800a6e8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a6ec:	f1c1 0114 	rsb	r1, r1, #20
 800a6f0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a6f4:	fa4a fa01 	asr.w	sl, sl, r1
 800a6f8:	f1bb 0f00 	cmp.w	fp, #0
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	bfb8      	it	lt
 800a706:	f1ca 0a00 	rsblt	sl, sl, #0
 800a70a:	f7f5 fdc5 	bl	8000298 <__aeabi_dsub>
 800a70e:	ec41 0b19 	vmov	d9, r0, r1
 800a712:	4642      	mov	r2, r8
 800a714:	464b      	mov	r3, r9
 800a716:	ec51 0b19 	vmov	r0, r1, d9
 800a71a:	f7f5 fdbf 	bl	800029c <__adddf3>
 800a71e:	a37a      	add	r3, pc, #488	; (adr r3, 800a908 <__ieee754_pow+0x9f8>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	2000      	movs	r0, #0
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
 800a72a:	f7f5 ff6d 	bl	8000608 <__aeabi_dmul>
 800a72e:	ec53 2b19 	vmov	r2, r3, d9
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f5 fdad 	bl	8000298 <__aeabi_dsub>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 fda7 	bl	8000298 <__aeabi_dsub>
 800a74a:	a371      	add	r3, pc, #452	; (adr r3, 800a910 <__ieee754_pow+0xa00>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 ff5a 	bl	8000608 <__aeabi_dmul>
 800a754:	a370      	add	r3, pc, #448	; (adr r3, 800a918 <__ieee754_pow+0xa08>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	4680      	mov	r8, r0
 800a75c:	4689      	mov	r9, r1
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f5 ff51 	bl	8000608 <__aeabi_dmul>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	4640      	mov	r0, r8
 800a76c:	4649      	mov	r1, r9
 800a76e:	f7f5 fd95 	bl	800029c <__adddf3>
 800a772:	4604      	mov	r4, r0
 800a774:	460d      	mov	r5, r1
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 fd8d 	bl	800029c <__adddf3>
 800a782:	4632      	mov	r2, r6
 800a784:	463b      	mov	r3, r7
 800a786:	4680      	mov	r8, r0
 800a788:	4689      	mov	r9, r1
 800a78a:	f7f5 fd85 	bl	8000298 <__aeabi_dsub>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 fd7f 	bl	8000298 <__aeabi_dsub>
 800a79a:	4642      	mov	r2, r8
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f5 ff2f 	bl	8000608 <__aeabi_dmul>
 800a7aa:	a35d      	add	r3, pc, #372	; (adr r3, 800a920 <__ieee754_pow+0xa10>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	f7f5 ff28 	bl	8000608 <__aeabi_dmul>
 800a7b8:	a35b      	add	r3, pc, #364	; (adr r3, 800a928 <__ieee754_pow+0xa18>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 fd6b 	bl	8000298 <__aeabi_dsub>
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	f7f5 ff1f 	bl	8000608 <__aeabi_dmul>
 800a7ca:	a359      	add	r3, pc, #356	; (adr r3, 800a930 <__ieee754_pow+0xa20>)
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	f7f5 fd64 	bl	800029c <__adddf3>
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	a356      	add	r3, pc, #344	; (adr r3, 800a938 <__ieee754_pow+0xa28>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fd59 	bl	8000298 <__aeabi_dsub>
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	462b      	mov	r3, r5
 800a7ea:	f7f5 ff0d 	bl	8000608 <__aeabi_dmul>
 800a7ee:	a354      	add	r3, pc, #336	; (adr r3, 800a940 <__ieee754_pow+0xa30>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 fd52 	bl	800029c <__adddf3>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	f7f5 ff04 	bl	8000608 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4640      	mov	r0, r8
 800a806:	4649      	mov	r1, r9
 800a808:	f7f5 fd46 	bl	8000298 <__aeabi_dsub>
 800a80c:	4604      	mov	r4, r0
 800a80e:	460d      	mov	r5, r1
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4640      	mov	r0, r8
 800a816:	4649      	mov	r1, r9
 800a818:	f7f5 fef6 	bl	8000608 <__aeabi_dmul>
 800a81c:	2200      	movs	r2, #0
 800a81e:	ec41 0b19 	vmov	d9, r0, r1
 800a822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f5 fd35 	bl	8000298 <__aeabi_dsub>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	ec51 0b19 	vmov	r0, r1, d9
 800a836:	f7f6 f811 	bl	800085c <__aeabi_ddiv>
 800a83a:	4632      	mov	r2, r6
 800a83c:	4604      	mov	r4, r0
 800a83e:	460d      	mov	r5, r1
 800a840:	463b      	mov	r3, r7
 800a842:	4640      	mov	r0, r8
 800a844:	4649      	mov	r1, r9
 800a846:	f7f5 fedf 	bl	8000608 <__aeabi_dmul>
 800a84a:	4632      	mov	r2, r6
 800a84c:	463b      	mov	r3, r7
 800a84e:	f7f5 fd25 	bl	800029c <__adddf3>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f5 fd1d 	bl	8000298 <__aeabi_dsub>
 800a85e:	4642      	mov	r2, r8
 800a860:	464b      	mov	r3, r9
 800a862:	f7f5 fd19 	bl	8000298 <__aeabi_dsub>
 800a866:	460b      	mov	r3, r1
 800a868:	4602      	mov	r2, r0
 800a86a:	4939      	ldr	r1, [pc, #228]	; (800a950 <__ieee754_pow+0xa40>)
 800a86c:	2000      	movs	r0, #0
 800a86e:	f7f5 fd13 	bl	8000298 <__aeabi_dsub>
 800a872:	ec41 0b10 	vmov	d0, r0, r1
 800a876:	ee10 3a90 	vmov	r3, s1
 800a87a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a882:	da2b      	bge.n	800a8dc <__ieee754_pow+0x9cc>
 800a884:	4650      	mov	r0, sl
 800a886:	f000 f877 	bl	800a978 <scalbn>
 800a88a:	ec51 0b10 	vmov	r0, r1, d0
 800a88e:	ec53 2b18 	vmov	r2, r3, d8
 800a892:	f7ff bbee 	b.w	800a072 <__ieee754_pow+0x162>
 800a896:	4b2f      	ldr	r3, [pc, #188]	; (800a954 <__ieee754_pow+0xa44>)
 800a898:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a89c:	429e      	cmp	r6, r3
 800a89e:	f77f af0d 	ble.w	800a6bc <__ieee754_pow+0x7ac>
 800a8a2:	4b2d      	ldr	r3, [pc, #180]	; (800a958 <__ieee754_pow+0xa48>)
 800a8a4:	440b      	add	r3, r1
 800a8a6:	4303      	orrs	r3, r0
 800a8a8:	d009      	beq.n	800a8be <__ieee754_pow+0x9ae>
 800a8aa:	ec51 0b18 	vmov	r0, r1, d8
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f7f6 f91b 	bl	8000aec <__aeabi_dcmplt>
 800a8b6:	3800      	subs	r0, #0
 800a8b8:	bf18      	it	ne
 800a8ba:	2001      	movne	r0, #1
 800a8bc:	e448      	b.n	800a150 <__ieee754_pow+0x240>
 800a8be:	4622      	mov	r2, r4
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	f7f5 fce9 	bl	8000298 <__aeabi_dsub>
 800a8c6:	4642      	mov	r2, r8
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	f7f6 f923 	bl	8000b14 <__aeabi_dcmpge>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f43f aef4 	beq.w	800a6bc <__ieee754_pow+0x7ac>
 800a8d4:	e7e9      	b.n	800a8aa <__ieee754_pow+0x99a>
 800a8d6:	f04f 0a00 	mov.w	sl, #0
 800a8da:	e71a      	b.n	800a712 <__ieee754_pow+0x802>
 800a8dc:	ec51 0b10 	vmov	r0, r1, d0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	e7d4      	b.n	800a88e <__ieee754_pow+0x97e>
 800a8e4:	491a      	ldr	r1, [pc, #104]	; (800a950 <__ieee754_pow+0xa40>)
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f7ff bb31 	b.w	8009f4e <__ieee754_pow+0x3e>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	f7ff bb2d 	b.w	8009f4e <__ieee754_pow+0x3e>
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7ff bb29 	b.w	8009f4e <__ieee754_pow+0x3e>
 800a8fc:	9204      	str	r2, [sp, #16]
 800a8fe:	f7ff bb7b 	b.w	8009ff8 <__ieee754_pow+0xe8>
 800a902:	2300      	movs	r3, #0
 800a904:	f7ff bb65 	b.w	8009fd2 <__ieee754_pow+0xc2>
 800a908:	00000000 	.word	0x00000000
 800a90c:	3fe62e43 	.word	0x3fe62e43
 800a910:	fefa39ef 	.word	0xfefa39ef
 800a914:	3fe62e42 	.word	0x3fe62e42
 800a918:	0ca86c39 	.word	0x0ca86c39
 800a91c:	be205c61 	.word	0xbe205c61
 800a920:	72bea4d0 	.word	0x72bea4d0
 800a924:	3e663769 	.word	0x3e663769
 800a928:	c5d26bf1 	.word	0xc5d26bf1
 800a92c:	3ebbbd41 	.word	0x3ebbbd41
 800a930:	af25de2c 	.word	0xaf25de2c
 800a934:	3f11566a 	.word	0x3f11566a
 800a938:	16bebd93 	.word	0x16bebd93
 800a93c:	3f66c16c 	.word	0x3f66c16c
 800a940:	5555553e 	.word	0x5555553e
 800a944:	3fc55555 	.word	0x3fc55555
 800a948:	3fe00000 	.word	0x3fe00000
 800a94c:	fff00000 	.word	0xfff00000
 800a950:	3ff00000 	.word	0x3ff00000
 800a954:	4090cbff 	.word	0x4090cbff
 800a958:	3f6f3400 	.word	0x3f6f3400
 800a95c:	652b82fe 	.word	0x652b82fe
 800a960:	3c971547 	.word	0x3c971547

0800a964 <fabs>:
 800a964:	ec51 0b10 	vmov	r0, r1, d0
 800a968:	ee10 2a10 	vmov	r2, s0
 800a96c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a970:	ec43 2b10 	vmov	d0, r2, r3
 800a974:	4770      	bx	lr
	...

0800a978 <scalbn>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	ec55 4b10 	vmov	r4, r5, d0
 800a97e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a982:	4606      	mov	r6, r0
 800a984:	462b      	mov	r3, r5
 800a986:	b999      	cbnz	r1, 800a9b0 <scalbn+0x38>
 800a988:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a98c:	4323      	orrs	r3, r4
 800a98e:	d03f      	beq.n	800aa10 <scalbn+0x98>
 800a990:	4b35      	ldr	r3, [pc, #212]	; (800aa68 <scalbn+0xf0>)
 800a992:	4629      	mov	r1, r5
 800a994:	ee10 0a10 	vmov	r0, s0
 800a998:	2200      	movs	r2, #0
 800a99a:	f7f5 fe35 	bl	8000608 <__aeabi_dmul>
 800a99e:	4b33      	ldr	r3, [pc, #204]	; (800aa6c <scalbn+0xf4>)
 800a9a0:	429e      	cmp	r6, r3
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	da10      	bge.n	800a9ca <scalbn+0x52>
 800a9a8:	a327      	add	r3, pc, #156	; (adr r3, 800aa48 <scalbn+0xd0>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	e01f      	b.n	800a9f0 <scalbn+0x78>
 800a9b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a9b4:	4291      	cmp	r1, r2
 800a9b6:	d10c      	bne.n	800a9d2 <scalbn+0x5a>
 800a9b8:	ee10 2a10 	vmov	r2, s0
 800a9bc:	4620      	mov	r0, r4
 800a9be:	4629      	mov	r1, r5
 800a9c0:	f7f5 fc6c 	bl	800029c <__adddf3>
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	e022      	b.n	800aa10 <scalbn+0x98>
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a9d0:	3936      	subs	r1, #54	; 0x36
 800a9d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a9d6:	4296      	cmp	r6, r2
 800a9d8:	dd0d      	ble.n	800a9f6 <scalbn+0x7e>
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	a11c      	add	r1, pc, #112	; (adr r1, 800aa50 <scalbn+0xd8>)
 800a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e2:	da02      	bge.n	800a9ea <scalbn+0x72>
 800a9e4:	a11c      	add	r1, pc, #112	; (adr r1, 800aa58 <scalbn+0xe0>)
 800a9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ea:	a319      	add	r3, pc, #100	; (adr r3, 800aa50 <scalbn+0xd8>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fe0a 	bl	8000608 <__aeabi_dmul>
 800a9f4:	e7e6      	b.n	800a9c4 <scalbn+0x4c>
 800a9f6:	1872      	adds	r2, r6, r1
 800a9f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a9fc:	428a      	cmp	r2, r1
 800a9fe:	dcec      	bgt.n	800a9da <scalbn+0x62>
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	dd08      	ble.n	800aa16 <scalbn+0x9e>
 800aa04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa10:	ec45 4b10 	vmov	d0, r4, r5
 800aa14:	bd70      	pop	{r4, r5, r6, pc}
 800aa16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa1a:	da08      	bge.n	800aa2e <scalbn+0xb6>
 800aa1c:	2d00      	cmp	r5, #0
 800aa1e:	a10a      	add	r1, pc, #40	; (adr r1, 800aa48 <scalbn+0xd0>)
 800aa20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa24:	dac0      	bge.n	800a9a8 <scalbn+0x30>
 800aa26:	a10e      	add	r1, pc, #56	; (adr r1, 800aa60 <scalbn+0xe8>)
 800aa28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa2c:	e7bc      	b.n	800a9a8 <scalbn+0x30>
 800aa2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa32:	3236      	adds	r2, #54	; 0x36
 800aa34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <scalbn+0xf8>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	e7d5      	b.n	800a9f0 <scalbn+0x78>
 800aa44:	f3af 8000 	nop.w
 800aa48:	c2f8f359 	.word	0xc2f8f359
 800aa4c:	01a56e1f 	.word	0x01a56e1f
 800aa50:	8800759c 	.word	0x8800759c
 800aa54:	7e37e43c 	.word	0x7e37e43c
 800aa58:	8800759c 	.word	0x8800759c
 800aa5c:	fe37e43c 	.word	0xfe37e43c
 800aa60:	c2f8f359 	.word	0xc2f8f359
 800aa64:	81a56e1f 	.word	0x81a56e1f
 800aa68:	43500000 	.word	0x43500000
 800aa6c:	ffff3cb0 	.word	0xffff3cb0
 800aa70:	3c900000 	.word	0x3c900000

0800aa74 <with_errno>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	4604      	mov	r4, r0
 800aa78:	460d      	mov	r5, r1
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	f7fd f922 	bl	8007cc4 <__errno>
 800aa80:	4629      	mov	r1, r5
 800aa82:	6006      	str	r6, [r0, #0]
 800aa84:	4620      	mov	r0, r4
 800aa86:	bd70      	pop	{r4, r5, r6, pc}

0800aa88 <xflow>:
 800aa88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa8a:	4614      	mov	r4, r2
 800aa8c:	461d      	mov	r5, r3
 800aa8e:	b108      	cbz	r0, 800aa94 <xflow+0xc>
 800aa90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa94:	e9cd 2300 	strd	r2, r3, [sp]
 800aa98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f5 fdb2 	bl	8000608 <__aeabi_dmul>
 800aaa4:	2222      	movs	r2, #34	; 0x22
 800aaa6:	b003      	add	sp, #12
 800aaa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaac:	f7ff bfe2 	b.w	800aa74 <with_errno>

0800aab0 <__math_uflow>:
 800aab0:	b508      	push	{r3, lr}
 800aab2:	2200      	movs	r2, #0
 800aab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aab8:	f7ff ffe6 	bl	800aa88 <xflow>
 800aabc:	ec41 0b10 	vmov	d0, r0, r1
 800aac0:	bd08      	pop	{r3, pc}

0800aac2 <__math_oflow>:
 800aac2:	b508      	push	{r3, lr}
 800aac4:	2200      	movs	r2, #0
 800aac6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800aaca:	f7ff ffdd 	bl	800aa88 <xflow>
 800aace:	ec41 0b10 	vmov	d0, r0, r1
 800aad2:	bd08      	pop	{r3, pc}

0800aad4 <__ieee754_sqrt>:
 800aad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	ec55 4b10 	vmov	r4, r5, d0
 800aadc:	4e67      	ldr	r6, [pc, #412]	; (800ac7c <__ieee754_sqrt+0x1a8>)
 800aade:	43ae      	bics	r6, r5
 800aae0:	ee10 0a10 	vmov	r0, s0
 800aae4:	ee10 2a10 	vmov	r2, s0
 800aae8:	4629      	mov	r1, r5
 800aaea:	462b      	mov	r3, r5
 800aaec:	d10d      	bne.n	800ab0a <__ieee754_sqrt+0x36>
 800aaee:	f7f5 fd8b 	bl	8000608 <__aeabi_dmul>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f5 fbcf 	bl	800029c <__adddf3>
 800aafe:	4604      	mov	r4, r0
 800ab00:	460d      	mov	r5, r1
 800ab02:	ec45 4b10 	vmov	d0, r4, r5
 800ab06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	2d00      	cmp	r5, #0
 800ab0c:	dc0b      	bgt.n	800ab26 <__ieee754_sqrt+0x52>
 800ab0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab12:	4326      	orrs	r6, r4
 800ab14:	d0f5      	beq.n	800ab02 <__ieee754_sqrt+0x2e>
 800ab16:	b135      	cbz	r5, 800ab26 <__ieee754_sqrt+0x52>
 800ab18:	f7f5 fbbe 	bl	8000298 <__aeabi_dsub>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	f7f5 fe9c 	bl	800085c <__aeabi_ddiv>
 800ab24:	e7eb      	b.n	800aafe <__ieee754_sqrt+0x2a>
 800ab26:	1509      	asrs	r1, r1, #20
 800ab28:	f000 808d 	beq.w	800ac46 <__ieee754_sqrt+0x172>
 800ab2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab30:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ab34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab38:	07c9      	lsls	r1, r1, #31
 800ab3a:	bf5c      	itt	pl
 800ab3c:	005b      	lslpl	r3, r3, #1
 800ab3e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ab42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab46:	bf58      	it	pl
 800ab48:	0052      	lslpl	r2, r2, #1
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab50:	1076      	asrs	r6, r6, #1
 800ab52:	0052      	lsls	r2, r2, #1
 800ab54:	f04f 0e16 	mov.w	lr, #22
 800ab58:	46ac      	mov	ip, r5
 800ab5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab5e:	eb0c 0001 	add.w	r0, ip, r1
 800ab62:	4298      	cmp	r0, r3
 800ab64:	bfde      	ittt	le
 800ab66:	1a1b      	suble	r3, r3, r0
 800ab68:	eb00 0c01 	addle.w	ip, r0, r1
 800ab6c:	186d      	addle	r5, r5, r1
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	f1be 0e01 	subs.w	lr, lr, #1
 800ab74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ab7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ab80:	d1ed      	bne.n	800ab5e <__ieee754_sqrt+0x8a>
 800ab82:	4674      	mov	r4, lr
 800ab84:	2720      	movs	r7, #32
 800ab86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ab8a:	4563      	cmp	r3, ip
 800ab8c:	eb01 000e 	add.w	r0, r1, lr
 800ab90:	dc02      	bgt.n	800ab98 <__ieee754_sqrt+0xc4>
 800ab92:	d113      	bne.n	800abbc <__ieee754_sqrt+0xe8>
 800ab94:	4290      	cmp	r0, r2
 800ab96:	d811      	bhi.n	800abbc <__ieee754_sqrt+0xe8>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	eb00 0e01 	add.w	lr, r0, r1
 800ab9e:	da57      	bge.n	800ac50 <__ieee754_sqrt+0x17c>
 800aba0:	f1be 0f00 	cmp.w	lr, #0
 800aba4:	db54      	blt.n	800ac50 <__ieee754_sqrt+0x17c>
 800aba6:	f10c 0801 	add.w	r8, ip, #1
 800abaa:	eba3 030c 	sub.w	r3, r3, ip
 800abae:	4290      	cmp	r0, r2
 800abb0:	bf88      	it	hi
 800abb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800abb6:	1a12      	subs	r2, r2, r0
 800abb8:	440c      	add	r4, r1
 800abba:	46c4      	mov	ip, r8
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	3f01      	subs	r7, #1
 800abc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800abc4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800abc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800abcc:	d1dd      	bne.n	800ab8a <__ieee754_sqrt+0xb6>
 800abce:	4313      	orrs	r3, r2
 800abd0:	d01b      	beq.n	800ac0a <__ieee754_sqrt+0x136>
 800abd2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ac80 <__ieee754_sqrt+0x1ac>
 800abd6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ac84 <__ieee754_sqrt+0x1b0>
 800abda:	e9da 0100 	ldrd	r0, r1, [sl]
 800abde:	e9db 2300 	ldrd	r2, r3, [fp]
 800abe2:	f7f5 fb59 	bl	8000298 <__aeabi_dsub>
 800abe6:	e9da 8900 	ldrd	r8, r9, [sl]
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f7f5 ff85 	bl	8000b00 <__aeabi_dcmple>
 800abf6:	b140      	cbz	r0, 800ac0a <__ieee754_sqrt+0x136>
 800abf8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800abfc:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac00:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac04:	d126      	bne.n	800ac54 <__ieee754_sqrt+0x180>
 800ac06:	3501      	adds	r5, #1
 800ac08:	463c      	mov	r4, r7
 800ac0a:	106a      	asrs	r2, r5, #1
 800ac0c:	0863      	lsrs	r3, r4, #1
 800ac0e:	07e9      	lsls	r1, r5, #31
 800ac10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ac14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ac18:	bf48      	it	mi
 800ac1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ac22:	461c      	mov	r4, r3
 800ac24:	e76d      	b.n	800ab02 <__ieee754_sqrt+0x2e>
 800ac26:	0ad3      	lsrs	r3, r2, #11
 800ac28:	3815      	subs	r0, #21
 800ac2a:	0552      	lsls	r2, r2, #21
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0fa      	beq.n	800ac26 <__ieee754_sqrt+0x152>
 800ac30:	02dc      	lsls	r4, r3, #11
 800ac32:	d50a      	bpl.n	800ac4a <__ieee754_sqrt+0x176>
 800ac34:	f1c1 0420 	rsb	r4, r1, #32
 800ac38:	fa22 f404 	lsr.w	r4, r2, r4
 800ac3c:	1e4d      	subs	r5, r1, #1
 800ac3e:	408a      	lsls	r2, r1
 800ac40:	4323      	orrs	r3, r4
 800ac42:	1b41      	subs	r1, r0, r5
 800ac44:	e772      	b.n	800ab2c <__ieee754_sqrt+0x58>
 800ac46:	4608      	mov	r0, r1
 800ac48:	e7f0      	b.n	800ac2c <__ieee754_sqrt+0x158>
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	e7ef      	b.n	800ac30 <__ieee754_sqrt+0x15c>
 800ac50:	46e0      	mov	r8, ip
 800ac52:	e7aa      	b.n	800abaa <__ieee754_sqrt+0xd6>
 800ac54:	f7f5 fb22 	bl	800029c <__adddf3>
 800ac58:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4640      	mov	r0, r8
 800ac62:	4649      	mov	r1, r9
 800ac64:	f7f5 ff42 	bl	8000aec <__aeabi_dcmplt>
 800ac68:	b120      	cbz	r0, 800ac74 <__ieee754_sqrt+0x1a0>
 800ac6a:	1ca0      	adds	r0, r4, #2
 800ac6c:	bf08      	it	eq
 800ac6e:	3501      	addeq	r5, #1
 800ac70:	3402      	adds	r4, #2
 800ac72:	e7ca      	b.n	800ac0a <__ieee754_sqrt+0x136>
 800ac74:	3401      	adds	r4, #1
 800ac76:	f024 0401 	bic.w	r4, r4, #1
 800ac7a:	e7c6      	b.n	800ac0a <__ieee754_sqrt+0x136>
 800ac7c:	7ff00000 	.word	0x7ff00000
 800ac80:	200001e0 	.word	0x200001e0
 800ac84:	200001e8 	.word	0x200001e8

0800ac88 <_init>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	bf00      	nop
 800ac8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8e:	bc08      	pop	{r3}
 800ac90:	469e      	mov	lr, r3
 800ac92:	4770      	bx	lr

0800ac94 <_fini>:
 800ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac96:	bf00      	nop
 800ac98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9a:	bc08      	pop	{r3}
 800ac9c:	469e      	mov	lr, r3
 800ac9e:	4770      	bx	lr
